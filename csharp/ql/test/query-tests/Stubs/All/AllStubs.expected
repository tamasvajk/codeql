| // This file contains auto-generated code.\n\nnamespace A1\n{\n// Generated from `A1.C1` in `Test.cs:141:18:141:19`\npublic class C1\n{\n    public C1() => throw null;\n}\n\n}\nnamespace A2\n{\nnamespace B2\n{\n// Generated from `A2.B2.C2` in `Test.cs:148:22:148:23`\npublic class C2\n{\n    public C2() => throw null;\n}\n\n}\n}\nnamespace A3\n{\n// Generated from `A3.C3` in `Test.cs:154:18:154:19`\npublic class C3\n{\n    public C3() => throw null;\n}\n\n}\nnamespace A4\n{\n// Generated from `A4.C4` in `Test.cs:164:18:164:19`\npublic class C4\n{\n    public C4() => throw null;\n}\n\nnamespace B4\n{\n// Generated from `A4.B4.D4` in `Test.cs:161:22:161:23`\npublic class D4\n{\n    public D4() => throw null;\n}\n\n}\n}\nnamespace Test\n{\n// Generated from `Test.Class1` in `Test.cs:3:18:3:23`\npublic class Class1\n{\n    public Class1() => throw null;\n// Generated from `Test.Class1.Class11` in `Test.cs:29:22:29:28`\npublic class Class11 : Test.Class1.Interface2, Test.Class1.Interface1\n{\n    public Class11(int i) => throw null;\n    int Test.Class1.Interface2.this[int i] { get => throw null; }\n    public void Method1() => throw null;\n    void Test.Class1.Interface2.Method2() => throw null;\n}\n\n\n// Generated from `Test.Class1.Class12` in `Test.cs:46:22:46:28`\npublic class Class12 : Test.Class1.Class11\n{\n    public Class12(int i, float j) : base(default(int)) => throw null;\n}\n\n\n// Generated from `Test.Class1.Class13` in `Test.cs:58:31:58:37`\npublic abstract class Class13\n{\n    protected Class13() => throw null;\n    protected internal virtual void M() => throw null;\n    public virtual void M1<T>() where T: Test.Class1.Class13 => throw null;\n    public abstract void M2();\n}\n\n\n// Generated from `Test.Class1.Class14` in `Test.cs:65:31:65:37`\npublic abstract class Class14 : Test.Class1.Class13\n{\n    protected Class14() => throw null;\n    protected internal override void M() => throw null;\n    public override void M1<T>() => throw null;\n    public abstract override void M2();\n}\n\n\n// Generated from `Test.Class1.Delegate1<>` in `Test.cs:42:30:42:41`\npublic delegate void Delegate1<T>(T i, int j);\n\n\n    public event Test.Class1.Delegate1<int> Event1;\n// Generated from `Test.Class1.GenericType<>` in `Test.cs:51:22:51:35`\npublic class GenericType<T>\n{\n    public GenericType() => throw null;\n// Generated from `Test.Class1.GenericType<>.X` in `Test.cs:53:26:53:26`\npublic class X\n{\n    public X() => throw null;\n}\n\n\n}\n\n\n// Generated from `Test.Class1.Interface1` in `Test.cs:13:26:13:35`\npublic interface Interface1\n{\n    void Method1() => throw null;\n}\n\n\n// Generated from `Test.Class1.Interface2` in `Test.cs:18:38:18:47`\nprotected internal interface Interface2\n{\n    int this[int i] { get => throw null; }\n    void Method2() => throw null;\n}\n\n\n    public Test.Class1.GenericType<int>.X Prop { get => throw null; }\n// Generated from `Test.Class1.Struct1` in `Test.cs:5:23:5:29`\npublic struct Struct1\n{\n    public void Method(Test.Class1.Struct1 s = default(Test.Class1.Struct1)) => throw null;\n    // Stub generator skipped constructor \n    public int i;\n    public static int j = default;\n}\n\n\n}\n\n// Generated from `Test.Class3` in `Test.cs:79:18:79:23`\npublic class Class3\n{\n    public Class3() => throw null;\n    public object Item { get => throw null; set => throw null; }\n    [System.Runtime.CompilerServices.IndexerName("MyItem")]\n    public object this[string index] { get => throw null; set => throw null; }\n}\n\n// Generated from `Test.Class4` in `Test.cs:86:18:86:23`\npublic class Class4\n{\n    public Class4() => throw null;\n    unsafe public void M(int* p) => throw null;\n}\n\n// Generated from `Test.Class5` in `Test.cs:97:18:97:23`\npublic class Class5 : Test.IInterface1\n{\n    public Class5() => throw null;\n    public void M2() => throw null;\n}\n\n// Generated from `Test.Class6<>` in `Test.cs:102:18:102:26`\npublic class Class6<T> where T: class, Test.IInterface1\n{\n    public Class6(int i) => throw null;\n    public virtual void M1<T>() where T: class, Test.IInterface1, new() => throw null;\n}\n\n// Generated from `Test.Class7` in `Test.cs:109:18:109:23`\npublic class Class7 : Test.Class6<Test.Class5>\n{\n    public Class7(int i) : base(default(int)) => throw null;\n    public override void M1<T>() where T: class => throw null;\n}\n\n// Generated from `Test.Class8` in `Test.cs:116:18:116:23`\npublic class Class8\n{\n    public Class8() => throw null;\n    public static int @this = default;\n}\n\n// Generated from `Test.Class9` in `Test.cs:121:18:121:23`\npublic class Class9\n{\n    private Class9(int i) => throw null;\n// Generated from `Test.Class9.Nested` in `Test.cs:125:22:125:27`\npublic class Nested : Test.Class9\n{\n    internal Nested(int i) : base(default(int)) => throw null;\n}\n\n\n    public Test.Class9.Nested NestedInstance { get => throw null; }\n}\n\n// Generated from `Test.IInterface1` in `Test.cs:91:22:91:32`\npublic interface IInterface1\n{\n    void M1() => throw null;\n    void M2() => throw null;\n}\n\n}\n\n\n// This file contains auto-generated code.\n\nnamespace System\n{\n// Generated from `System.Console` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class Console\n{\n    public static System.ConsoleColor BackgroundColor { get => throw null; set => throw null; }\n    public static void Beep(int frequency, int duration) => throw null;\n    public static void Beep() => throw null;\n    public static int BufferHeight { get => throw null; set => throw null; }\n    public static int BufferWidth { get => throw null; set => throw null; }\n    public static event System.ConsoleCancelEventHandler CancelKeyPress;\n    public static bool CapsLock { get => throw null; }\n    public static void Clear() => throw null;\n    public static int CursorLeft { get => throw null; set => throw null; }\n    public static int CursorSize { get => throw null; set => throw null; }\n    public static int CursorTop { get => throw null; set => throw null; }\n    public static bool CursorVisible { get => throw null; set => throw null; }\n    public static System.IO.TextWriter Error { get => throw null; }\n    public static System.ConsoleColor ForegroundColor { get => throw null; set => throw null; }\n    public static (int,int) GetCursorPosition() => throw null;\n    public static System.IO.TextReader In { get => throw null; }\n    public static System.Text.Encoding InputEncoding { get => throw null; set => throw null; }\n    public static bool IsErrorRedirected { get => throw null; }\n    public static bool IsInputRedirected { get => throw null; }\n    public static bool IsOutputRedirected { get => throw null; }\n    public static bool KeyAvailable { get => throw null; }\n    public static int LargestWindowHeight { get => throw null; }\n    public static int LargestWindowWidth { get => throw null; }\n    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, System.Char sourceChar, System.ConsoleColor sourceForeColor, System.ConsoleColor sourceBackColor) => throw null;\n    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop) => throw null;\n    public static bool NumberLock { get => throw null; }\n    public static System.IO.Stream OpenStandardError(int bufferSize) => throw null;\n    public static System.IO.Stream OpenStandardError() => throw null;\n    public static System.IO.Stream OpenStandardInput(int bufferSize) => throw null;\n    public static System.IO.Stream OpenStandardInput() => throw null;\n    public static System.IO.Stream OpenStandardOutput(int bufferSize) => throw null;\n    public static System.IO.Stream OpenStandardOutput() => throw null;\n    public static System.IO.TextWriter Out { get => throw null; }\n    public static System.Text.Encoding OutputEncoding { get => throw null; set => throw null; }\n    public static int Read() => throw null;\n    public static System.ConsoleKeyInfo ReadKey(bool intercept) => throw null;\n    public static System.ConsoleKeyInfo ReadKey() => throw null;\n    public static string ReadLine() => throw null;\n    public static void ResetColor() => throw null;\n    public static void SetBufferSize(int width, int height) => throw null;\n    public static void SetCursorPosition(int left, int top) => throw null;\n    public static void SetError(System.IO.TextWriter newError) => throw null;\n    public static void SetIn(System.IO.TextReader newIn) => throw null;\n    public static void SetOut(System.IO.TextWriter newOut) => throw null;\n    public static void SetWindowPosition(int left, int top) => throw null;\n    public static void SetWindowSize(int width, int height) => throw null;\n    public static string Title { get => throw null; set => throw null; }\n    public static bool TreatControlCAsInput { get => throw null; set => throw null; }\n    public static int WindowHeight { get => throw null; set => throw null; }\n    public static int WindowLeft { get => throw null; set => throw null; }\n    public static int WindowTop { get => throw null; set => throw null; }\n    public static int WindowWidth { get => throw null; set => throw null; }\n    public static void Write(string value) => throw null;\n    public static void Write(string format, params object[] arg) => throw null;\n    public static void Write(string format, object arg0, object arg1, object arg2) => throw null;\n    public static void Write(string format, object arg0, object arg1) => throw null;\n    public static void Write(string format, object arg0) => throw null;\n    public static void Write(object value) => throw null;\n    public static void Write(int value) => throw null;\n    public static void Write(float value) => throw null;\n    public static void Write(double value) => throw null;\n    public static void Write(bool value) => throw null;\n    public static void Write(System.UInt64 value) => throw null;\n    public static void Write(System.UInt32 value) => throw null;\n    public static void Write(System.Int64 value) => throw null;\n    public static void Write(System.Decimal value) => throw null;\n    public static void Write(System.Char[] buffer, int index, int count) => throw null;\n    public static void Write(System.Char[] buffer) => throw null;\n    public static void Write(System.Char value) => throw null;\n    public static void WriteLine(string value) => throw null;\n    public static void WriteLine(string format, params object[] arg) => throw null;\n    public static void WriteLine(string format, object arg0, object arg1, object arg2) => throw null;\n    public static void WriteLine(string format, object arg0, object arg1) => throw null;\n    public static void WriteLine(string format, object arg0) => throw null;\n    public static void WriteLine(object value) => throw null;\n    public static void WriteLine(int value) => throw null;\n    public static void WriteLine(float value) => throw null;\n    public static void WriteLine(double value) => throw null;\n    public static void WriteLine(bool value) => throw null;\n    public static void WriteLine(System.UInt64 value) => throw null;\n    public static void WriteLine(System.UInt32 value) => throw null;\n    public static void WriteLine(System.Int64 value) => throw null;\n    public static void WriteLine(System.Decimal value) => throw null;\n    public static void WriteLine(System.Char[] buffer, int index, int count) => throw null;\n    public static void WriteLine(System.Char[] buffer) => throw null;\n    public static void WriteLine(System.Char value) => throw null;\n    public static void WriteLine() => throw null;\n}\n\n// Generated from `System.ConsoleCancelEventArgs` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ConsoleCancelEventArgs : System.EventArgs\n{\n    public bool Cancel { get => throw null; set => throw null; }\n    public System.ConsoleSpecialKey SpecialKey { get => throw null; }\n}\n\n// Generated from `System.ConsoleCancelEventHandler` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ConsoleCancelEventHandler(object sender, System.ConsoleCancelEventArgs e);\n\n// Generated from `System.ConsoleColor` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ConsoleColor\n{\n    Black,\n    Blue,\n    // Stub generator skipped constructor \n    Cyan,\n    DarkBlue,\n    DarkCyan,\n    DarkGray,\n    DarkGreen,\n    DarkMagenta,\n    DarkRed,\n    DarkYellow,\n    Gray,\n    Green,\n    Magenta,\n    Red,\n    White,\n    Yellow,\n}\n\n// Generated from `System.ConsoleKey` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ConsoleKey\n{\n    A,\n    Add,\n    Applications,\n    Attention,\n    B,\n    Backspace,\n    BrowserBack,\n    BrowserFavorites,\n    BrowserForward,\n    BrowserHome,\n    BrowserRefresh,\n    BrowserSearch,\n    BrowserStop,\n    C,\n    Clear,\n    // Stub generator skipped constructor \n    CrSel,\n    D,\n    D0,\n    D1,\n    D2,\n    D3,\n    D4,\n    D5,\n    D6,\n    D7,\n    D8,\n    D9,\n    Decimal,\n    Delete,\n    Divide,\n    DownArrow,\n    E,\n    End,\n    Enter,\n    EraseEndOfFile,\n    Escape,\n    ExSel,\n    Execute,\n    F,\n    F1,\n    F10,\n    F11,\n    F12,\n    F13,\n    F14,\n    F15,\n    F16,\n    F17,\n    F18,\n    F19,\n    F2,\n    F20,\n    F21,\n    F22,\n    F23,\n    F24,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    G,\n    H,\n    Help,\n    Home,\n    I,\n    Insert,\n    J,\n    K,\n    L,\n    LaunchApp1,\n    LaunchApp2,\n    LaunchMail,\n    LaunchMediaSelect,\n    LeftArrow,\n    LeftWindows,\n    M,\n    MediaNext,\n    MediaPlay,\n    MediaPrevious,\n    MediaStop,\n    Multiply,\n    N,\n    NoName,\n    NumPad0,\n    NumPad1,\n    NumPad2,\n    NumPad3,\n    NumPad4,\n    NumPad5,\n    NumPad6,\n    NumPad7,\n    NumPad8,\n    NumPad9,\n    O,\n    Oem1,\n    Oem102,\n    Oem2,\n    Oem3,\n    Oem4,\n    Oem5,\n    Oem6,\n    Oem7,\n    Oem8,\n    OemClear,\n    OemComma,\n    OemMinus,\n    OemPeriod,\n    OemPlus,\n    P,\n    Pa1,\n    Packet,\n    PageDown,\n    PageUp,\n    Pause,\n    Play,\n    Print,\n    PrintScreen,\n    Process,\n    Q,\n    R,\n    RightArrow,\n    RightWindows,\n    S,\n    Select,\n    Separator,\n    Sleep,\n    Spacebar,\n    Subtract,\n    T,\n    Tab,\n    U,\n    UpArrow,\n    V,\n    VolumeDown,\n    VolumeMute,\n    VolumeUp,\n    W,\n    X,\n    Y,\n    Z,\n    Zoom,\n}\n\n// Generated from `System.ConsoleKeyInfo` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct ConsoleKeyInfo : System.IEquatable<System.ConsoleKeyInfo>\n{\n    public static bool operator !=(System.ConsoleKeyInfo a, System.ConsoleKeyInfo b) => throw null;\n    public static bool operator ==(System.ConsoleKeyInfo a, System.ConsoleKeyInfo b) => throw null;\n    public ConsoleKeyInfo(System.Char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control) => throw null;\n    // Stub generator skipped constructor \n    public override bool Equals(object value) => throw null;\n    public bool Equals(System.ConsoleKeyInfo obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public System.ConsoleKey Key { get => throw null; }\n    public System.Char KeyChar { get => throw null; }\n    public System.ConsoleModifiers Modifiers { get => throw null; }\n}\n\n// Generated from `System.ConsoleModifiers` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum ConsoleModifiers\n{\n    Alt,\n    // Stub generator skipped constructor \n    Control,\n    Shift,\n}\n\n// Generated from `System.ConsoleSpecialKey` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ConsoleSpecialKey\n{\n    // Stub generator skipped constructor \n    ControlBreak,\n    ControlC,\n}\n\n}\n\n\n |
