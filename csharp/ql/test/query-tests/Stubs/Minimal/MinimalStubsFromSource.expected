| // This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace Microsoft\n{\nnamespace Win32\n{\nnamespace SafeHandles\n{\n// Generated from `Microsoft.Win32.SafeHandles.SafePipeHandle` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SafePipeHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n{\n    protected override void Dispose(bool disposing) => throw null;\n    public override bool IsInvalid { get => throw null; }\n    protected override bool ReleaseHandle() => throw null;\n    public SafePipeHandle(System.IntPtr preexistingHandle, bool ownsHandle) : base(default(bool)) => throw null;\n}\n\n}\n}\n}\nnamespace System\n{\nnamespace IO\n{\nnamespace Pipes\n{\n// Generated from `System.IO.Pipes.AnonymousPipeClientStream` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class AnonymousPipeClientStream : System.IO.Pipes.PipeStream\n{\n    public AnonymousPipeClientStream(string pipeHandleAsString) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public AnonymousPipeClientStream(System.IO.Pipes.PipeDirection direction, string pipeHandleAsString) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public AnonymousPipeClientStream(System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public override System.IO.Pipes.PipeTransmissionMode ReadMode { set => throw null; }\n    public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get => throw null; }\n    // ERR: Stub generator didn't handle member: ~AnonymousPipeClientStream\n}\n\n// Generated from `System.IO.Pipes.AnonymousPipeServerStream` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class AnonymousPipeServerStream : System.IO.Pipes.PipeStream\n{\n    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability, int bufferSize) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction, System.IO.HandleInheritability inheritability) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction, Microsoft.Win32.SafeHandles.SafePipeHandle serverSafePipeHandle, Microsoft.Win32.SafeHandles.SafePipeHandle clientSafePipeHandle) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public AnonymousPipeServerStream(System.IO.Pipes.PipeDirection direction) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public AnonymousPipeServerStream() : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public Microsoft.Win32.SafeHandles.SafePipeHandle ClientSafePipeHandle { get => throw null; }\n    protected override void Dispose(bool disposing) => throw null;\n    public void DisposeLocalCopyOfClientHandle() => throw null;\n    public string GetClientHandleAsString() => throw null;\n    public override System.IO.Pipes.PipeTransmissionMode ReadMode { set => throw null; }\n    public override System.IO.Pipes.PipeTransmissionMode TransmissionMode { get => throw null; }\n    // ERR: Stub generator didn't handle member: ~AnonymousPipeServerStream\n}\n\n// Generated from `System.IO.Pipes.NamedPipeClientStream` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NamedPipeClientStream : System.IO.Pipes.PipeStream\n{\n    protected internal override void CheckPipePropertyOperations() => throw null;\n    public void Connect(int timeout) => throw null;\n    public void Connect() => throw null;\n    public System.Threading.Tasks.Task ConnectAsync(int timeout, System.Threading.CancellationToken cancellationToken) => throw null;\n    public System.Threading.Tasks.Task ConnectAsync(int timeout) => throw null;\n    public System.Threading.Tasks.Task ConnectAsync(System.Threading.CancellationToken cancellationToken) => throw null;\n    public System.Threading.Tasks.Task ConnectAsync() => throw null;\n    public override int InBufferSize { get => throw null; }\n    public NamedPipeClientStream(string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel, System.IO.HandleInheritability inheritability) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeClientStream(string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeClientStream(string serverName, string pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeClientStream(string serverName, string pipeName, System.IO.Pipes.PipeDirection direction) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeClientStream(string serverName, string pipeName) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeClientStream(string pipeName) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeClientStream(System.IO.Pipes.PipeDirection direction, bool isAsync, bool isConnected, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public int NumberOfServerInstances { get => throw null; }\n    public override int OutBufferSize { get => throw null; }\n    // ERR: Stub generator didn't handle member: ~NamedPipeClientStream\n}\n\n// Generated from `System.IO.Pipes.NamedPipeServerStream` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NamedPipeServerStream : System.IO.Pipes.PipeStream\n{\n    public System.IAsyncResult BeginWaitForConnection(System.AsyncCallback callback, object state) => throw null;\n    public void Disconnect() => throw null;\n    public void EndWaitForConnection(System.IAsyncResult asyncResult) => throw null;\n    public string GetImpersonationUserName() => throw null;\n    public override int InBufferSize { get => throw null; }\n    public const int MaxAllowedServerInstances = default;\n    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options, int inBufferSize, int outBufferSize) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode, System.IO.Pipes.PipeOptions options) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances, System.IO.Pipes.PipeTransmissionMode transmissionMode) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction, int maxNumberOfServerInstances) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeServerStream(string pipeName, System.IO.Pipes.PipeDirection direction) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeServerStream(string pipeName) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public NamedPipeServerStream(System.IO.Pipes.PipeDirection direction, bool isAsync, bool isConnected, Microsoft.Win32.SafeHandles.SafePipeHandle safePipeHandle) : base(default(System.IO.Pipes.PipeDirection), default(int)) => throw null;\n    public override int OutBufferSize { get => throw null; }\n    public void RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker impersonationWorker) => throw null;\n    public void WaitForConnection() => throw null;\n    public System.Threading.Tasks.Task WaitForConnectionAsync(System.Threading.CancellationToken cancellationToken) => throw null;\n    public System.Threading.Tasks.Task WaitForConnectionAsync() => throw null;\n    // ERR: Stub generator didn't handle member: ~NamedPipeServerStream\n}\n\n// Generated from `System.IO.Pipes.PipeDirection` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum PipeDirection\n{\n    In,\n    InOut,\n    Out,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.IO.Pipes.PipeOptions` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum PipeOptions\n{\n    Asynchronous,\n    CurrentUserOnly,\n    None,\n    // Stub generator skipped constructor \n    WriteThrough,\n}\n\n// Generated from `System.IO.Pipes.PipeStream` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class PipeStream : System.IO.Stream\n{\n    public override System.IAsyncResult BeginRead(System.Byte[] buffer, int offset, int count, System.AsyncCallback callback, object state) => throw null;\n    public override System.IAsyncResult BeginWrite(System.Byte[] buffer, int offset, int count, System.AsyncCallback callback, object state) => throw null;\n    public override bool CanRead { get => throw null; }\n    public override bool CanSeek { get => throw null; }\n    public override bool CanWrite { get => throw null; }\n    protected internal virtual void CheckPipePropertyOperations() => throw null;\n    protected internal void CheckReadOperations() => throw null;\n    protected internal void CheckWriteOperations() => throw null;\n    protected override void Dispose(bool disposing) => throw null;\n    public override int EndRead(System.IAsyncResult asyncResult) => throw null;\n    public override void EndWrite(System.IAsyncResult asyncResult) => throw null;\n    public override void Flush() => throw null;\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) => throw null;\n    public virtual int InBufferSize { get => throw null; }\n    protected void InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle handle, bool isExposed, bool isAsync) => throw null;\n    public bool IsAsync { get => throw null; }\n    public bool IsConnected { get => throw null; set => throw null; }\n    protected bool IsHandleExposed { get => throw null; }\n    public bool IsMessageComplete { get => throw null; }\n    public override System.Int64 Length { get => throw null; }\n    public virtual int OutBufferSize { get => throw null; }\n    protected PipeStream(System.IO.Pipes.PipeDirection direction, int bufferSize) => throw null;\n    protected PipeStream(System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeTransmissionMode transmissionMode, int outBufferSize) => throw null;\n    public override System.Int64 Position { get => throw null; set => throw null; }\n    public override int Read(System.Span<System.Byte> buffer) => throw null;\n    public override int Read(System.Byte[] buffer, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public override System.Threading.Tasks.Task<int> ReadAsync(System.Byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override int ReadByte() => throw null;\n    public virtual System.IO.Pipes.PipeTransmissionMode ReadMode { get => throw null; set => throw null; }\n    public Microsoft.Win32.SafeHandles.SafePipeHandle SafePipeHandle { get => throw null; }\n    public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin) => throw null;\n    public override void SetLength(System.Int64 value) => throw null;\n    public virtual System.IO.Pipes.PipeTransmissionMode TransmissionMode { get => throw null; }\n    public void WaitForPipeDrain() => throw null;\n    public override void Write(System.ReadOnlySpan<System.Byte> buffer) => throw null;\n    public override void Write(System.Byte[] buffer, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public override System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override void WriteByte(System.Byte value) => throw null;\n}\n\n// Generated from `System.IO.Pipes.PipeStreamImpersonationWorker` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void PipeStreamImpersonationWorker();\n\n// Generated from `System.IO.Pipes.PipeTransmissionMode` in `System.IO.Pipes, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum PipeTransmissionMode\n{\n    Byte,\n    Message,\n    // Stub generator skipped constructor \n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\n// Generated from `System.Console` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class Console\n{\n    public static System.ConsoleColor BackgroundColor { get => throw null; set => throw null; }\n    public static void Beep(int frequency, int duration) => throw null;\n    public static void Beep() => throw null;\n    public static int BufferHeight { get => throw null; set => throw null; }\n    public static int BufferWidth { get => throw null; set => throw null; }\n    public static event System.ConsoleCancelEventHandler CancelKeyPress;\n    public static bool CapsLock { get => throw null; }\n    public static void Clear() => throw null;\n    public static int CursorLeft { get => throw null; set => throw null; }\n    public static int CursorSize { get => throw null; set => throw null; }\n    public static int CursorTop { get => throw null; set => throw null; }\n    public static bool CursorVisible { get => throw null; set => throw null; }\n    public static System.IO.TextWriter Error { get => throw null; }\n    public static System.ConsoleColor ForegroundColor { get => throw null; set => throw null; }\n    public static (int,int) GetCursorPosition() => throw null;\n    public static System.IO.TextReader In { get => throw null; }\n    public static System.Text.Encoding InputEncoding { get => throw null; set => throw null; }\n    public static bool IsErrorRedirected { get => throw null; }\n    public static bool IsInputRedirected { get => throw null; }\n    public static bool IsOutputRedirected { get => throw null; }\n    public static bool KeyAvailable { get => throw null; }\n    public static int LargestWindowHeight { get => throw null; }\n    public static int LargestWindowWidth { get => throw null; }\n    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, System.Char sourceChar, System.ConsoleColor sourceForeColor, System.ConsoleColor sourceBackColor) => throw null;\n    public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop) => throw null;\n    public static bool NumberLock { get => throw null; }\n    public static System.IO.Stream OpenStandardError(int bufferSize) => throw null;\n    public static System.IO.Stream OpenStandardError() => throw null;\n    public static System.IO.Stream OpenStandardInput(int bufferSize) => throw null;\n    public static System.IO.Stream OpenStandardInput() => throw null;\n    public static System.IO.Stream OpenStandardOutput(int bufferSize) => throw null;\n    public static System.IO.Stream OpenStandardOutput() => throw null;\n    public static System.IO.TextWriter Out { get => throw null; }\n    public static System.Text.Encoding OutputEncoding { get => throw null; set => throw null; }\n    public static int Read() => throw null;\n    public static System.ConsoleKeyInfo ReadKey(bool intercept) => throw null;\n    public static System.ConsoleKeyInfo ReadKey() => throw null;\n    public static string ReadLine() => throw null;\n    public static void ResetColor() => throw null;\n    public static void SetBufferSize(int width, int height) => throw null;\n    public static void SetCursorPosition(int left, int top) => throw null;\n    public static void SetError(System.IO.TextWriter newError) => throw null;\n    public static void SetIn(System.IO.TextReader newIn) => throw null;\n    public static void SetOut(System.IO.TextWriter newOut) => throw null;\n    public static void SetWindowPosition(int left, int top) => throw null;\n    public static void SetWindowSize(int width, int height) => throw null;\n    public static string Title { get => throw null; set => throw null; }\n    public static bool TreatControlCAsInput { get => throw null; set => throw null; }\n    public static int WindowHeight { get => throw null; set => throw null; }\n    public static int WindowLeft { get => throw null; set => throw null; }\n    public static int WindowTop { get => throw null; set => throw null; }\n    public static int WindowWidth { get => throw null; set => throw null; }\n    public static void Write(string value) => throw null;\n    public static void Write(string format, params object[] arg) => throw null;\n    public static void Write(string format, object arg0, object arg1, object arg2) => throw null;\n    public static void Write(string format, object arg0, object arg1) => throw null;\n    public static void Write(string format, object arg0) => throw null;\n    public static void Write(object value) => throw null;\n    public static void Write(int value) => throw null;\n    public static void Write(float value) => throw null;\n    public static void Write(double value) => throw null;\n    public static void Write(bool value) => throw null;\n    public static void Write(System.UInt64 value) => throw null;\n    public static void Write(System.UInt32 value) => throw null;\n    public static void Write(System.Int64 value) => throw null;\n    public static void Write(System.Decimal value) => throw null;\n    public static void Write(System.Char[] buffer, int index, int count) => throw null;\n    public static void Write(System.Char[] buffer) => throw null;\n    public static void Write(System.Char value) => throw null;\n    public static void WriteLine(string value) => throw null;\n    public static void WriteLine(string format, params object[] arg) => throw null;\n    public static void WriteLine(string format, object arg0, object arg1, object arg2) => throw null;\n    public static void WriteLine(string format, object arg0, object arg1) => throw null;\n    public static void WriteLine(string format, object arg0) => throw null;\n    public static void WriteLine(object value) => throw null;\n    public static void WriteLine(int value) => throw null;\n    public static void WriteLine(float value) => throw null;\n    public static void WriteLine(double value) => throw null;\n    public static void WriteLine(bool value) => throw null;\n    public static void WriteLine(System.UInt64 value) => throw null;\n    public static void WriteLine(System.UInt32 value) => throw null;\n    public static void WriteLine(System.Int64 value) => throw null;\n    public static void WriteLine(System.Decimal value) => throw null;\n    public static void WriteLine(System.Char[] buffer, int index, int count) => throw null;\n    public static void WriteLine(System.Char[] buffer) => throw null;\n    public static void WriteLine(System.Char value) => throw null;\n    public static void WriteLine() => throw null;\n}\n\n// Generated from `System.ConsoleCancelEventArgs` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ConsoleCancelEventArgs : System.EventArgs\n{\n    public bool Cancel { get => throw null; set => throw null; }\n    public System.ConsoleSpecialKey SpecialKey { get => throw null; }\n}\n\n// Generated from `System.ConsoleCancelEventHandler` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ConsoleCancelEventHandler(object sender, System.ConsoleCancelEventArgs e);\n\n// Generated from `System.ConsoleColor` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ConsoleColor\n{\n    Black,\n    Blue,\n    // Stub generator skipped constructor \n    Cyan,\n    DarkBlue,\n    DarkCyan,\n    DarkGray,\n    DarkGreen,\n    DarkMagenta,\n    DarkRed,\n    DarkYellow,\n    Gray,\n    Green,\n    Magenta,\n    Red,\n    White,\n    Yellow,\n}\n\n// Generated from `System.ConsoleKey` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ConsoleKey\n{\n    A,\n    Add,\n    Applications,\n    Attention,\n    B,\n    Backspace,\n    BrowserBack,\n    BrowserFavorites,\n    BrowserForward,\n    BrowserHome,\n    BrowserRefresh,\n    BrowserSearch,\n    BrowserStop,\n    C,\n    Clear,\n    // Stub generator skipped constructor \n    CrSel,\n    D,\n    D0,\n    D1,\n    D2,\n    D3,\n    D4,\n    D5,\n    D6,\n    D7,\n    D8,\n    D9,\n    Decimal,\n    Delete,\n    Divide,\n    DownArrow,\n    E,\n    End,\n    Enter,\n    EraseEndOfFile,\n    Escape,\n    ExSel,\n    Execute,\n    F,\n    F1,\n    F10,\n    F11,\n    F12,\n    F13,\n    F14,\n    F15,\n    F16,\n    F17,\n    F18,\n    F19,\n    F2,\n    F20,\n    F21,\n    F22,\n    F23,\n    F24,\n    F3,\n    F4,\n    F5,\n    F6,\n    F7,\n    F8,\n    F9,\n    G,\n    H,\n    Help,\n    Home,\n    I,\n    Insert,\n    J,\n    K,\n    L,\n    LaunchApp1,\n    LaunchApp2,\n    LaunchMail,\n    LaunchMediaSelect,\n    LeftArrow,\n    LeftWindows,\n    M,\n    MediaNext,\n    MediaPlay,\n    MediaPrevious,\n    MediaStop,\n    Multiply,\n    N,\n    NoName,\n    NumPad0,\n    NumPad1,\n    NumPad2,\n    NumPad3,\n    NumPad4,\n    NumPad5,\n    NumPad6,\n    NumPad7,\n    NumPad8,\n    NumPad9,\n    O,\n    Oem1,\n    Oem102,\n    Oem2,\n    Oem3,\n    Oem4,\n    Oem5,\n    Oem6,\n    Oem7,\n    Oem8,\n    OemClear,\n    OemComma,\n    OemMinus,\n    OemPeriod,\n    OemPlus,\n    P,\n    Pa1,\n    Packet,\n    PageDown,\n    PageUp,\n    Pause,\n    Play,\n    Print,\n    PrintScreen,\n    Process,\n    Q,\n    R,\n    RightArrow,\n    RightWindows,\n    S,\n    Select,\n    Separator,\n    Sleep,\n    Spacebar,\n    Subtract,\n    T,\n    Tab,\n    U,\n    UpArrow,\n    V,\n    VolumeDown,\n    VolumeMute,\n    VolumeUp,\n    W,\n    X,\n    Y,\n    Z,\n    Zoom,\n}\n\n// Generated from `System.ConsoleKeyInfo` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct ConsoleKeyInfo : System.IEquatable<System.ConsoleKeyInfo>\n{\n    public static bool operator !=(System.ConsoleKeyInfo a, System.ConsoleKeyInfo b) => throw null;\n    public static bool operator ==(System.ConsoleKeyInfo a, System.ConsoleKeyInfo b) => throw null;\n    public ConsoleKeyInfo(System.Char keyChar, System.ConsoleKey key, bool shift, bool alt, bool control) => throw null;\n    // Stub generator skipped constructor \n    public override bool Equals(object value) => throw null;\n    public bool Equals(System.ConsoleKeyInfo obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public System.ConsoleKey Key { get => throw null; }\n    public System.Char KeyChar { get => throw null; }\n    public System.ConsoleModifiers Modifiers { get => throw null; }\n}\n\n// Generated from `System.ConsoleModifiers` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum ConsoleModifiers\n{\n    Alt,\n    // Stub generator skipped constructor \n    Control,\n    Shift,\n}\n\n// Generated from `System.ConsoleSpecialKey` in `System.Console, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ConsoleSpecialKey\n{\n    // Stub generator skipped constructor \n    ControlBreak,\n    ControlC,\n}\n\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\n// Generated from `System.FileStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class FileStyleUriParser : System.UriParser\n{\n    public FileStyleUriParser() => throw null;\n}\n\n// Generated from `System.FtpStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class FtpStyleUriParser : System.UriParser\n{\n    public FtpStyleUriParser() => throw null;\n}\n\n// Generated from `System.GenericUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class GenericUriParser : System.UriParser\n{\n    public GenericUriParser(System.GenericUriParserOptions options) => throw null;\n}\n\n// Generated from `System.GenericUriParserOptions` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum GenericUriParserOptions\n{\n    AllowEmptyAuthority,\n    Default,\n    DontCompressPath,\n    DontConvertPathBackslashes,\n    DontUnescapePathDotsAndSlashes,\n    GenericAuthority,\n    // Stub generator skipped constructor \n    Idn,\n    IriParsing,\n    NoFragment,\n    NoPort,\n    NoQuery,\n    NoUserInfo,\n}\n\n// Generated from `System.GopherStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class GopherStyleUriParser : System.UriParser\n{\n    public GopherStyleUriParser() => throw null;\n}\n\n// Generated from `System.HttpStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class HttpStyleUriParser : System.UriParser\n{\n    public HttpStyleUriParser() => throw null;\n}\n\n// Generated from `System.LdapStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LdapStyleUriParser : System.UriParser\n{\n    public LdapStyleUriParser() => throw null;\n}\n\n// Generated from `System.NetPipeStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NetPipeStyleUriParser : System.UriParser\n{\n    public NetPipeStyleUriParser() => throw null;\n}\n\n// Generated from `System.NetTcpStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NetTcpStyleUriParser : System.UriParser\n{\n    public NetTcpStyleUriParser() => throw null;\n}\n\n// Generated from `System.NewsStyleUriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NewsStyleUriParser : System.UriParser\n{\n    public NewsStyleUriParser() => throw null;\n}\n\n// Generated from `System.Uri` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Uri : System.Runtime.Serialization.ISerializable\n{\n    public static bool operator !=(System.Uri uri1, System.Uri uri2) => throw null;\n    public static bool operator ==(System.Uri uri1, System.Uri uri2) => throw null;\n    public string AbsolutePath { get => throw null; }\n    public string AbsoluteUri { get => throw null; }\n    public string Authority { get => throw null; }\n    protected virtual void Canonicalize() => throw null;\n    public static System.UriHostNameType CheckHostName(string name) => throw null;\n    public static bool CheckSchemeName(string schemeName) => throw null;\n    protected virtual void CheckSecurity() => throw null;\n    public static int Compare(System.Uri uri1, System.Uri uri2, System.UriComponents partsToCompare, System.UriFormat compareFormat, System.StringComparison comparisonType) => throw null;\n    public string DnsSafeHost { get => throw null; }\n    public override bool Equals(object comparand) => throw null;\n    protected virtual void Escape() => throw null;\n    public static string EscapeDataString(string stringToEscape) => throw null;\n    protected static string EscapeString(string str) => throw null;\n    public static string EscapeUriString(string stringToEscape) => throw null;\n    public string Fragment { get => throw null; }\n    public static int FromHex(System.Char digit) => throw null;\n    public string GetComponents(System.UriComponents components, System.UriFormat format) => throw null;\n    public override int GetHashCode() => throw null;\n    public string GetLeftPart(System.UriPartial part) => throw null;\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n    protected void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n    public static string HexEscape(System.Char character) => throw null;\n    public static System.Char HexUnescape(string pattern, ref int index) => throw null;\n    public string Host { get => throw null; }\n    public System.UriHostNameType HostNameType { get => throw null; }\n    public string IdnHost { get => throw null; }\n    public bool IsAbsoluteUri { get => throw null; }\n    protected virtual bool IsBadFileSystemCharacter(System.Char character) => throw null;\n    public bool IsBaseOf(System.Uri uri) => throw null;\n    public bool IsDefaultPort { get => throw null; }\n    protected static bool IsExcludedCharacter(System.Char character) => throw null;\n    public bool IsFile { get => throw null; }\n    public static bool IsHexDigit(System.Char character) => throw null;\n    public static bool IsHexEncoding(string pattern, int index) => throw null;\n    public bool IsLoopback { get => throw null; }\n    protected virtual bool IsReservedCharacter(System.Char character) => throw null;\n    public bool IsUnc { get => throw null; }\n    public bool IsWellFormedOriginalString() => throw null;\n    public static bool IsWellFormedUriString(string uriString, System.UriKind uriKind) => throw null;\n    public string LocalPath { get => throw null; }\n    public string MakeRelative(System.Uri toUri) => throw null;\n    public System.Uri MakeRelativeUri(System.Uri uri) => throw null;\n    public string OriginalString { get => throw null; }\n    protected virtual void Parse() => throw null;\n    public string PathAndQuery { get => throw null; }\n    public int Port { get => throw null; }\n    public string Query { get => throw null; }\n    public string Scheme { get => throw null; }\n    public static string SchemeDelimiter;\n    public string[] Segments { get => throw null; }\n    public override string ToString() => throw null;\n    public static bool TryCreate(string uriString, System.UriKind uriKind, out System.Uri result) => throw null;\n    public static bool TryCreate(System.Uri baseUri, string relativeUri, out System.Uri result) => throw null;\n    public static bool TryCreate(System.Uri baseUri, System.Uri relativeUri, out System.Uri result) => throw null;\n    protected virtual string Unescape(string path) => throw null;\n    public static string UnescapeDataString(string stringToUnescape) => throw null;\n    public Uri(string uriString, bool dontEscape) => throw null;\n    public Uri(string uriString, System.UriKind uriKind) => throw null;\n    public Uri(string uriString) => throw null;\n    public Uri(System.Uri baseUri, string relativeUri, bool dontEscape) => throw null;\n    public Uri(System.Uri baseUri, string relativeUri) => throw null;\n    public Uri(System.Uri baseUri, System.Uri relativeUri) => throw null;\n    protected Uri(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n    public static string UriSchemeFile;\n    public static string UriSchemeFtp;\n    public static string UriSchemeGopher;\n    public static string UriSchemeHttp;\n    public static string UriSchemeHttps;\n    public static string UriSchemeMailto;\n    public static string UriSchemeNetPipe;\n    public static string UriSchemeNetTcp;\n    public static string UriSchemeNews;\n    public static string UriSchemeNntp;\n    public bool UserEscaped { get => throw null; }\n    public string UserInfo { get => throw null; }\n}\n\n// Generated from `System.UriBuilder` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class UriBuilder\n{\n    public override bool Equals(object rparam) => throw null;\n    public string Fragment { get => throw null; set => throw null; }\n    public override int GetHashCode() => throw null;\n    public string Host { get => throw null; set => throw null; }\n    public string Password { get => throw null; set => throw null; }\n    public string Path { get => throw null; set => throw null; }\n    public int Port { get => throw null; set => throw null; }\n    public string Query { get => throw null; set => throw null; }\n    public string Scheme { get => throw null; set => throw null; }\n    public override string ToString() => throw null;\n    public System.Uri Uri { get => throw null; }\n    public UriBuilder(string uri) => throw null;\n    public UriBuilder(string schemeName, string hostName) => throw null;\n    public UriBuilder(string scheme, string host, int portNumber) => throw null;\n    public UriBuilder(string scheme, string host, int port, string pathValue) => throw null;\n    public UriBuilder(string scheme, string host, int port, string path, string extraValue) => throw null;\n    public UriBuilder(System.Uri uri) => throw null;\n    public UriBuilder() => throw null;\n    public string UserName { get => throw null; set => throw null; }\n}\n\n// Generated from `System.UriComponents` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum UriComponents\n{\n    AbsoluteUri,\n    Fragment,\n    Host,\n    HostAndPort,\n    HttpRequestUrl,\n    KeepDelimiter,\n    NormalizedHost,\n    Path,\n    PathAndQuery,\n    Port,\n    Query,\n    Scheme,\n    SchemeAndServer,\n    SerializationInfoString,\n    StrongAuthority,\n    StrongPort,\n    // Stub generator skipped constructor \n    UserInfo,\n}\n\n// Generated from `System.UriFormat` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum UriFormat\n{\n    SafeUnescaped,\n    Unescaped,\n    UriEscaped,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.UriFormatException` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class UriFormatException : System.FormatException, System.Runtime.Serialization.ISerializable\n{\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n    public UriFormatException(string textString, System.Exception e) => throw null;\n    public UriFormatException(string textString) => throw null;\n    public UriFormatException() => throw null;\n    protected UriFormatException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n}\n\n// Generated from `System.UriHostNameType` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum UriHostNameType\n{\n    Basic,\n    Dns,\n    IPv4,\n    IPv6,\n    Unknown,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.UriKind` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum UriKind\n{\n    Absolute,\n    Relative,\n    RelativeOrAbsolute,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.UriParser` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class UriParser\n{\n    protected virtual string GetComponents(System.Uri uri, System.UriComponents components, System.UriFormat format) => throw null;\n    protected virtual void InitializeAndValidate(System.Uri uri, out System.UriFormatException parsingError) => throw null;\n    protected virtual bool IsBaseOf(System.Uri baseUri, System.Uri relativeUri) => throw null;\n    public static bool IsKnownScheme(string schemeName) => throw null;\n    protected virtual bool IsWellFormedOriginalString(System.Uri uri) => throw null;\n    protected virtual System.UriParser OnNewUri() => throw null;\n    protected virtual void OnRegister(string schemeName, int defaultPort) => throw null;\n    public static void Register(System.UriParser uriParser, string schemeName, int defaultPort) => throw null;\n    protected virtual string Resolve(System.Uri baseUri, System.Uri relativeUri, out System.UriFormatException parsingError) => throw null;\n    protected UriParser() => throw null;\n}\n\n// Generated from `System.UriPartial` in `System.Private.Uri, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum UriPartial\n{\n    Authority,\n    Path,\n    Query,\n    Scheme,\n    // Stub generator skipped constructor \n}\n\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\n// Generated from `System.UriTypeConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class UriTypeConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public UriTypeConverter() => throw null;\n}\n\nnamespace ComponentModel\n{\n// Generated from `System.ComponentModel.AddingNewEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class AddingNewEventArgs : System.EventArgs\n{\n    public AddingNewEventArgs(object newObject) => throw null;\n    public AddingNewEventArgs() => throw null;\n    public object NewObject { get => throw null; set => throw null; }\n}\n\n// Generated from `System.ComponentModel.AddingNewEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void AddingNewEventHandler(object sender, System.ComponentModel.AddingNewEventArgs e);\n\n// Generated from `System.ComponentModel.AmbientValueAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class AmbientValueAttribute : System.Attribute\n{\n    public AmbientValueAttribute(string value) => throw null;\n    public AmbientValueAttribute(object value) => throw null;\n    public AmbientValueAttribute(int value) => throw null;\n    public AmbientValueAttribute(float value) => throw null;\n    public AmbientValueAttribute(double value) => throw null;\n    public AmbientValueAttribute(bool value) => throw null;\n    public AmbientValueAttribute(System.Type type, string value) => throw null;\n    public AmbientValueAttribute(System.Int64 value) => throw null;\n    public AmbientValueAttribute(System.Int16 value) => throw null;\n    public AmbientValueAttribute(System.Char value) => throw null;\n    public AmbientValueAttribute(System.Byte value) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public object Value { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ArrayConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ArrayConverter : System.ComponentModel.CollectionConverter\n{\n    public ArrayConverter() => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n}\n\n// Generated from `System.ComponentModel.AttributeCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class AttributeCollection : System.Collections.IEnumerable, System.Collections.ICollection\n{\n    public AttributeCollection(params System.Attribute[] attributes) => throw null;\n    protected AttributeCollection() => throw null;\n    protected virtual System.Attribute[] Attributes { get => throw null; }\n    public bool Contains(System.Attribute[] attributes) => throw null;\n    public bool Contains(System.Attribute attribute) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    int System.Collections.ICollection.Count { get => throw null; }\n    public static System.ComponentModel.AttributeCollection Empty;\n    public static System.ComponentModel.AttributeCollection FromExisting(System.ComponentModel.AttributeCollection existing, params System.Attribute[] newAttributes) => throw null;\n    protected System.Attribute GetDefaultAttribute(System.Type attributeType) => throw null;\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public virtual System.Attribute this[int index] { get => throw null; }\n    public virtual System.Attribute this[System.Type attributeType] { get => throw null; }\n    public bool Matches(System.Attribute[] attributes) => throw null;\n    public bool Matches(System.Attribute attribute) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.AttributeProviderAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class AttributeProviderAttribute : System.Attribute\n{\n    public AttributeProviderAttribute(string typeName, string propertyName) => throw null;\n    public AttributeProviderAttribute(string typeName) => throw null;\n    public AttributeProviderAttribute(System.Type type) => throw null;\n    public string PropertyName { get => throw null; }\n    public string TypeName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.BaseNumberConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class BaseNumberConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n}\n\n// Generated from `System.ComponentModel.BindableAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class BindableAttribute : System.Attribute\n{\n    public bool Bindable { get => throw null; }\n    public BindableAttribute(bool bindable, System.ComponentModel.BindingDirection direction) => throw null;\n    public BindableAttribute(bool bindable) => throw null;\n    public BindableAttribute(System.ComponentModel.BindableSupport flags, System.ComponentModel.BindingDirection direction) => throw null;\n    public BindableAttribute(System.ComponentModel.BindableSupport flags) => throw null;\n    public static System.ComponentModel.BindableAttribute Default;\n    public System.ComponentModel.BindingDirection Direction { get => throw null; }\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.BindableAttribute No;\n    public static System.ComponentModel.BindableAttribute Yes;\n}\n\n// Generated from `System.ComponentModel.BindableSupport` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum BindableSupport\n{\n    // Stub generator skipped constructor \n    Default,\n    No,\n    Yes,\n}\n\n// Generated from `System.ComponentModel.BindingDirection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum BindingDirection\n{\n    // Stub generator skipped constructor \n    OneWay,\n    TwoWay,\n}\n\n// Generated from `System.ComponentModel.BindingList<>` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class BindingList<T> : System.Collections.ObjectModel.Collection<T>, System.ComponentModel.IRaiseItemChangedEvents, System.ComponentModel.ICancelAddNew, System.ComponentModel.IBindingList, System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    void System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor prop) => throw null;\n    public T AddNew() => throw null;\n    object System.ComponentModel.IBindingList.AddNew() => throw null;\n    protected virtual object AddNewCore() => throw null;\n    public event System.ComponentModel.AddingNewEventHandler AddingNew;\n    public bool AllowEdit { get => throw null; set => throw null; }\n    bool System.ComponentModel.IBindingList.AllowEdit { get => throw null; }\n    public bool AllowNew { get => throw null; set => throw null; }\n    bool System.ComponentModel.IBindingList.AllowNew { get => throw null; }\n    public bool AllowRemove { get => throw null; set => throw null; }\n    bool System.ComponentModel.IBindingList.AllowRemove { get => throw null; }\n    void System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor prop, System.ComponentModel.ListSortDirection direction) => throw null;\n    protected virtual void ApplySortCore(System.ComponentModel.PropertyDescriptor prop, System.ComponentModel.ListSortDirection direction) => throw null;\n    public BindingList(System.Collections.Generic.IList<T> list) => throw null;\n    public BindingList() => throw null;\n    public virtual void CancelNew(int itemIndex) => throw null;\n    protected override void ClearItems() => throw null;\n    public virtual void EndNew(int itemIndex) => throw null;\n    int System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor prop, object key) => throw null;\n    protected virtual int FindCore(System.ComponentModel.PropertyDescriptor prop, object key) => throw null;\n    protected override void InsertItem(int index, T item) => throw null;\n    bool System.ComponentModel.IBindingList.IsSorted { get => throw null; }\n    protected virtual bool IsSortedCore { get => throw null; }\n    public event System.ComponentModel.ListChangedEventHandler ListChanged;\n    protected virtual void OnAddingNew(System.ComponentModel.AddingNewEventArgs e) => throw null;\n    protected virtual void OnListChanged(System.ComponentModel.ListChangedEventArgs e) => throw null;\n    public bool RaiseListChangedEvents { get => throw null; set => throw null; }\n    bool System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents { get => throw null; }\n    void System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor prop) => throw null;\n    protected override void RemoveItem(int index) => throw null;\n    void System.ComponentModel.IBindingList.RemoveSort() => throw null;\n    protected virtual void RemoveSortCore() => throw null;\n    public void ResetBindings() => throw null;\n    public void ResetItem(int position) => throw null;\n    protected override void SetItem(int index, T item) => throw null;\n    System.ComponentModel.ListSortDirection System.ComponentModel.IBindingList.SortDirection { get => throw null; }\n    protected virtual System.ComponentModel.ListSortDirection SortDirectionCore { get => throw null; }\n    System.ComponentModel.PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get => throw null; }\n    protected virtual System.ComponentModel.PropertyDescriptor SortPropertyCore { get => throw null; }\n    bool System.ComponentModel.IBindingList.SupportsChangeNotification { get => throw null; }\n    protected virtual bool SupportsChangeNotificationCore { get => throw null; }\n    bool System.ComponentModel.IBindingList.SupportsSearching { get => throw null; }\n    protected virtual bool SupportsSearchingCore { get => throw null; }\n    bool System.ComponentModel.IBindingList.SupportsSorting { get => throw null; }\n    protected virtual bool SupportsSortingCore { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.BooleanConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class BooleanConverter : System.ComponentModel.TypeConverter\n{\n    public BooleanConverter() => throw null;\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n}\n\n// Generated from `System.ComponentModel.ByteConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ByteConverter : System.ComponentModel.BaseNumberConverter\n{\n    public ByteConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.CancelEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void CancelEventHandler(object sender);\n\n// Generated from `System.ComponentModel.CharConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CharConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public CharConverter() => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n}\n\n// Generated from `System.ComponentModel.CollectionChangeAction` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum CollectionChangeAction\n{\n    Add,\n    // Stub generator skipped constructor \n    Refresh,\n    Remove,\n}\n\n// Generated from `System.ComponentModel.CollectionChangeEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CollectionChangeEventArgs : System.EventArgs\n{\n    public virtual System.ComponentModel.CollectionChangeAction Action { get => throw null; }\n    public CollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction action, object element) => throw null;\n    public virtual object Element { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.CollectionChangeEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void CollectionChangeEventHandler(object sender, System.ComponentModel.CollectionChangeEventArgs e);\n\n// Generated from `System.ComponentModel.CollectionConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CollectionConverter : System.ComponentModel.TypeConverter\n{\n    public CollectionConverter() => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n}\n\n// Generated from `System.ComponentModel.ComplexBindingPropertiesAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ComplexBindingPropertiesAttribute : System.Attribute\n{\n    public ComplexBindingPropertiesAttribute(string dataSource, string dataMember) => throw null;\n    public ComplexBindingPropertiesAttribute(string dataSource) => throw null;\n    public ComplexBindingPropertiesAttribute() => throw null;\n    public string DataMember { get => throw null; }\n    public string DataSource { get => throw null; }\n    public static System.ComponentModel.ComplexBindingPropertiesAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n}\n\n// Generated from `System.ComponentModel.ComponentConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ComponentConverter : System.ComponentModel.ReferenceConverter\n{\n    public ComponentConverter(System.Type type) : base(default(System.Type)) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n}\n\n// Generated from `System.ComponentModel.ComponentEditor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class ComponentEditor\n{\n    protected ComponentEditor() => throw null;\n    public bool EditComponent(object component) => throw null;\n    public abstract bool EditComponent(System.ComponentModel.ITypeDescriptorContext context, object component);\n}\n\n// Generated from `System.ComponentModel.ComponentResourceManager` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ComponentResourceManager : System.Resources.ResourceManager\n{\n    public void ApplyResources(object value, string objectName) => throw null;\n    public virtual void ApplyResources(object value, string objectName, System.Globalization.CultureInfo culture) => throw null;\n    public ComponentResourceManager(System.Type t) => throw null;\n    public ComponentResourceManager() => throw null;\n}\n\n// Generated from `System.ComponentModel.CultureInfoConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CultureInfoConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public CultureInfoConverter() => throw null;\n    protected virtual string GetCultureName(System.Globalization.CultureInfo culture) => throw null;\n    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n}\n\n// Generated from `System.ComponentModel.CustomTypeDescriptor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class CustomTypeDescriptor : System.ComponentModel.ICustomTypeDescriptor\n{\n    protected CustomTypeDescriptor(System.ComponentModel.ICustomTypeDescriptor parent) => throw null;\n    protected CustomTypeDescriptor() => throw null;\n    public virtual System.ComponentModel.AttributeCollection GetAttributes() => throw null;\n    public virtual string GetClassName() => throw null;\n    public virtual string GetComponentName() => throw null;\n    public virtual System.ComponentModel.TypeConverter GetConverter() => throw null;\n    public virtual System.ComponentModel.EventDescriptor GetDefaultEvent() => throw null;\n    public virtual System.ComponentModel.PropertyDescriptor GetDefaultProperty() => throw null;\n    public virtual object GetEditor(System.Type editorBaseType) => throw null;\n    public virtual System.ComponentModel.EventDescriptorCollection GetEvents(System.Attribute[] attributes) => throw null;\n    public virtual System.ComponentModel.EventDescriptorCollection GetEvents() => throw null;\n    public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Attribute[] attributes) => throw null;\n    public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties() => throw null;\n    public virtual object GetPropertyOwner(System.ComponentModel.PropertyDescriptor pd) => throw null;\n}\n\n// Generated from `System.ComponentModel.DataObjectAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DataObjectAttribute : System.Attribute\n{\n    public static System.ComponentModel.DataObjectAttribute DataObject;\n    public DataObjectAttribute(bool isDataObject) => throw null;\n    public DataObjectAttribute() => throw null;\n    public static System.ComponentModel.DataObjectAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public bool IsDataObject { get => throw null; }\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.DataObjectAttribute NonDataObject;\n}\n\n// Generated from `System.ComponentModel.DataObjectFieldAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DataObjectFieldAttribute : System.Attribute\n{\n    public DataObjectFieldAttribute(bool primaryKey, bool isIdentity, bool isNullable, int length) => throw null;\n    public DataObjectFieldAttribute(bool primaryKey, bool isIdentity, bool isNullable) => throw null;\n    public DataObjectFieldAttribute(bool primaryKey, bool isIdentity) => throw null;\n    public DataObjectFieldAttribute(bool primaryKey) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public bool IsIdentity { get => throw null; }\n    public bool IsNullable { get => throw null; }\n    public int Length { get => throw null; }\n    public bool PrimaryKey { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.DataObjectMethodAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DataObjectMethodAttribute : System.Attribute\n{\n    public DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType methodType, bool isDefault) => throw null;\n    public DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType methodType) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public bool IsDefault { get => throw null; }\n    public override bool Match(object obj) => throw null;\n    public System.ComponentModel.DataObjectMethodType MethodType { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.DataObjectMethodType` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum DataObjectMethodType\n{\n    // Stub generator skipped constructor \n    Delete,\n    Fill,\n    Insert,\n    Select,\n    Update,\n}\n\n// Generated from `System.ComponentModel.DateTimeConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DateTimeConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public DateTimeConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.DateTimeOffsetConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DateTimeOffsetConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public DateTimeOffsetConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.DecimalConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DecimalConverter : System.ComponentModel.BaseNumberConverter\n{\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public DecimalConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.DefaultBindingPropertyAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DefaultBindingPropertyAttribute : System.Attribute\n{\n    public static System.ComponentModel.DefaultBindingPropertyAttribute Default;\n    public DefaultBindingPropertyAttribute(string name) => throw null;\n    public DefaultBindingPropertyAttribute() => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public string Name { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.DefaultEventAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DefaultEventAttribute : System.Attribute\n{\n    public static System.ComponentModel.DefaultEventAttribute Default;\n    public DefaultEventAttribute(string name) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public string Name { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.DefaultPropertyAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DefaultPropertyAttribute : System.Attribute\n{\n    public static System.ComponentModel.DefaultPropertyAttribute Default;\n    public DefaultPropertyAttribute(string name) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public string Name { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.DesignTimeVisibleAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesignTimeVisibleAttribute : System.Attribute\n{\n    public static System.ComponentModel.DesignTimeVisibleAttribute Default;\n    public DesignTimeVisibleAttribute(bool visible) => throw null;\n    public DesignTimeVisibleAttribute() => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.DesignTimeVisibleAttribute No;\n    public bool Visible { get => throw null; }\n    public static System.ComponentModel.DesignTimeVisibleAttribute Yes;\n}\n\n// Generated from `System.ComponentModel.DoubleConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DoubleConverter : System.ComponentModel.BaseNumberConverter\n{\n    public DoubleConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.EnumConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class EnumConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    protected virtual System.Collections.IComparer Comparer { get => throw null; }\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public EnumConverter(System.Type type) => throw null;\n    protected System.Type EnumType { get => throw null; }\n    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    protected System.ComponentModel.TypeConverter.StandardValuesCollection Values { get => throw null; set => throw null; }\n}\n\n// Generated from `System.ComponentModel.EventDescriptor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class EventDescriptor : System.ComponentModel.MemberDescriptor\n{\n    public abstract void AddEventHandler(object component, System.Delegate value);\n    public abstract System.Type ComponentType { get; }\n    protected EventDescriptor(string name, System.Attribute[] attrs) : base(default(System.ComponentModel.MemberDescriptor)) => throw null;\n    protected EventDescriptor(System.ComponentModel.MemberDescriptor descr, System.Attribute[] attrs) : base(default(System.ComponentModel.MemberDescriptor)) => throw null;\n    protected EventDescriptor(System.ComponentModel.MemberDescriptor descr) : base(default(System.ComponentModel.MemberDescriptor)) => throw null;\n    public abstract System.Type EventType { get; }\n    public abstract bool IsMulticast { get; }\n    public abstract void RemoveEventHandler(object component, System.Delegate value);\n}\n\n// Generated from `System.ComponentModel.EventDescriptorCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class EventDescriptorCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    public int Add(System.ComponentModel.EventDescriptor value) => throw null;\n    int System.Collections.IList.Add(object value) => throw null;\n    void System.Collections.IList.Clear() => throw null;\n    public void Clear() => throw null;\n    public bool Contains(System.ComponentModel.EventDescriptor value) => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    int System.Collections.ICollection.Count { get => throw null; }\n    public static System.ComponentModel.EventDescriptorCollection Empty;\n    public EventDescriptorCollection(System.ComponentModel.EventDescriptor[] events, bool readOnly) => throw null;\n    public EventDescriptorCollection(System.ComponentModel.EventDescriptor[] events) => throw null;\n    public virtual System.ComponentModel.EventDescriptor Find(string name, bool ignoreCase) => throw null;\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public int IndexOf(System.ComponentModel.EventDescriptor value) => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    public void Insert(int index, System.ComponentModel.EventDescriptor value) => throw null;\n    protected void InternalSort(string[] names) => throw null;\n    protected void InternalSort(System.Collections.IComparer sorter) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    bool System.Collections.IList.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public virtual System.ComponentModel.EventDescriptor this[string name] { get => throw null; }\n    public virtual System.ComponentModel.EventDescriptor this[int index] { get => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    void System.Collections.IList.Remove(object value) => throw null;\n    public void Remove(System.ComponentModel.EventDescriptor value) => throw null;\n    void System.Collections.IList.RemoveAt(int index) => throw null;\n    public void RemoveAt(int index) => throw null;\n    public virtual System.ComponentModel.EventDescriptorCollection Sort(string[] names, System.Collections.IComparer comparer) => throw null;\n    public virtual System.ComponentModel.EventDescriptorCollection Sort(string[] names) => throw null;\n    public virtual System.ComponentModel.EventDescriptorCollection Sort(System.Collections.IComparer comparer) => throw null;\n    public virtual System.ComponentModel.EventDescriptorCollection Sort() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ExpandableObjectConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ExpandableObjectConverter : System.ComponentModel.TypeConverter\n{\n    public ExpandableObjectConverter() => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n}\n\n// Generated from `System.ComponentModel.ExtenderProvidedPropertyAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ExtenderProvidedPropertyAttribute : System.Attribute\n{\n    public override bool Equals(object obj) => throw null;\n    public System.ComponentModel.PropertyDescriptor ExtenderProperty { get => throw null; }\n    public ExtenderProvidedPropertyAttribute() => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public System.ComponentModel.IExtenderProvider Provider { get => throw null; }\n    public System.Type ReceiverType { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.GuidConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class GuidConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public GuidConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.HandledEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class HandledEventArgs : System.EventArgs\n{\n    public bool Handled { get => throw null; set => throw null; }\n    public HandledEventArgs(bool defaultHandledValue) => throw null;\n    public HandledEventArgs() => throw null;\n}\n\n// Generated from `System.ComponentModel.HandledEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void HandledEventHandler(object sender, System.ComponentModel.HandledEventArgs e);\n\n// Generated from `System.ComponentModel.IBindingList` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IBindingList : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    void AddIndex(System.ComponentModel.PropertyDescriptor property) => throw null;\n    object AddNew() => throw null;\n    bool AllowEdit { get => throw null; }\n    bool AllowNew { get => throw null; }\n    bool AllowRemove { get => throw null; }\n    void ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction) => throw null;\n    int Find(System.ComponentModel.PropertyDescriptor property, object key) => throw null;\n    bool IsSorted { get => throw null; }\n    event System.ComponentModel.ListChangedEventHandler ListChanged;\n    void RemoveIndex(System.ComponentModel.PropertyDescriptor property) => throw null;\n    void RemoveSort() => throw null;\n    System.ComponentModel.ListSortDirection SortDirection { get => throw null; }\n    System.ComponentModel.PropertyDescriptor SortProperty { get => throw null; }\n    bool SupportsChangeNotification { get => throw null; }\n    bool SupportsSearching { get => throw null; }\n    bool SupportsSorting { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.IBindingListView` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IBindingListView : System.ComponentModel.IBindingList, System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    void ApplySort(System.ComponentModel.ListSortDescriptionCollection sorts) => throw null;\n    string Filter { get => throw null; set => throw null; }\n    void RemoveFilter() => throw null;\n    System.ComponentModel.ListSortDescriptionCollection SortDescriptions { get => throw null; }\n    bool SupportsAdvancedSorting { get => throw null; }\n    bool SupportsFiltering { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ICancelAddNew` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ICancelAddNew\n{\n    void CancelNew(int itemIndex) => throw null;\n    void EndNew(int itemIndex) => throw null;\n}\n\n// Generated from `System.ComponentModel.IComNativeDescriptorHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IComNativeDescriptorHandler\n{\n    System.ComponentModel.AttributeCollection GetAttributes(object component) => throw null;\n    string GetClassName(object component) => throw null;\n    System.ComponentModel.TypeConverter GetConverter(object component) => throw null;\n    System.ComponentModel.EventDescriptor GetDefaultEvent(object component) => throw null;\n    System.ComponentModel.PropertyDescriptor GetDefaultProperty(object component) => throw null;\n    object GetEditor(object component, System.Type baseEditorType) => throw null;\n    System.ComponentModel.EventDescriptorCollection GetEvents(object component, System.Attribute[] attributes) => throw null;\n    System.ComponentModel.EventDescriptorCollection GetEvents(object component) => throw null;\n    string GetName(object component) => throw null;\n    System.ComponentModel.PropertyDescriptorCollection GetProperties(object component, System.Attribute[] attributes) => throw null;\n    object GetPropertyValue(object component, string propertyName, ref bool success) => throw null;\n    object GetPropertyValue(object component, int dispid, ref bool success) => throw null;\n}\n\n// Generated from `System.ComponentModel.ICustomTypeDescriptor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ICustomTypeDescriptor\n{\n    System.ComponentModel.AttributeCollection GetAttributes() => throw null;\n    string GetClassName() => throw null;\n    string GetComponentName() => throw null;\n    System.ComponentModel.TypeConverter GetConverter() => throw null;\n    System.ComponentModel.EventDescriptor GetDefaultEvent() => throw null;\n    System.ComponentModel.PropertyDescriptor GetDefaultProperty() => throw null;\n    object GetEditor(System.Type editorBaseType) => throw null;\n    System.ComponentModel.EventDescriptorCollection GetEvents(System.Attribute[] attributes) => throw null;\n    System.ComponentModel.EventDescriptorCollection GetEvents() => throw null;\n    System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Attribute[] attributes) => throw null;\n    System.ComponentModel.PropertyDescriptorCollection GetProperties() => throw null;\n    object GetPropertyOwner(System.ComponentModel.PropertyDescriptor pd) => throw null;\n}\n\n// Generated from `System.ComponentModel.IDataErrorInfo` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDataErrorInfo\n{\n    string Error { get => throw null; }\n    string this[string columnName] { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.IExtenderProvider` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IExtenderProvider\n{\n    bool CanExtend(object extendee) => throw null;\n}\n\n// Generated from `System.ComponentModel.IIntellisenseBuilder` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IIntellisenseBuilder\n{\n    string Name { get => throw null; }\n    bool Show(string language, string value, ref string newValue) => throw null;\n}\n\n// Generated from `System.ComponentModel.IListSource` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IListSource\n{\n    bool ContainsListCollection { get => throw null; }\n    System.Collections.IList GetList() => throw null;\n}\n\n// Generated from `System.ComponentModel.INestedSite` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface INestedSite\n{\n    string FullName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.IRaiseItemChangedEvents` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IRaiseItemChangedEvents\n{\n    bool RaisesItemChangedEvents { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ISupportInitializeNotification` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ISupportInitializeNotification\n{\n    event System.EventHandler Initialized;\n    bool IsInitialized { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ITypedList` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ITypedList\n{\n    System.ComponentModel.PropertyDescriptorCollection GetItemProperties(System.ComponentModel.PropertyDescriptor[] listAccessors) => throw null;\n    string GetListName(System.ComponentModel.PropertyDescriptor[] listAccessors) => throw null;\n}\n\n// Generated from `System.ComponentModel.InheritanceAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class InheritanceAttribute : System.Attribute\n{\n    public static System.ComponentModel.InheritanceAttribute Default;\n    public override bool Equals(object value) => throw null;\n    public override int GetHashCode() => throw null;\n    public InheritanceAttribute(System.ComponentModel.InheritanceLevel inheritanceLevel) => throw null;\n    public InheritanceAttribute() => throw null;\n    public System.ComponentModel.InheritanceLevel InheritanceLevel { get => throw null; }\n    public static System.ComponentModel.InheritanceAttribute Inherited;\n    public static System.ComponentModel.InheritanceAttribute InheritedReadOnly;\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.InheritanceAttribute NotInherited;\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.ComponentModel.InheritanceLevel` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum InheritanceLevel\n{\n    // Stub generator skipped constructor \n    Inherited,\n    InheritedReadOnly,\n    NotInherited,\n}\n\n// Generated from `System.ComponentModel.InstallerTypeAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class InstallerTypeAttribute : System.Attribute\n{\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public virtual System.Type InstallerType { get => throw null; }\n    public InstallerTypeAttribute(string typeName) => throw null;\n    public InstallerTypeAttribute(System.Type installerType) => throw null;\n}\n\n// Generated from `System.ComponentModel.InstanceCreationEditor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class InstanceCreationEditor\n{\n    public abstract object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Type instanceType);\n    protected InstanceCreationEditor() => throw null;\n    public virtual string Text { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Int16Converter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Int16Converter : System.ComponentModel.BaseNumberConverter\n{\n    public Int16Converter() => throw null;\n}\n\n// Generated from `System.ComponentModel.Int32Converter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Int32Converter : System.ComponentModel.BaseNumberConverter\n{\n    public Int32Converter() => throw null;\n}\n\n// Generated from `System.ComponentModel.Int64Converter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Int64Converter : System.ComponentModel.BaseNumberConverter\n{\n    public Int64Converter() => throw null;\n}\n\n// Generated from `System.ComponentModel.LicFileLicenseProvider` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LicFileLicenseProvider : System.ComponentModel.LicenseProvider\n{\n    protected virtual string GetKey(System.Type type) => throw null;\n    public override System.ComponentModel.License GetLicense(System.ComponentModel.LicenseContext context, System.Type type, object instance, bool allowExceptions) => throw null;\n    protected virtual bool IsKeyValid(string key, System.Type type) => throw null;\n    public LicFileLicenseProvider() => throw null;\n}\n\n// Generated from `System.ComponentModel.License` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class License : System.IDisposable\n{\n    public abstract void Dispose();\n    protected License() => throw null;\n    public abstract string LicenseKey { get; }\n}\n\n// Generated from `System.ComponentModel.LicenseContext` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LicenseContext\n{\n    public virtual string GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly) => throw null;\n    public virtual object GetService(System.Type type) => throw null;\n    public LicenseContext() => throw null;\n    public virtual void SetSavedLicenseKey(System.Type type, string key) => throw null;\n    public virtual System.ComponentModel.LicenseUsageMode UsageMode { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.LicenseException` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LicenseException : System.SystemException\n{\n    public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public LicenseException(System.Type type, object instance, string message, System.Exception innerException) => throw null;\n    public LicenseException(System.Type type, object instance, string message) => throw null;\n    public LicenseException(System.Type type, object instance) => throw null;\n    public LicenseException(System.Type type) => throw null;\n    protected LicenseException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public System.Type LicensedType { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.LicenseManager` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LicenseManager\n{\n    public static object CreateWithContext(System.Type type, System.ComponentModel.LicenseContext creationContext, object[] args) => throw null;\n    public static object CreateWithContext(System.Type type, System.ComponentModel.LicenseContext creationContext) => throw null;\n    public static System.ComponentModel.LicenseContext CurrentContext { get => throw null; set => throw null; }\n    public static bool IsLicensed(System.Type type) => throw null;\n    public static bool IsValid(System.Type type, object instance, out System.ComponentModel.License license) => throw null;\n    public static bool IsValid(System.Type type) => throw null;\n    public static void LockContext(object contextUser) => throw null;\n    public static void UnlockContext(object contextUser) => throw null;\n    public static System.ComponentModel.LicenseUsageMode UsageMode { get => throw null; }\n    public static void Validate(System.Type type) => throw null;\n    public static System.ComponentModel.License Validate(System.Type type, object instance) => throw null;\n}\n\n// Generated from `System.ComponentModel.LicenseProvider` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class LicenseProvider\n{\n    public abstract System.ComponentModel.License GetLicense(System.ComponentModel.LicenseContext context, System.Type type, object instance, bool allowExceptions);\n    protected LicenseProvider() => throw null;\n}\n\n// Generated from `System.ComponentModel.LicenseProviderAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LicenseProviderAttribute : System.Attribute\n{\n    public static System.ComponentModel.LicenseProviderAttribute Default;\n    public override bool Equals(object value) => throw null;\n    public override int GetHashCode() => throw null;\n    public System.Type LicenseProvider { get => throw null; }\n    public LicenseProviderAttribute(string typeName) => throw null;\n    public LicenseProviderAttribute(System.Type type) => throw null;\n    public LicenseProviderAttribute() => throw null;\n    public override object TypeId { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.LicenseUsageMode` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum LicenseUsageMode\n{\n    Designtime,\n    // Stub generator skipped constructor \n    Runtime,\n}\n\n// Generated from `System.ComponentModel.ListBindableAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ListBindableAttribute : System.Attribute\n{\n    public static System.ComponentModel.ListBindableAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public bool ListBindable { get => throw null; }\n    public ListBindableAttribute(bool listBindable) => throw null;\n    public ListBindableAttribute(System.ComponentModel.BindableSupport flags) => throw null;\n    public static System.ComponentModel.ListBindableAttribute No;\n    public static System.ComponentModel.ListBindableAttribute Yes;\n}\n\n// Generated from `System.ComponentModel.ListChangedEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ListChangedEventArgs : System.EventArgs\n{\n    public ListChangedEventArgs(System.ComponentModel.ListChangedType listChangedType, int newIndex, int oldIndex) => throw null;\n    public ListChangedEventArgs(System.ComponentModel.ListChangedType listChangedType, int newIndex, System.ComponentModel.PropertyDescriptor propDesc) => throw null;\n    public ListChangedEventArgs(System.ComponentModel.ListChangedType listChangedType, int newIndex) => throw null;\n    public ListChangedEventArgs(System.ComponentModel.ListChangedType listChangedType, System.ComponentModel.PropertyDescriptor propDesc) => throw null;\n    public System.ComponentModel.ListChangedType ListChangedType { get => throw null; }\n    public int NewIndex { get => throw null; }\n    public int OldIndex { get => throw null; }\n    public System.ComponentModel.PropertyDescriptor PropertyDescriptor { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ListChangedEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ListChangedEventHandler(object sender, System.ComponentModel.ListChangedEventArgs e);\n\n// Generated from `System.ComponentModel.ListChangedType` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ListChangedType\n{\n    ItemAdded,\n    ItemChanged,\n    ItemDeleted,\n    ItemMoved,\n    // Stub generator skipped constructor \n    PropertyDescriptorAdded,\n    PropertyDescriptorChanged,\n    PropertyDescriptorDeleted,\n    Reset,\n}\n\n// Generated from `System.ComponentModel.ListSortDescription` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ListSortDescription\n{\n    public ListSortDescription(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction) => throw null;\n    public System.ComponentModel.PropertyDescriptor PropertyDescriptor { get => throw null; set => throw null; }\n    public System.ComponentModel.ListSortDirection SortDirection { get => throw null; set => throw null; }\n}\n\n// Generated from `System.ComponentModel.ListSortDescriptionCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ListSortDescriptionCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    int System.Collections.IList.Add(object value) => throw null;\n    void System.Collections.IList.Clear() => throw null;\n    public bool Contains(object value) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public int IndexOf(object value) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    bool System.Collections.IList.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public System.ComponentModel.ListSortDescription this[int index] { get => throw null; set => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    public ListSortDescriptionCollection(System.ComponentModel.ListSortDescription[] sorts) => throw null;\n    public ListSortDescriptionCollection() => throw null;\n    void System.Collections.IList.Remove(object value) => throw null;\n    void System.Collections.IList.RemoveAt(int index) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ListSortDirection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ListSortDirection\n{\n    Ascending,\n    Descending,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.ComponentModel.LookupBindingPropertiesAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LookupBindingPropertiesAttribute : System.Attribute\n{\n    public string DataSource { get => throw null; }\n    public static System.ComponentModel.LookupBindingPropertiesAttribute Default;\n    public string DisplayMember { get => throw null; }\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public LookupBindingPropertiesAttribute(string dataSource, string displayMember, string valueMember, string lookupMember) => throw null;\n    public LookupBindingPropertiesAttribute() => throw null;\n    public string LookupMember { get => throw null; }\n    public string ValueMember { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.MaskedTextProvider` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MaskedTextProvider : System.ICloneable\n{\n    public bool Add(string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Add(string input) => throw null;\n    public bool Add(System.Char input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Add(System.Char input) => throw null;\n    public bool AllowPromptAsInput { get => throw null; }\n    public bool AsciiOnly { get => throw null; }\n    public int AssignedEditPositionCount { get => throw null; }\n    public int AvailableEditPositionCount { get => throw null; }\n    public void Clear(out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public void Clear() => throw null;\n    public object Clone() => throw null;\n    public System.Globalization.CultureInfo Culture { get => throw null; }\n    public static System.Char DefaultPasswordChar { get => throw null; }\n    public int EditPositionCount { get => throw null; }\n    public System.Collections.IEnumerator EditPositions { get => throw null; }\n    public int FindAssignedEditPositionFrom(int position, bool direction) => throw null;\n    public int FindAssignedEditPositionInRange(int startPosition, int endPosition, bool direction) => throw null;\n    public int FindEditPositionFrom(int position, bool direction) => throw null;\n    public int FindEditPositionInRange(int startPosition, int endPosition, bool direction) => throw null;\n    public int FindNonEditPositionFrom(int position, bool direction) => throw null;\n    public int FindNonEditPositionInRange(int startPosition, int endPosition, bool direction) => throw null;\n    public int FindUnassignedEditPositionFrom(int position, bool direction) => throw null;\n    public int FindUnassignedEditPositionInRange(int startPosition, int endPosition, bool direction) => throw null;\n    public static bool GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint hint) => throw null;\n    public bool IncludeLiterals { get => throw null; set => throw null; }\n    public bool IncludePrompt { get => throw null; set => throw null; }\n    public bool InsertAt(string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool InsertAt(string input, int position) => throw null;\n    public bool InsertAt(System.Char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool InsertAt(System.Char input, int position) => throw null;\n    public static int InvalidIndex { get => throw null; }\n    public bool IsAvailablePosition(int position) => throw null;\n    public bool IsEditPosition(int position) => throw null;\n    public bool IsPassword { get => throw null; set => throw null; }\n    public static bool IsValidInputChar(System.Char c) => throw null;\n    public static bool IsValidMaskChar(System.Char c) => throw null;\n    public static bool IsValidPasswordChar(System.Char c) => throw null;\n    public System.Char this[int index] { get => throw null; }\n    public int LastAssignedPosition { get => throw null; }\n    public int Length { get => throw null; }\n    public string Mask { get => throw null; }\n    public bool MaskCompleted { get => throw null; }\n    public bool MaskFull { get => throw null; }\n    public MaskedTextProvider(string mask, bool restrictToAscii) => throw null;\n    public MaskedTextProvider(string mask, System.Globalization.CultureInfo culture, bool restrictToAscii) => throw null;\n    public MaskedTextProvider(string mask, System.Globalization.CultureInfo culture, bool allowPromptAsInput, System.Char promptChar, System.Char passwordChar, bool restrictToAscii) => throw null;\n    public MaskedTextProvider(string mask, System.Globalization.CultureInfo culture, System.Char passwordChar, bool allowPromptAsInput) => throw null;\n    public MaskedTextProvider(string mask, System.Globalization.CultureInfo culture) => throw null;\n    public MaskedTextProvider(string mask, System.Char passwordChar, bool allowPromptAsInput) => throw null;\n    public MaskedTextProvider(string mask) => throw null;\n    public System.Char PasswordChar { get => throw null; set => throw null; }\n    public System.Char PromptChar { get => throw null; set => throw null; }\n    public bool Remove(out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Remove() => throw null;\n    public bool RemoveAt(int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool RemoveAt(int startPosition, int endPosition) => throw null;\n    public bool RemoveAt(int position) => throw null;\n    public bool Replace(string input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Replace(string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Replace(string input, int position) => throw null;\n    public bool Replace(System.Char input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Replace(System.Char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Replace(System.Char input, int position) => throw null;\n    public bool ResetOnPrompt { get => throw null; set => throw null; }\n    public bool ResetOnSpace { get => throw null; set => throw null; }\n    public bool Set(string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool Set(string input) => throw null;\n    public bool SkipLiterals { get => throw null; set => throw null; }\n    public string ToDisplayString() => throw null;\n    public string ToString(int startPosition, int length) => throw null;\n    public string ToString(bool includePrompt, bool includeLiterals, int startPosition, int length) => throw null;\n    public string ToString(bool includePrompt, bool includeLiterals) => throw null;\n    public string ToString(bool ignorePasswordChar, int startPosition, int length) => throw null;\n    public string ToString(bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int startPosition, int length) => throw null;\n    public string ToString(bool ignorePasswordChar) => throw null;\n    public override string ToString() => throw null;\n    public bool VerifyChar(System.Char input, int position, out System.ComponentModel.MaskedTextResultHint hint) => throw null;\n    public bool VerifyEscapeChar(System.Char input, int position) => throw null;\n    public bool VerifyString(string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint) => throw null;\n    public bool VerifyString(string input) => throw null;\n}\n\n// Generated from `System.ComponentModel.MaskedTextResultHint` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum MaskedTextResultHint\n{\n    AlphanumericCharacterExpected,\n    AsciiCharacterExpected,\n    CharacterEscaped,\n    DigitExpected,\n    InvalidInput,\n    LetterExpected,\n    // Stub generator skipped constructor \n    NoEffect,\n    NonEditPosition,\n    PositionOutOfRange,\n    PromptCharNotAllowed,\n    SideEffect,\n    SignedDigitExpected,\n    Success,\n    UnavailableEditPosition,\n    Unknown,\n}\n\n// Generated from `System.ComponentModel.MultilineStringConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MultilineStringConverter : System.ComponentModel.TypeConverter\n{\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public MultilineStringConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.NullableConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NullableConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) => throw null;\n    public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public NullableConverter(System.Type type) => throw null;\n    public System.Type NullableType { get => throw null; }\n    public System.Type UnderlyingType { get => throw null; }\n    public System.ComponentModel.TypeConverter UnderlyingTypeConverter { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.PasswordPropertyTextAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PasswordPropertyTextAttribute : System.Attribute\n{\n    public static System.ComponentModel.PasswordPropertyTextAttribute Default;\n    public override bool Equals(object o) => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.PasswordPropertyTextAttribute No;\n    public bool Password { get => throw null; }\n    public PasswordPropertyTextAttribute(bool password) => throw null;\n    public PasswordPropertyTextAttribute() => throw null;\n    public static System.ComponentModel.PasswordPropertyTextAttribute Yes;\n}\n\n// Generated from `System.ComponentModel.PropertyDescriptorCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PropertyDescriptorCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection\n{\n    void System.Collections.IDictionary.Add(object key, object value) => throw null;\n    public int Add(System.ComponentModel.PropertyDescriptor value) => throw null;\n    int System.Collections.IList.Add(object value) => throw null;\n    void System.Collections.IList.Clear() => throw null;\n    void System.Collections.IDictionary.Clear() => throw null;\n    public void Clear() => throw null;\n    public bool Contains(System.ComponentModel.PropertyDescriptor value) => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    bool System.Collections.IDictionary.Contains(object key) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    int System.Collections.ICollection.Count { get => throw null; }\n    public static System.ComponentModel.PropertyDescriptorCollection Empty;\n    public virtual System.ComponentModel.PropertyDescriptor Find(string name, bool ignoreCase) => throw null;\n    public virtual System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() => throw null;\n    public int IndexOf(System.ComponentModel.PropertyDescriptor value) => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    public void Insert(int index, System.ComponentModel.PropertyDescriptor value) => throw null;\n    protected void InternalSort(string[] names) => throw null;\n    protected void InternalSort(System.Collections.IComparer sorter) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    bool System.Collections.IDictionary.IsFixedSize { get => throw null; }\n    bool System.Collections.IList.IsReadOnly { get => throw null; }\n    bool System.Collections.IDictionary.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public virtual System.ComponentModel.PropertyDescriptor this[string name] { get => throw null; }\n    public virtual System.ComponentModel.PropertyDescriptor this[int index] { get => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    object System.Collections.IDictionary.this[object key] { get => throw null; set => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Keys { get => throw null; }\n    public PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[] properties, bool readOnly) => throw null;\n    public PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[] properties) => throw null;\n    void System.Collections.IList.Remove(object value) => throw null;\n    void System.Collections.IDictionary.Remove(object key) => throw null;\n    public void Remove(System.ComponentModel.PropertyDescriptor value) => throw null;\n    void System.Collections.IList.RemoveAt(int index) => throw null;\n    public void RemoveAt(int index) => throw null;\n    public virtual System.ComponentModel.PropertyDescriptorCollection Sort(string[] names, System.Collections.IComparer comparer) => throw null;\n    public virtual System.ComponentModel.PropertyDescriptorCollection Sort(string[] names) => throw null;\n    public virtual System.ComponentModel.PropertyDescriptorCollection Sort(System.Collections.IComparer comparer) => throw null;\n    public virtual System.ComponentModel.PropertyDescriptorCollection Sort() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Values { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.PropertyTabAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PropertyTabAttribute : System.Attribute\n{\n    public override bool Equals(object other) => throw null;\n    public bool Equals(System.ComponentModel.PropertyTabAttribute other) => throw null;\n    public override int GetHashCode() => throw null;\n    protected void InitializeArrays(string[] tabClassNames, System.ComponentModel.PropertyTabScope[] tabScopes) => throw null;\n    protected void InitializeArrays(System.Type[] tabClasses, System.ComponentModel.PropertyTabScope[] tabScopes) => throw null;\n    public PropertyTabAttribute(string tabClassName, System.ComponentModel.PropertyTabScope tabScope) => throw null;\n    public PropertyTabAttribute(string tabClassName) => throw null;\n    public PropertyTabAttribute(System.Type tabClass, System.ComponentModel.PropertyTabScope tabScope) => throw null;\n    public PropertyTabAttribute(System.Type tabClass) => throw null;\n    public PropertyTabAttribute() => throw null;\n    protected string[] TabClassNames { get => throw null; }\n    public System.Type[] TabClasses { get => throw null; }\n    public System.ComponentModel.PropertyTabScope[] TabScopes { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.PropertyTabScope` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum PropertyTabScope\n{\n    Component,\n    Document,\n    Global,\n    // Stub generator skipped constructor \n    Static,\n}\n\n// Generated from `System.ComponentModel.ProvidePropertyAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ProvidePropertyAttribute : System.Attribute\n{\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public string PropertyName { get => throw null; }\n    public ProvidePropertyAttribute(string propertyName, string receiverTypeName) => throw null;\n    public ProvidePropertyAttribute(string propertyName, System.Type receiverType) => throw null;\n    public string ReceiverTypeName { get => throw null; }\n    public override object TypeId { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.RecommendedAsConfigurableAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RecommendedAsConfigurableAttribute : System.Attribute\n{\n    public static System.ComponentModel.RecommendedAsConfigurableAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.RecommendedAsConfigurableAttribute No;\n    public bool RecommendedAsConfigurable { get => throw null; }\n    public RecommendedAsConfigurableAttribute(bool recommendedAsConfigurable) => throw null;\n    public static System.ComponentModel.RecommendedAsConfigurableAttribute Yes;\n}\n\n// Generated from `System.ComponentModel.ReferenceConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ReferenceConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    protected virtual bool IsValueAllowed(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public ReferenceConverter(System.Type type) => throw null;\n}\n\n// Generated from `System.ComponentModel.RefreshEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RefreshEventArgs : System.EventArgs\n{\n    public object ComponentChanged { get => throw null; }\n    public RefreshEventArgs(object componentChanged) => throw null;\n    public RefreshEventArgs(System.Type typeChanged) => throw null;\n    public System.Type TypeChanged { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.RefreshEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void RefreshEventHandler(System.ComponentModel.RefreshEventArgs e);\n\n// Generated from `System.ComponentModel.RunInstallerAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RunInstallerAttribute : System.Attribute\n{\n    public static System.ComponentModel.RunInstallerAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.RunInstallerAttribute No;\n    public bool RunInstaller { get => throw null; }\n    public RunInstallerAttribute(bool runInstaller) => throw null;\n    public static System.ComponentModel.RunInstallerAttribute Yes;\n}\n\n// Generated from `System.ComponentModel.SByteConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SByteConverter : System.ComponentModel.BaseNumberConverter\n{\n    public SByteConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.SettingsBindableAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SettingsBindableAttribute : System.Attribute\n{\n    public bool Bindable { get => throw null; }\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public static System.ComponentModel.SettingsBindableAttribute No;\n    public SettingsBindableAttribute(bool bindable) => throw null;\n    public static System.ComponentModel.SettingsBindableAttribute Yes;\n}\n\n// Generated from `System.ComponentModel.SingleConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SingleConverter : System.ComponentModel.BaseNumberConverter\n{\n    public SingleConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.StringConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class StringConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public StringConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.SyntaxCheck` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class SyntaxCheck\n{\n    public static bool CheckMachineName(string value) => throw null;\n    public static bool CheckPath(string value) => throw null;\n    public static bool CheckRootedPath(string value) => throw null;\n}\n\n// Generated from `System.ComponentModel.TimeSpanConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TimeSpanConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public TimeSpanConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.ToolboxItemAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ToolboxItemAttribute : System.Attribute\n{\n    public static System.ComponentModel.ToolboxItemAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n    public static System.ComponentModel.ToolboxItemAttribute None;\n    public ToolboxItemAttribute(string toolboxItemTypeName) => throw null;\n    public ToolboxItemAttribute(bool defaultType) => throw null;\n    public ToolboxItemAttribute(System.Type toolboxItemType) => throw null;\n    public System.Type ToolboxItemType { get => throw null; }\n    public string ToolboxItemTypeName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ToolboxItemFilterAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ToolboxItemFilterAttribute : System.Attribute\n{\n    public override bool Equals(object obj) => throw null;\n    public string FilterString { get => throw null; }\n    public System.ComponentModel.ToolboxItemFilterType FilterType { get => throw null; }\n    public override int GetHashCode() => throw null;\n    public override bool Match(object obj) => throw null;\n    public override string ToString() => throw null;\n    public ToolboxItemFilterAttribute(string filterString, System.ComponentModel.ToolboxItemFilterType filterType) => throw null;\n    public ToolboxItemFilterAttribute(string filterString) => throw null;\n    public override object TypeId { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.ToolboxItemFilterType` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ToolboxItemFilterType\n{\n    Allow,\n    Custom,\n    Prevent,\n    Require,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.ComponentModel.TypeConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TypeConverter\n{\n    public virtual bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public bool CanConvertFrom(System.Type sourceType) => throw null;\n    public virtual bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public bool CanConvertTo(System.Type destinationType) => throw null;\n    public virtual object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public object ConvertFrom(object value) => throw null;\n    public object ConvertFromInvariantString(string text) => throw null;\n    public object ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext context, string text) => throw null;\n    public object ConvertFromString(string text) => throw null;\n    public object ConvertFromString(System.ComponentModel.ITypeDescriptorContext context, string text) => throw null;\n    public object ConvertFromString(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, string text) => throw null;\n    public virtual object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public object ConvertTo(object value, System.Type destinationType) => throw null;\n    public string ConvertToInvariantString(object value) => throw null;\n    public string ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public string ConvertToString(object value) => throw null;\n    public string ConvertToString(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public string ConvertToString(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public virtual object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) => throw null;\n    public object CreateInstance(System.Collections.IDictionary propertyValues) => throw null;\n    protected System.Exception GetConvertFromException(object value) => throw null;\n    protected System.Exception GetConvertToException(object value, System.Type destinationType) => throw null;\n    public virtual bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public bool GetCreateInstanceSupported() => throw null;\n    public virtual System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public System.ComponentModel.PropertyDescriptorCollection GetProperties(object value) => throw null;\n    public System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public virtual bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public bool GetPropertiesSupported() => throw null;\n    public virtual System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public System.Collections.ICollection GetStandardValues() => throw null;\n    public virtual bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public bool GetStandardValuesExclusive() => throw null;\n    public virtual bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public bool GetStandardValuesSupported() => throw null;\n    public virtual bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public bool IsValid(object value) => throw null;\n// Generated from `System.ComponentModel.TypeConverter.SimplePropertyDescriptor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\nprotected abstract class SimplePropertyDescriptor : System.ComponentModel.PropertyDescriptor\n{\n    public override bool CanResetValue(object component) => throw null;\n    public override System.Type ComponentType { get => throw null; }\n    public override bool IsReadOnly { get => throw null; }\n    public override System.Type PropertyType { get => throw null; }\n    public override void ResetValue(object component) => throw null;\n    public override bool ShouldSerializeValue(object component) => throw null;\n    protected SimplePropertyDescriptor(System.Type componentType, string name, System.Type propertyType, System.Attribute[] attributes) : base(default(System.ComponentModel.MemberDescriptor)) => throw null;\n    protected SimplePropertyDescriptor(System.Type componentType, string name, System.Type propertyType) : base(default(System.ComponentModel.MemberDescriptor)) => throw null;\n}\n\n\n    protected System.ComponentModel.PropertyDescriptorCollection SortProperties(System.ComponentModel.PropertyDescriptorCollection props, string[] names) => throw null;\n// Generated from `System.ComponentModel.TypeConverter.StandardValuesCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class StandardValuesCollection : System.Collections.IEnumerable, System.Collections.ICollection\n{\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public object this[int index] { get => throw null; }\n    public StandardValuesCollection(System.Collections.ICollection values) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n    public TypeConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.TypeDescriptionProvider` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class TypeDescriptionProvider\n{\n    public virtual object CreateInstance(System.Type objectType, System.Type[] argTypes, object[] args) => throw null;\n    public virtual System.Collections.IDictionary GetCache(object instance) => throw null;\n    public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance) => throw null;\n    protected internal virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders(object instance) => throw null;\n    public virtual string GetFullComponentName(object component) => throw null;\n    public virtual System.Type GetReflectionType(System.Type objectType, object instance) => throw null;\n    public System.Type GetReflectionType(object instance) => throw null;\n    public System.Type GetReflectionType(System.Type objectType) => throw null;\n    public virtual System.Type GetRuntimeType(System.Type reflectionType) => throw null;\n    public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Type objectType, object instance) => throw null;\n    public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(object instance) => throw null;\n    public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor(System.Type objectType) => throw null;\n    public virtual bool IsSupportedType(System.Type type) => throw null;\n    protected TypeDescriptionProvider(System.ComponentModel.TypeDescriptionProvider parent) => throw null;\n    protected TypeDescriptionProvider() => throw null;\n}\n\n// Generated from `System.ComponentModel.TypeDescriptor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TypeDescriptor\n{\n    public static System.ComponentModel.TypeDescriptionProvider AddAttributes(object instance, params System.Attribute[] attributes) => throw null;\n    public static System.ComponentModel.TypeDescriptionProvider AddAttributes(System.Type type, params System.Attribute[] attributes) => throw null;\n    public static void AddEditorTable(System.Type editorBaseType, System.Collections.Hashtable table) => throw null;\n    public static void AddProvider(System.ComponentModel.TypeDescriptionProvider provider, object instance) => throw null;\n    public static void AddProvider(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) => throw null;\n    public static void AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, object instance) => throw null;\n    public static void AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) => throw null;\n    public static System.ComponentModel.IComNativeDescriptorHandler ComNativeDescriptorHandler { get => throw null; set => throw null; }\n    public static System.Type ComObjectType { get => throw null; }\n    public static void CreateAssociation(object primary, object secondary) => throw null;\n    public static System.ComponentModel.Design.IDesigner CreateDesigner(System.Type designerBaseType) => throw null;\n    public static System.ComponentModel.EventDescriptor CreateEvent(System.Type componentType, string name, System.Type type, params System.Attribute[] attributes) => throw null;\n    public static System.ComponentModel.EventDescriptor CreateEvent(System.Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, params System.Attribute[] attributes) => throw null;\n    public static object CreateInstance(System.Type objectType, System.Type[] argTypes, object[] args) => throw null;\n    public static System.ComponentModel.PropertyDescriptor CreateProperty(System.Type componentType, string name, System.Type type, params System.Attribute[] attributes) => throw null;\n    public static System.ComponentModel.PropertyDescriptor CreateProperty(System.Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, params System.Attribute[] attributes) => throw null;\n    public static object GetAssociation(System.Type type, object primary) => throw null;\n    public static System.ComponentModel.AttributeCollection GetAttributes(object component, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.AttributeCollection GetAttributes(object component) => throw null;\n    public static System.ComponentModel.AttributeCollection GetAttributes(System.Type componentType) => throw null;\n    public static string GetClassName(object component, bool noCustomTypeDesc) => throw null;\n    public static string GetClassName(object component) => throw null;\n    public static string GetClassName(System.Type componentType) => throw null;\n    public static string GetComponentName(object component, bool noCustomTypeDesc) => throw null;\n    public static string GetComponentName(object component) => throw null;\n    public static System.ComponentModel.TypeConverter GetConverter(object component, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.TypeConverter GetConverter(object component) => throw null;\n    public static System.ComponentModel.TypeConverter GetConverter(System.Type type) => throw null;\n    public static System.ComponentModel.EventDescriptor GetDefaultEvent(object component, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.EventDescriptor GetDefaultEvent(object component) => throw null;\n    public static System.ComponentModel.EventDescriptor GetDefaultEvent(System.Type componentType) => throw null;\n    public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(object component, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(object component) => throw null;\n    public static System.ComponentModel.PropertyDescriptor GetDefaultProperty(System.Type componentType) => throw null;\n    public static object GetEditor(object component, System.Type editorBaseType, bool noCustomTypeDesc) => throw null;\n    public static object GetEditor(object component, System.Type editorBaseType) => throw null;\n    public static object GetEditor(System.Type type, System.Type editorBaseType) => throw null;\n    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component, System.Attribute[] attributes, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component, System.Attribute[] attributes) => throw null;\n    public static System.ComponentModel.EventDescriptorCollection GetEvents(object component) => throw null;\n    public static System.ComponentModel.EventDescriptorCollection GetEvents(System.Type componentType, System.Attribute[] attributes) => throw null;\n    public static System.ComponentModel.EventDescriptorCollection GetEvents(System.Type componentType) => throw null;\n    public static string GetFullComponentName(object component) => throw null;\n    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component, System.Attribute[] attributes, bool noCustomTypeDesc) => throw null;\n    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component, System.Attribute[] attributes) => throw null;\n    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(object component) => throw null;\n    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Type componentType, System.Attribute[] attributes) => throw null;\n    public static System.ComponentModel.PropertyDescriptorCollection GetProperties(System.Type componentType) => throw null;\n    public static System.ComponentModel.TypeDescriptionProvider GetProvider(object instance) => throw null;\n    public static System.ComponentModel.TypeDescriptionProvider GetProvider(System.Type type) => throw null;\n    public static System.Type GetReflectionType(object instance) => throw null;\n    public static System.Type GetReflectionType(System.Type type) => throw null;\n    public static System.Type InterfaceType { get => throw null; }\n    public static void Refresh(object component) => throw null;\n    public static void Refresh(System.Type type) => throw null;\n    public static void Refresh(System.Reflection.Module module) => throw null;\n    public static void Refresh(System.Reflection.Assembly assembly) => throw null;\n    public static event System.ComponentModel.RefreshEventHandler Refreshed;\n    public static void RemoveAssociation(object primary, object secondary) => throw null;\n    public static void RemoveAssociations(object primary) => throw null;\n    public static void RemoveProvider(System.ComponentModel.TypeDescriptionProvider provider, object instance) => throw null;\n    public static void RemoveProvider(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) => throw null;\n    public static void RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, object instance) => throw null;\n    public static void RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider provider, System.Type type) => throw null;\n    public static void SortDescriptorArray(System.Collections.IList infos) => throw null;\n}\n\n// Generated from `System.ComponentModel.TypeListConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class TypeListConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    protected TypeListConverter(System.Type[] types) => throw null;\n}\n\n// Generated from `System.ComponentModel.UInt16Converter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class UInt16Converter : System.ComponentModel.BaseNumberConverter\n{\n    public UInt16Converter() => throw null;\n}\n\n// Generated from `System.ComponentModel.UInt32Converter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class UInt32Converter : System.ComponentModel.BaseNumberConverter\n{\n    public UInt32Converter() => throw null;\n}\n\n// Generated from `System.ComponentModel.UInt64Converter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class UInt64Converter : System.ComponentModel.BaseNumberConverter\n{\n    public UInt64Converter() => throw null;\n}\n\n// Generated from `System.ComponentModel.VersionConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class VersionConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override bool IsValid(System.ComponentModel.ITypeDescriptorContext context, object value) => throw null;\n    public VersionConverter() => throw null;\n}\n\n// Generated from `System.ComponentModel.WarningException` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class WarningException : System.SystemException\n{\n    public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public string HelpTopic { get => throw null; }\n    public string HelpUrl { get => throw null; }\n    public WarningException(string message, string helpUrl, string helpTopic) => throw null;\n    public WarningException(string message, string helpUrl) => throw null;\n    public WarningException(string message, System.Exception innerException) => throw null;\n    public WarningException(string message) => throw null;\n    public WarningException() => throw null;\n    protected WarningException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n}\n\nnamespace Design\n{\n// Generated from `System.ComponentModel.Design.ActiveDesignerEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ActiveDesignerEventArgs : System.EventArgs\n{\n    public ActiveDesignerEventArgs(System.ComponentModel.Design.IDesignerHost oldDesigner, System.ComponentModel.Design.IDesignerHost newDesigner) => throw null;\n    public System.ComponentModel.Design.IDesignerHost NewDesigner { get => throw null; }\n    public System.ComponentModel.Design.IDesignerHost OldDesigner { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.ActiveDesignerEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ActiveDesignerEventHandler(object sender, System.ComponentModel.Design.ActiveDesignerEventArgs e);\n\n// Generated from `System.ComponentModel.Design.CheckoutException` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CheckoutException : System.Runtime.InteropServices.ExternalException\n{\n    public static System.ComponentModel.Design.CheckoutException Canceled;\n    public CheckoutException(string message, int errorCode) => throw null;\n    public CheckoutException(string message, System.Exception innerException) => throw null;\n    public CheckoutException(string message) => throw null;\n    public CheckoutException() => throw null;\n    protected CheckoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.CommandID` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CommandID\n{\n    public CommandID(System.Guid menuGroup, int commandID) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public virtual System.Guid Guid { get => throw null; }\n    public virtual int ID { get => throw null; }\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.ComponentChangedEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ComponentChangedEventArgs : System.EventArgs\n{\n    public object Component { get => throw null; }\n    public ComponentChangedEventArgs(object component, System.ComponentModel.MemberDescriptor member, object oldValue, object newValue) => throw null;\n    public System.ComponentModel.MemberDescriptor Member { get => throw null; }\n    public object NewValue { get => throw null; }\n    public object OldValue { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.ComponentChangedEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ComponentChangedEventHandler(object sender, System.ComponentModel.Design.ComponentChangedEventArgs e);\n\n// Generated from `System.ComponentModel.Design.ComponentChangingEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ComponentChangingEventArgs : System.EventArgs\n{\n    public object Component { get => throw null; }\n    public ComponentChangingEventArgs(object component, System.ComponentModel.MemberDescriptor member) => throw null;\n    public System.ComponentModel.MemberDescriptor Member { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.ComponentChangingEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ComponentChangingEventHandler(object sender, System.ComponentModel.Design.ComponentChangingEventArgs e);\n\n// Generated from `System.ComponentModel.Design.ComponentEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ComponentEventHandler(object sender, System.ComponentModel.Design.ComponentEventArgs e);\n\n// Generated from `System.ComponentModel.Design.ComponentRenameEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ComponentRenameEventArgs : System.EventArgs\n{\n    public object Component { get => throw null; }\n    public ComponentRenameEventArgs(object component, string oldName, string newName) => throw null;\n    public virtual string NewName { get => throw null; }\n    public virtual string OldName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.ComponentRenameEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ComponentRenameEventHandler(object sender, System.ComponentModel.Design.ComponentRenameEventArgs e);\n\n// Generated from `System.ComponentModel.Design.DesignerCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesignerCollection : System.Collections.IEnumerable, System.Collections.ICollection\n{\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    int System.Collections.ICollection.Count { get => throw null; }\n    public DesignerCollection(System.ComponentModel.Design.IDesignerHost[] designers) => throw null;\n    public DesignerCollection(System.Collections.IList designers) => throw null;\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public virtual System.ComponentModel.Design.IDesignerHost this[int index] { get => throw null; }\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.DesignerEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesignerEventArgs : System.EventArgs\n{\n    public System.ComponentModel.Design.IDesignerHost Designer { get => throw null; }\n    public DesignerEventArgs(System.ComponentModel.Design.IDesignerHost host) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.DesignerEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void DesignerEventHandler(object sender, System.ComponentModel.Design.DesignerEventArgs e);\n\n// Generated from `System.ComponentModel.Design.DesignerOptionService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DesignerOptionService : System.ComponentModel.Design.IDesignerOptionService\n{\n    protected System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection parent, string name, object value) => throw null;\n// Generated from `System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesignerOptionCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    int System.Collections.IList.Add(object value) => throw null;\n    void System.Collections.IList.Clear() => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    public int IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection value) => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    bool System.Collections.IList.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection this[string name] { get => throw null; }\n    public System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection this[int index] { get => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    public string Name { get => throw null; }\n    public System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection Parent { get => throw null; }\n    public System.ComponentModel.PropertyDescriptorCollection Properties { get => throw null; }\n    void System.Collections.IList.Remove(object value) => throw null;\n    void System.Collections.IList.RemoveAt(int index) => throw null;\n    public bool ShowDialog() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n    protected DesignerOptionService() => throw null;\n    object System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(string pageName, string valueName) => throw null;\n    public System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection Options { get => throw null; }\n    protected virtual void PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection options) => throw null;\n    void System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(string pageName, string valueName, object value) => throw null;\n    protected virtual bool ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection options, object optionObject) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.DesignerTransaction` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DesignerTransaction : System.IDisposable\n{\n    public void Cancel() => throw null;\n    public bool Canceled { get => throw null; }\n    public void Commit() => throw null;\n    public bool Committed { get => throw null; }\n    public string Description { get => throw null; }\n    protected DesignerTransaction(string description) => throw null;\n    protected DesignerTransaction() => throw null;\n    void System.IDisposable.Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    protected abstract void OnCancel();\n    protected abstract void OnCommit();\n    // ERR: Stub generator didn't handle member: ~DesignerTransaction\n}\n\n// Generated from `System.ComponentModel.Design.DesignerTransactionCloseEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesignerTransactionCloseEventArgs : System.EventArgs\n{\n    public DesignerTransactionCloseEventArgs(bool commit, bool lastTransaction) => throw null;\n    public DesignerTransactionCloseEventArgs(bool commit) => throw null;\n    public bool LastTransaction { get => throw null; }\n    public bool TransactionCommitted { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.DesignerTransactionCloseEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void DesignerTransactionCloseEventHandler(object sender, System.ComponentModel.Design.DesignerTransactionCloseEventArgs e);\n\n// Generated from `System.ComponentModel.Design.DesignerVerb` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesignerVerb : System.ComponentModel.Design.MenuCommand\n{\n    public string Description { get => throw null; set => throw null; }\n    public DesignerVerb(string text, System.EventHandler handler, System.ComponentModel.Design.CommandID startCommandID) : base(default(System.EventHandler), default(System.ComponentModel.Design.CommandID)) => throw null;\n    public DesignerVerb(string text, System.EventHandler handler) : base(default(System.EventHandler), default(System.ComponentModel.Design.CommandID)) => throw null;\n    public string Text { get => throw null; }\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.DesignerVerbCollection` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesignerVerbCollection : System.Collections.CollectionBase\n{\n    public int Add(System.ComponentModel.Design.DesignerVerb value) => throw null;\n    public void AddRange(System.ComponentModel.Design.DesignerVerb[] value) => throw null;\n    public void AddRange(System.ComponentModel.Design.DesignerVerbCollection value) => throw null;\n    public bool Contains(System.ComponentModel.Design.DesignerVerb value) => throw null;\n    public void CopyTo(System.ComponentModel.Design.DesignerVerb[] array, int index) => throw null;\n    public DesignerVerbCollection(System.ComponentModel.Design.DesignerVerb[] value) => throw null;\n    public DesignerVerbCollection() => throw null;\n    public int IndexOf(System.ComponentModel.Design.DesignerVerb value) => throw null;\n    public void Insert(int index, System.ComponentModel.Design.DesignerVerb value) => throw null;\n    public System.ComponentModel.Design.DesignerVerb this[int index] { get => throw null; set => throw null; }\n    protected override void OnValidate(object value) => throw null;\n    public void Remove(System.ComponentModel.Design.DesignerVerb value) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.DesigntimeLicenseContext` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesigntimeLicenseContext : System.ComponentModel.LicenseContext\n{\n    public DesigntimeLicenseContext() => throw null;\n    public override string GetSavedLicenseKey(System.Type type, System.Reflection.Assembly resourceAssembly) => throw null;\n    public override void SetSavedLicenseKey(System.Type type, string key) => throw null;\n    public override System.ComponentModel.LicenseUsageMode UsageMode { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.DesigntimeLicenseContextSerializer` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DesigntimeLicenseContextSerializer\n{\n    public static void Serialize(System.IO.Stream o, string cryptoKey, System.ComponentModel.Design.DesigntimeLicenseContext context) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.HelpContextType` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum HelpContextType\n{\n    Ambient,\n    // Stub generator skipped constructor \n    Selection,\n    ToolWindowSelection,\n    Window,\n}\n\n// Generated from `System.ComponentModel.Design.HelpKeywordAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class HelpKeywordAttribute : System.Attribute\n{\n    public static System.ComponentModel.Design.HelpKeywordAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public string HelpKeyword { get => throw null; }\n    public HelpKeywordAttribute(string keyword) => throw null;\n    public HelpKeywordAttribute(System.Type t) => throw null;\n    public HelpKeywordAttribute() => throw null;\n    public override bool IsDefaultAttribute() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.HelpKeywordType` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum HelpKeywordType\n{\n    F1Keyword,\n    FilterKeyword,\n    GeneralKeyword,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.ComponentModel.Design.IComponentChangeService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IComponentChangeService\n{\n    event System.ComponentModel.Design.ComponentEventHandler ComponentAdded;\n    event System.ComponentModel.Design.ComponentEventHandler ComponentAdding;\n    event System.ComponentModel.Design.ComponentChangedEventHandler ComponentChanged;\n    event System.ComponentModel.Design.ComponentChangingEventHandler ComponentChanging;\n    event System.ComponentModel.Design.ComponentEventHandler ComponentRemoved;\n    event System.ComponentModel.Design.ComponentEventHandler ComponentRemoving;\n    event System.ComponentModel.Design.ComponentRenameEventHandler ComponentRename;\n    void OnComponentChanged(object component, System.ComponentModel.MemberDescriptor member, object oldValue, object newValue) => throw null;\n    void OnComponentChanging(object component, System.ComponentModel.MemberDescriptor member) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IComponentDiscoveryService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IComponentDiscoveryService\n{\n    System.Collections.ICollection GetComponentTypes(System.ComponentModel.Design.IDesignerHost designerHost, System.Type baseType) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IComponentInitializer` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IComponentInitializer\n{\n    void InitializeExistingComponent(System.Collections.IDictionary defaultValues) => throw null;\n    void InitializeNewComponent(System.Collections.IDictionary defaultValues) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IDesignerEventService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerEventService\n{\n    System.ComponentModel.Design.IDesignerHost ActiveDesigner { get => throw null; }\n    event System.ComponentModel.Design.ActiveDesignerEventHandler ActiveDesignerChanged;\n    event System.ComponentModel.Design.DesignerEventHandler DesignerCreated;\n    event System.ComponentModel.Design.DesignerEventHandler DesignerDisposed;\n    System.ComponentModel.Design.DesignerCollection Designers { get => throw null; }\n    event System.EventHandler SelectionChanged;\n}\n\n// Generated from `System.ComponentModel.Design.IDesignerFilter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerFilter\n{\n    void PostFilterAttributes(System.Collections.IDictionary attributes) => throw null;\n    void PostFilterEvents(System.Collections.IDictionary events) => throw null;\n    void PostFilterProperties(System.Collections.IDictionary properties) => throw null;\n    void PreFilterAttributes(System.Collections.IDictionary attributes) => throw null;\n    void PreFilterEvents(System.Collections.IDictionary events) => throw null;\n    void PreFilterProperties(System.Collections.IDictionary properties) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IDesignerHostTransactionState` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerHostTransactionState\n{\n    bool IsClosingTransaction { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.IDesignerOptionService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerOptionService\n{\n    object GetOptionValue(string pageName, string valueName) => throw null;\n    void SetOptionValue(string pageName, string valueName, object value) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IDictionaryService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDictionaryService\n{\n    object GetKey(object value) => throw null;\n    object GetValue(object key) => throw null;\n    void SetValue(object key, object value) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IEventBindingService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IEventBindingService\n{\n    string CreateUniqueMethodName(System.ComponentModel.EventDescriptor e) => throw null;\n    System.Collections.ICollection GetCompatibleMethods(System.ComponentModel.EventDescriptor e) => throw null;\n    System.ComponentModel.EventDescriptor GetEvent(System.ComponentModel.PropertyDescriptor property) => throw null;\n    System.ComponentModel.PropertyDescriptorCollection GetEventProperties(System.ComponentModel.EventDescriptorCollection events) => throw null;\n    System.ComponentModel.PropertyDescriptor GetEventProperty(System.ComponentModel.EventDescriptor e) => throw null;\n    bool ShowCode(int lineNumber) => throw null;\n    bool ShowCode(System.ComponentModel.EventDescriptor e) => throw null;\n    bool ShowCode() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IExtenderListService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IExtenderListService\n{\n    System.ComponentModel.IExtenderProvider[] GetExtenderProviders() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IExtenderProviderService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IExtenderProviderService\n{\n    void AddExtenderProvider(System.ComponentModel.IExtenderProvider provider) => throw null;\n    void RemoveExtenderProvider(System.ComponentModel.IExtenderProvider provider) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IHelpService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IHelpService\n{\n    void AddContextAttribute(string name, string value, System.ComponentModel.Design.HelpKeywordType keywordType) => throw null;\n    void ClearContextAttributes() => throw null;\n    System.ComponentModel.Design.IHelpService CreateLocalContext(System.ComponentModel.Design.HelpContextType contextType) => throw null;\n    void RemoveContextAttribute(string name, string value) => throw null;\n    void RemoveLocalContext(System.ComponentModel.Design.IHelpService localContext) => throw null;\n    void ShowHelpFromKeyword(string helpKeyword) => throw null;\n    void ShowHelpFromUrl(string helpUrl) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IInheritanceService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IInheritanceService\n{\n    void AddInheritedComponents() => throw null;\n    System.ComponentModel.InheritanceAttribute GetInheritanceAttribute() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IMenuCommandService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IMenuCommandService\n{\n    void AddCommand(System.ComponentModel.Design.MenuCommand command) => throw null;\n    void AddVerb(System.ComponentModel.Design.DesignerVerb verb) => throw null;\n    System.ComponentModel.Design.MenuCommand FindCommand(System.ComponentModel.Design.CommandID commandID) => throw null;\n    bool GlobalInvoke(System.ComponentModel.Design.CommandID commandID) => throw null;\n    void RemoveCommand(System.ComponentModel.Design.MenuCommand command) => throw null;\n    void RemoveVerb(System.ComponentModel.Design.DesignerVerb verb) => throw null;\n    void ShowContextMenu(System.ComponentModel.Design.CommandID menuID, int x, int y) => throw null;\n    System.ComponentModel.Design.DesignerVerbCollection Verbs { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.IRootDesigner` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IRootDesigner : System.IDisposable, System.ComponentModel.Design.IDesigner\n{\n    object GetView(System.ComponentModel.Design.ViewTechnology technology) => throw null;\n    System.ComponentModel.Design.ViewTechnology[] SupportedTechnologies { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.ISelectionService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ISelectionService\n{\n    bool GetComponentSelected(object component) => throw null;\n    System.Collections.ICollection GetSelectedComponents() => throw null;\n    object PrimarySelection { get => throw null; }\n    event System.EventHandler SelectionChanged;\n    event System.EventHandler SelectionChanging;\n    int SelectionCount { get => throw null; }\n    void SetSelectedComponents(System.Collections.ICollection components, System.ComponentModel.Design.SelectionTypes selectionType) => throw null;\n    void SetSelectedComponents(System.Collections.ICollection components) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.IServiceContainer` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IServiceContainer\n{\n    void AddService(System.Type serviceType, object serviceInstance, bool promote) => throw null;\n    void AddService(System.Type serviceType, object serviceInstance) => throw null;\n    void AddService(System.Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote) => throw null;\n    void AddService(System.Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback) => throw null;\n    void RemoveService(System.Type serviceType, bool promote) => throw null;\n    void RemoveService(System.Type serviceType) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.ITreeDesigner` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ITreeDesigner : System.IDisposable, System.ComponentModel.Design.IDesigner\n{\n    System.Collections.ICollection Children { get => throw null; }\n    System.ComponentModel.Design.IDesigner Parent { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.ITypeDescriptorFilterService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ITypeDescriptorFilterService\n{\n    bool FilterAttributes(System.Collections.IDictionary attributes) => throw null;\n    bool FilterEvents(System.Collections.IDictionary events) => throw null;\n    bool FilterProperties(System.Collections.IDictionary properties) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.ITypeDiscoveryService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ITypeDiscoveryService\n{\n    System.Collections.ICollection GetTypes(System.Type baseType, bool excludeGlobalTypes) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.ITypeResolutionService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ITypeResolutionService\n{\n    System.Reflection.Assembly GetAssembly(System.Reflection.AssemblyName name, bool throwOnError) => throw null;\n    System.Reflection.Assembly GetAssembly(System.Reflection.AssemblyName name) => throw null;\n    string GetPathOfAssembly(System.Reflection.AssemblyName name) => throw null;\n    System.Type GetType(string name, bool throwOnError, bool ignoreCase) => throw null;\n    System.Type GetType(string name, bool throwOnError) => throw null;\n    System.Type GetType(string name) => throw null;\n    void ReferenceAssembly(System.Reflection.AssemblyName name) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.MenuCommand` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MenuCommand\n{\n    public virtual bool Checked { get => throw null; set => throw null; }\n    public event System.EventHandler CommandChanged;\n    public virtual System.ComponentModel.Design.CommandID CommandID { get => throw null; }\n    public virtual bool Enabled { get => throw null; set => throw null; }\n    public virtual void Invoke(object arg) => throw null;\n    public virtual void Invoke() => throw null;\n    public MenuCommand(System.EventHandler handler, System.ComponentModel.Design.CommandID command) => throw null;\n    public virtual int OleStatus { get => throw null; }\n    protected virtual void OnCommandChanged(System.EventArgs e) => throw null;\n    public virtual System.Collections.IDictionary Properties { get => throw null; }\n    public virtual bool Supported { get => throw null; set => throw null; }\n    public override string ToString() => throw null;\n    public virtual bool Visible { get => throw null; set => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.SelectionTypes` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum SelectionTypes\n{\n    Add,\n    Auto,\n    Click,\n    MouseDown,\n    MouseUp,\n    Normal,\n    Primary,\n    Remove,\n    Replace,\n    // Stub generator skipped constructor \n    Toggle,\n    Valid,\n}\n\n// Generated from `System.ComponentModel.Design.ServiceContainer` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ServiceContainer : System.IDisposable, System.ComponentModel.Design.IServiceContainer\n{\n    public void AddService(System.Type serviceType, object serviceInstance) => throw null;\n    public void AddService(System.Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback) => throw null;\n    public virtual void AddService(System.Type serviceType, object serviceInstance, bool promote) => throw null;\n    public virtual void AddService(System.Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote) => throw null;\n    protected virtual System.Type[] DefaultServices { get => throw null; }\n    public void Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    public virtual object GetService(System.Type serviceType) => throw null;\n    public void RemoveService(System.Type serviceType) => throw null;\n    public virtual void RemoveService(System.Type serviceType, bool promote) => throw null;\n    public ServiceContainer() => throw null;\n    public ServiceContainer() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.ServiceCreatorCallback` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate object ServiceCreatorCallback(System.ComponentModel.Design.IServiceContainer container, System.Type serviceType);\n\n// Generated from `System.ComponentModel.Design.StandardCommands` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class StandardCommands\n{\n    public static System.ComponentModel.Design.CommandID AlignBottom;\n    public static System.ComponentModel.Design.CommandID AlignHorizontalCenters;\n    public static System.ComponentModel.Design.CommandID AlignLeft;\n    public static System.ComponentModel.Design.CommandID AlignRight;\n    public static System.ComponentModel.Design.CommandID AlignToGrid;\n    public static System.ComponentModel.Design.CommandID AlignTop;\n    public static System.ComponentModel.Design.CommandID AlignVerticalCenters;\n    public static System.ComponentModel.Design.CommandID ArrangeBottom;\n    public static System.ComponentModel.Design.CommandID ArrangeIcons;\n    public static System.ComponentModel.Design.CommandID ArrangeRight;\n    public static System.ComponentModel.Design.CommandID BringForward;\n    public static System.ComponentModel.Design.CommandID BringToFront;\n    public static System.ComponentModel.Design.CommandID CenterHorizontally;\n    public static System.ComponentModel.Design.CommandID CenterVertically;\n    public static System.ComponentModel.Design.CommandID Copy;\n    public static System.ComponentModel.Design.CommandID Cut;\n    public static System.ComponentModel.Design.CommandID Delete;\n    public static System.ComponentModel.Design.CommandID DocumentOutline;\n    public static System.ComponentModel.Design.CommandID F1Help;\n    public static System.ComponentModel.Design.CommandID Group;\n    public static System.ComponentModel.Design.CommandID HorizSpaceConcatenate;\n    public static System.ComponentModel.Design.CommandID HorizSpaceDecrease;\n    public static System.ComponentModel.Design.CommandID HorizSpaceIncrease;\n    public static System.ComponentModel.Design.CommandID HorizSpaceMakeEqual;\n    public static System.ComponentModel.Design.CommandID LineupIcons;\n    public static System.ComponentModel.Design.CommandID LockControls;\n    public static System.ComponentModel.Design.CommandID MultiLevelRedo;\n    public static System.ComponentModel.Design.CommandID MultiLevelUndo;\n    public static System.ComponentModel.Design.CommandID Paste;\n    public static System.ComponentModel.Design.CommandID Properties;\n    public static System.ComponentModel.Design.CommandID PropertiesWindow;\n    public static System.ComponentModel.Design.CommandID Redo;\n    public static System.ComponentModel.Design.CommandID Replace;\n    public static System.ComponentModel.Design.CommandID SelectAll;\n    public static System.ComponentModel.Design.CommandID SendBackward;\n    public static System.ComponentModel.Design.CommandID SendToBack;\n    public static System.ComponentModel.Design.CommandID ShowGrid;\n    public static System.ComponentModel.Design.CommandID ShowLargeIcons;\n    public static System.ComponentModel.Design.CommandID SizeToControl;\n    public static System.ComponentModel.Design.CommandID SizeToControlHeight;\n    public static System.ComponentModel.Design.CommandID SizeToControlWidth;\n    public static System.ComponentModel.Design.CommandID SizeToFit;\n    public static System.ComponentModel.Design.CommandID SizeToGrid;\n    public static System.ComponentModel.Design.CommandID SnapToGrid;\n    public StandardCommands() => throw null;\n    public static System.ComponentModel.Design.CommandID TabOrder;\n    public static System.ComponentModel.Design.CommandID Undo;\n    public static System.ComponentModel.Design.CommandID Ungroup;\n    public static System.ComponentModel.Design.CommandID VerbFirst;\n    public static System.ComponentModel.Design.CommandID VerbLast;\n    public static System.ComponentModel.Design.CommandID VertSpaceConcatenate;\n    public static System.ComponentModel.Design.CommandID VertSpaceDecrease;\n    public static System.ComponentModel.Design.CommandID VertSpaceIncrease;\n    public static System.ComponentModel.Design.CommandID VertSpaceMakeEqual;\n    public static System.ComponentModel.Design.CommandID ViewCode;\n    public static System.ComponentModel.Design.CommandID ViewGrid;\n}\n\n// Generated from `System.ComponentModel.Design.StandardToolWindows` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class StandardToolWindows\n{\n    public static System.Guid ObjectBrowser;\n    public static System.Guid OutputWindow;\n    public static System.Guid ProjectExplorer;\n    public static System.Guid PropertyBrowser;\n    public static System.Guid RelatedLinks;\n    public static System.Guid ServerExplorer;\n    public StandardToolWindows() => throw null;\n    public static System.Guid TaskList;\n    public static System.Guid Toolbox;\n}\n\n// Generated from `System.ComponentModel.Design.TypeDescriptionProviderService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class TypeDescriptionProviderService\n{\n    public abstract System.ComponentModel.TypeDescriptionProvider GetProvider(object instance);\n    public abstract System.ComponentModel.TypeDescriptionProvider GetProvider(System.Type type);\n    protected TypeDescriptionProviderService() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.ViewTechnology` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ViewTechnology\n{\n    Default,\n    Passthrough,\n    // Stub generator skipped constructor \n    WindowsForms,\n}\n\nnamespace Serialization\n{\n// Generated from `System.ComponentModel.Design.Serialization.ComponentSerializationService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class ComponentSerializationService\n{\n    protected ComponentSerializationService() => throw null;\n    public abstract System.ComponentModel.Design.Serialization.SerializationStore CreateStore();\n    public abstract System.Collections.ICollection Deserialize(System.ComponentModel.Design.Serialization.SerializationStore store);\n    public abstract System.Collections.ICollection Deserialize(System.ComponentModel.Design.Serialization.SerializationStore store);\n    public void DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore store, bool validateRecycledTypes) => throw null;\n    public void DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore store) => throw null;\n    public abstract void DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore store, bool validateRecycledTypes, bool applyDefaults);\n    public abstract System.ComponentModel.Design.Serialization.SerializationStore LoadStore(System.IO.Stream stream);\n    public abstract void Serialize(System.ComponentModel.Design.Serialization.SerializationStore store, object value);\n    public abstract void SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore store, object value);\n    public abstract void SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore store, object owningObject, System.ComponentModel.MemberDescriptor member);\n    public abstract void SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore store, object owningObject, System.ComponentModel.MemberDescriptor member);\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.ContextStack` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ContextStack\n{\n    public void Append(object context) => throw null;\n    public ContextStack() => throw null;\n    public object Current { get => throw null; }\n    public object this[int level] { get => throw null; }\n    public object this[System.Type type] { get => throw null; }\n    public object Pop() => throw null;\n    public void Push(object context) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DefaultSerializationProviderAttribute : System.Attribute\n{\n    public DefaultSerializationProviderAttribute(string providerTypeName) => throw null;\n    public DefaultSerializationProviderAttribute(System.Type providerType) => throw null;\n    public string ProviderTypeName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.DesignerLoader` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DesignerLoader\n{\n    public abstract void BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost host);\n    protected DesignerLoader() => throw null;\n    public abstract void Dispose();\n    public virtual void Flush() => throw null;\n    public virtual bool Loading { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.IDesignerLoaderHost` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerLoaderHost : System.ComponentModel.Design.IServiceContainer, System.ComponentModel.Design.IDesignerHost\n{\n    void EndLoad(string baseClassName, bool successful, System.Collections.ICollection errorCollection) => throw null;\n    void Reload() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.IDesignerLoaderHost2` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerLoaderHost2 : System.ComponentModel.Design.Serialization.IDesignerLoaderHost, System.ComponentModel.Design.IServiceContainer, System.ComponentModel.Design.IDesignerHost\n{\n    bool CanReloadWithErrors { get => throw null; set => throw null; }\n    bool IgnoreErrorsDuringReload { get => throw null; set => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.IDesignerLoaderService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerLoaderService\n{\n    void AddLoadDependency() => throw null;\n    void DependentLoadComplete(bool successful, System.Collections.ICollection errorCollection) => throw null;\n    bool Reload() => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.IDesignerSerializationManager` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerSerializationManager\n{\n    void AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) => throw null;\n    System.ComponentModel.Design.Serialization.ContextStack Context { get => throw null; }\n    object CreateInstance(System.Type type, System.Collections.ICollection arguments, string name, bool addToContainer) => throw null;\n    object GetInstance(string name) => throw null;\n    string GetName(object value) => throw null;\n    object GetSerializer(System.Type objectType, System.Type serializerType) => throw null;\n    System.Type GetType(string typeName) => throw null;\n    System.ComponentModel.PropertyDescriptorCollection Properties { get => throw null; }\n    void RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider) => throw null;\n    void ReportError(object errorInformation) => throw null;\n    event System.ComponentModel.Design.Serialization.ResolveNameEventHandler ResolveName;\n    event System.EventHandler SerializationComplete;\n    void SetName(object instance, string name) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.IDesignerSerializationProvider` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerSerializationProvider\n{\n    object GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object currentSerializer, System.Type objectType, System.Type serializerType) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.IDesignerSerializationService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDesignerSerializationService\n{\n    System.Collections.ICollection Deserialize(object serializationData) => throw null;\n    object Serialize(System.Collections.ICollection objects) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.INameCreationService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface INameCreationService\n{\n    string CreateName(System.Type dataType) => throw null;\n    bool IsValidName(string name) => throw null;\n    void ValidateName(string name) => throw null;\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.InstanceDescriptor` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class InstanceDescriptor\n{\n    public System.Collections.ICollection Arguments { get => throw null; }\n    public InstanceDescriptor(System.Reflection.MemberInfo member, System.Collections.ICollection arguments, bool isComplete) => throw null;\n    public InstanceDescriptor(System.Reflection.MemberInfo member, System.Collections.ICollection arguments) => throw null;\n    public object Invoke() => throw null;\n    public bool IsComplete { get => throw null; }\n    public System.Reflection.MemberInfo MemberInfo { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.MemberRelationship` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct MemberRelationship\n{\n    public static bool operator !=(System.ComponentModel.Design.Serialization.MemberRelationship left, System.ComponentModel.Design.Serialization.MemberRelationship right) => throw null;\n    public static bool operator ==(System.ComponentModel.Design.Serialization.MemberRelationship left, System.ComponentModel.Design.Serialization.MemberRelationship right) => throw null;\n    public static System.ComponentModel.Design.Serialization.MemberRelationship Empty;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public bool IsEmpty { get => throw null; }\n    public System.ComponentModel.MemberDescriptor Member { get => throw null; }\n    public MemberRelationship(object owner, System.ComponentModel.MemberDescriptor member) => throw null;\n    // Stub generator skipped constructor \n    public object Owner { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.MemberRelationshipService` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class MemberRelationshipService\n{\n    protected virtual System.ComponentModel.Design.Serialization.MemberRelationship GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship source) => throw null;\n    public System.ComponentModel.Design.Serialization.MemberRelationship this[object sourceOwner, System.ComponentModel.MemberDescriptor sourceMember] { get => throw null; set => throw null; }\n    public System.ComponentModel.Design.Serialization.MemberRelationship this[System.ComponentModel.Design.Serialization.MemberRelationship source] { get => throw null; set => throw null; }\n    protected MemberRelationshipService() => throw null;\n    protected virtual void SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship source, System.ComponentModel.Design.Serialization.MemberRelationship relationship) => throw null;\n    public abstract bool SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship source, System.ComponentModel.Design.Serialization.MemberRelationship relationship);\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.ResolveNameEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ResolveNameEventArgs : System.EventArgs\n{\n    public string Name { get => throw null; }\n    public ResolveNameEventArgs(string name) => throw null;\n    public object Value { get => throw null; set => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.ResolveNameEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ResolveNameEventHandler(object sender, System.ComponentModel.Design.Serialization.ResolveNameEventArgs e);\n\n// Generated from `System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RootDesignerSerializerAttribute : System.Attribute\n{\n    public bool Reloadable { get => throw null; }\n    public RootDesignerSerializerAttribute(string serializerTypeName, string baseSerializerTypeName, bool reloadable) => throw null;\n    public RootDesignerSerializerAttribute(string serializerTypeName, System.Type baseSerializerType, bool reloadable) => throw null;\n    public RootDesignerSerializerAttribute(System.Type serializerType, System.Type baseSerializerType, bool reloadable) => throw null;\n    public string SerializerBaseTypeName { get => throw null; }\n    public string SerializerTypeName { get => throw null; }\n    public override object TypeId { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.Design.Serialization.SerializationStore` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class SerializationStore : System.IDisposable\n{\n    public abstract void Close();\n    void System.IDisposable.Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    public abstract System.Collections.ICollection Errors { get; }\n    public abstract void Save(System.IO.Stream stream);\n    protected SerializationStore() => throw null;\n}\n\n}\n}\n}\nnamespace Drawing\n{\n// Generated from `System.Drawing.ColorConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ColorConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public ColorConverter() => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n}\n\n// Generated from `System.Drawing.PointConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PointConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) => throw null;\n    public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public PointConverter() => throw null;\n}\n\n// Generated from `System.Drawing.RectangleConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RectangleConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) => throw null;\n    public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public RectangleConverter() => throw null;\n}\n\n// Generated from `System.Drawing.SizeConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SizeConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) => throw null;\n    public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public SizeConverter() => throw null;\n}\n\n// Generated from `System.Drawing.SizeFConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SizeFConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) => throw null;\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues) => throw null;\n    public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public override System.ComponentModel.PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributes) => throw null;\n    public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) => throw null;\n    public SizeFConverter() => throw null;\n}\n\n}\nnamespace Security\n{\nnamespace Authentication\n{\nnamespace ExtendedProtection\n{\n// Generated from `System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ExtendedProtectionPolicyTypeConverter : System.ComponentModel.TypeConverter\n{\n    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) => throw null;\n    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) => throw null;\n    public ExtendedProtectionPolicyTypeConverter() => throw null;\n}\n\n}\n}\n}\nnamespace Timers\n{\n// Generated from `System.Timers.ElapsedEventArgs` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ElapsedEventArgs : System.EventArgs\n{\n    public System.DateTime SignalTime { get => throw null; }\n}\n\n// Generated from `System.Timers.ElapsedEventHandler` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void ElapsedEventHandler(object sender, System.Timers.ElapsedEventArgs e);\n\n// Generated from `System.Timers.TimersDescriptionAttribute` in `System.ComponentModel.TypeConverter, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TimersDescriptionAttribute\n{\n    public override string Description { get => throw null; }\n    public TimersDescriptionAttribute(string description) => throw null;\n}\n\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Collections\n{\n// Generated from `System.Collections.BitArray` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class BitArray : System.ICloneable, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    public System.Collections.BitArray And(System.Collections.BitArray value) => throw null;\n    public BitArray(int[] values) => throw null;\n    public BitArray(int length, bool defaultValue) => throw null;\n    public BitArray(int length) => throw null;\n    public BitArray(bool[] values) => throw null;\n    public BitArray(System.Collections.BitArray bits) => throw null;\n    public BitArray(System.Byte[] bytes) => throw null;\n    public object Clone() => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public bool Get(int index) => throw null;\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public bool this[int index] { get => throw null; set => throw null; }\n    public System.Collections.BitArray LeftShift(int count) => throw null;\n    public int Length { get => throw null; set => throw null; }\n    public System.Collections.BitArray Not() => throw null;\n    public System.Collections.BitArray Or(System.Collections.BitArray value) => throw null;\n    public System.Collections.BitArray RightShift(int count) => throw null;\n    public void Set(int index, bool value) => throw null;\n    public void SetAll(bool value) => throw null;\n    public object SyncRoot { get => throw null; }\n    public System.Collections.BitArray Xor(System.Collections.BitArray value) => throw null;\n}\n\n// Generated from `System.Collections.StructuralComparisons` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class StructuralComparisons\n{\n    public static System.Collections.IComparer StructuralComparer { get => throw null; }\n    public static System.Collections.IEqualityComparer StructuralEqualityComparer { get => throw null; }\n}\n\nnamespace Generic\n{\n// Generated from `System.Collections.Generic.CollectionExtensions` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class CollectionExtensions\n{\n    public static TValue GetValueOrDefault<TKey,TValue>(this System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> dictionary, TKey key, TValue defaultValue) => throw null;\n    public static TValue GetValueOrDefault<TKey,TValue>(this System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> dictionary, TKey key) => throw null;\n    public static bool Remove<TKey,TValue>(this System.Collections.Generic.IDictionary<TKey,TValue> dictionary, TKey key, out TValue value) => throw null;\n    public static bool TryAdd<TKey,TValue>(this System.Collections.Generic.IDictionary<TKey,TValue> dictionary, TKey key, TValue value) => throw null;\n}\n\n// Generated from `System.Collections.Generic.LinkedList<>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LinkedList<T> : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.ICollection<T>\n{\n    void System.Collections.Generic.ICollection<T>.Add(T value) => throw null;\n    public void AddAfter(System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode) => throw null;\n    public System.Collections.Generic.LinkedListNode<T> AddAfter(System.Collections.Generic.LinkedListNode<T> node, T value) => throw null;\n    public void AddBefore(System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode) => throw null;\n    public System.Collections.Generic.LinkedListNode<T> AddBefore(System.Collections.Generic.LinkedListNode<T> node, T value) => throw null;\n    public void AddFirst(System.Collections.Generic.LinkedListNode<T> node) => throw null;\n    public System.Collections.Generic.LinkedListNode<T> AddFirst(T value) => throw null;\n    public void AddLast(System.Collections.Generic.LinkedListNode<T> node) => throw null;\n    public System.Collections.Generic.LinkedListNode<T> AddLast(T value) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(T value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(T[] array, int index) => throw null;\n    public int Count { get => throw null; }\n// Generated from `System.Collections.Generic.LinkedList<>.Enumerator` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Enumerator : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.IDisposable, System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<T>\n{\n    public T Current { get => throw null; }\n    object System.Collections.IEnumerator.Current { get => throw null; }\n    public void Dispose() => throw null;\n    // Stub generator skipped constructor \n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public bool MoveNext() => throw null;\n    void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) => throw null;\n    void System.Collections.IEnumerator.Reset() => throw null;\n}\n\n\n    public System.Collections.Generic.LinkedListNode<T> Find(T value) => throw null;\n    public System.Collections.Generic.LinkedListNode<T> FindLast(T value) => throw null;\n    public System.Collections.Generic.LinkedListNode<T> First { get => throw null; }\n    public System.Collections.Generic.LinkedList<T>.Enumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() => throw null;\n    public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public System.Collections.Generic.LinkedListNode<T> Last { get => throw null; }\n    public LinkedList(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public LinkedList() => throw null;\n    protected LinkedList(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public virtual void OnDeserialization(object sender) => throw null;\n    public void Remove(System.Collections.Generic.LinkedListNode<T> node) => throw null;\n    public bool Remove(T value) => throw null;\n    public void RemoveFirst() => throw null;\n    public void RemoveLast() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Collections.Generic.LinkedListNode<>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LinkedListNode<T>\n{\n    public LinkedListNode(T value) => throw null;\n    public System.Collections.Generic.LinkedList<T> List { get => throw null; }\n    public System.Collections.Generic.LinkedListNode<T> Next { get => throw null; }\n    public System.Collections.Generic.LinkedListNode<T> Previous { get => throw null; }\n    public T Value { get => throw null; set => throw null; }\n    public T ValueRef { get => throw null; }\n}\n\n// Generated from `System.Collections.Generic.Queue<>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Queue<T> : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>\n{\n    public void Clear() => throw null;\n    public bool Contains(T item) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(T[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public T Dequeue() => throw null;\n    public void Enqueue(T item) => throw null;\n// Generated from `System.Collections.Generic.Queue<>.Enumerator` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Enumerator : System.IDisposable, System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<T>\n{\n    public T Current { get => throw null; }\n    object System.Collections.IEnumerator.Current { get => throw null; }\n    public void Dispose() => throw null;\n    // Stub generator skipped constructor \n    public bool MoveNext() => throw null;\n    void System.Collections.IEnumerator.Reset() => throw null;\n}\n\n\n    public System.Collections.Generic.Queue<T>.Enumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() => throw null;\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public T Peek() => throw null;\n    public Queue(int capacity) => throw null;\n    public Queue(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public Queue() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public T[] ToArray() => throw null;\n    public void TrimExcess() => throw null;\n    public bool TryDequeue(out T result) => throw null;\n    public bool TryPeek(out T result) => throw null;\n}\n\n// Generated from `System.Collections.Generic.SortedDictionary<,>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SortedDictionary<TKey,TValue> : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n{\n    void System.Collections.IDictionary.Add(object key, object value) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public void Add(TKey key, TValue value) => throw null;\n    public void Clear() => throw null;\n    public System.Collections.Generic.IComparer<TKey> Comparer { get => throw null; }\n    bool System.Collections.IDictionary.Contains(object key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public bool ContainsKey(TKey key) => throw null;\n    public bool ContainsValue(TValue value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int index) => throw null;\n    public int Count { get => throw null; }\n// Generated from `System.Collections.Generic.SortedDictionary<,>.Enumerator` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Enumerator : System.IDisposable, System.Collections.IEnumerator, System.Collections.IDictionaryEnumerator, System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n{\n    public System.Collections.Generic.KeyValuePair<TKey,TValue> Current { get => throw null; }\n    object System.Collections.IEnumerator.Current { get => throw null; }\n    public void Dispose() => throw null;\n    System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get => throw null; }\n    // Stub generator skipped constructor \n    object System.Collections.IDictionaryEnumerator.Key { get => throw null; }\n    public bool MoveNext() => throw null;\n    void System.Collections.IEnumerator.Reset() => throw null;\n    object System.Collections.IDictionaryEnumerator.Value { get => throw null; }\n}\n\n\n    public System.Collections.Generic.SortedDictionary<TKey,TValue>.Enumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() => throw null;\n    bool System.Collections.IDictionary.IsFixedSize { get => throw null; }\n    bool System.Collections.IDictionary.IsReadOnly { get => throw null; }\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public TValue this[TKey key] { get => throw null; set => throw null; }\n    object System.Collections.IDictionary.this[object key] { get => throw null; set => throw null; }\n// Generated from `System.Collections.Generic.SortedDictionary<,>.KeyCollection` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class KeyCollection : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.ICollection<TKey>\n{\n    void System.Collections.Generic.ICollection<TKey>.Add(TKey item) => throw null;\n    void System.Collections.Generic.ICollection<TKey>.Clear() => throw null;\n    bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(TKey[] array, int index) => throw null;\n    public int Count { get => throw null; }\n// Generated from `System.Collections.Generic.SortedDictionary<,>.KeyCollection.Enumerator` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Enumerator : System.IDisposable, System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<TKey>\n{\n    public TKey Current { get => throw null; }\n    object System.Collections.IEnumerator.Current { get => throw null; }\n    public void Dispose() => throw null;\n    // Stub generator skipped constructor \n    public bool MoveNext() => throw null;\n    void System.Collections.IEnumerator.Reset() => throw null;\n}\n\n\n    public System.Collections.Generic.SortedDictionary<TKey,TValue>.KeyCollection.Enumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator() => throw null;\n    bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public KeyCollection(System.Collections.Generic.SortedDictionary<TKey,TValue> dictionary) => throw null;\n    bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n// Generated from `System.Collections.Generic.SortedDictionary<,>.KeyValuePairComparer` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class KeyValuePairComparer : System.Collections.Generic.Comparer<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n{\n    public override int Compare(System.Collections.Generic.KeyValuePair<TKey,TValue> x, System.Collections.Generic.KeyValuePair<TKey,TValue> y) => throw null;\n    public KeyValuePairComparer(System.Collections.Generic.IComparer<TKey> keyComparer) => throw null;\n}\n\n\n    public System.Collections.Generic.SortedDictionary<TKey,TValue>.KeyCollection Keys { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Keys { get => throw null; }\n    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get => throw null; }\n    System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get => throw null; }\n    void System.Collections.IDictionary.Remove(object key) => throw null;\n    public bool Remove(TKey key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public SortedDictionary(System.Collections.Generic.IDictionary<TKey,TValue> dictionary, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public SortedDictionary(System.Collections.Generic.IDictionary<TKey,TValue> dictionary) => throw null;\n    public SortedDictionary(System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public SortedDictionary() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public bool TryGetValue(TKey key, out TValue value) => throw null;\n// Generated from `System.Collections.Generic.SortedDictionary<,>.ValueCollection` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ValueCollection : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.ICollection<TValue>\n{\n    void System.Collections.Generic.ICollection<TValue>.Add(TValue item) => throw null;\n    void System.Collections.Generic.ICollection<TValue>.Clear() => throw null;\n    bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(TValue[] array, int index) => throw null;\n    public int Count { get => throw null; }\n// Generated from `System.Collections.Generic.SortedDictionary<,>.ValueCollection.Enumerator` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Enumerator : System.IDisposable, System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<TValue>\n{\n    public TValue Current { get => throw null; }\n    object System.Collections.IEnumerator.Current { get => throw null; }\n    public void Dispose() => throw null;\n    // Stub generator skipped constructor \n    public bool MoveNext() => throw null;\n    void System.Collections.IEnumerator.Reset() => throw null;\n}\n\n\n    public System.Collections.Generic.SortedDictionary<TKey,TValue>.ValueCollection.Enumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator() => throw null;\n    bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public ValueCollection(System.Collections.Generic.SortedDictionary<TKey,TValue> dictionary) => throw null;\n}\n\n\n    public System.Collections.Generic.SortedDictionary<TKey,TValue>.ValueCollection Values { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Values { get => throw null; }\n    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get => throw null; }\n    System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Generic.SortedList<,>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SortedList<TKey,TValue> : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n{\n    void System.Collections.IDictionary.Add(object key, object value) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public void Add(TKey key, TValue value) => throw null;\n    public int Capacity { get => throw null; set => throw null; }\n    public void Clear() => throw null;\n    public System.Collections.Generic.IComparer<TKey> Comparer { get => throw null; }\n    bool System.Collections.IDictionary.Contains(object key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public bool ContainsKey(TKey key) => throw null;\n    public bool ContainsValue(TValue value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator() => throw null;\n    public int IndexOfKey(TKey key) => throw null;\n    public int IndexOfValue(TValue value) => throw null;\n    bool System.Collections.IDictionary.IsFixedSize { get => throw null; }\n    bool System.Collections.IDictionary.IsReadOnly { get => throw null; }\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public TValue this[TKey key] { get => throw null; set => throw null; }\n    object System.Collections.IDictionary.this[object key] { get => throw null; set => throw null; }\n// Generated from `System.Collections.Generic.SortedList<,>.KeyList` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class KeyList : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IList<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.ICollection<TKey>\n{\n    public void Add(TKey key) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(TKey key) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) => throw null;\n    public void CopyTo(TKey[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<TKey> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public int IndexOf(TKey key) => throw null;\n    public void Insert(int index, TKey value) => throw null;\n    public bool IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public TKey this[int index] { get => throw null; set => throw null; }\n    public bool Remove(TKey key) => throw null;\n    public void RemoveAt(int index) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n    public System.Collections.Generic.IList<TKey> Keys { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Keys { get => throw null; }\n    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get => throw null; }\n    System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get => throw null; }\n    void System.Collections.IDictionary.Remove(object key) => throw null;\n    public bool Remove(TKey key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public void RemoveAt(int index) => throw null;\n    public SortedList(int capacity, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public SortedList(int capacity) => throw null;\n    public SortedList(System.Collections.Generic.IDictionary<TKey,TValue> dictionary, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public SortedList(System.Collections.Generic.IDictionary<TKey,TValue> dictionary) => throw null;\n    public SortedList(System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public SortedList() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public void TrimExcess() => throw null;\n    public bool TryGetValue(TKey key, out TValue value) => throw null;\n// Generated from `System.Collections.Generic.SortedList<,>.ValueList` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ValueList : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IList<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.ICollection<TValue>\n{\n    public void Add(TValue key) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(TValue value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(TValue[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public int IndexOf(TValue value) => throw null;\n    public void Insert(int index, TValue value) => throw null;\n    public bool IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public TValue this[int index] { get => throw null; set => throw null; }\n    public bool Remove(TValue value) => throw null;\n    public void RemoveAt(int index) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n    public System.Collections.Generic.IList<TValue> Values { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Values { get => throw null; }\n    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get => throw null; }\n    System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Generic.SortedSet<>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SortedSet<T> : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.ISet<T>, System.Collections.Generic.IReadOnlySet<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.ICollection<T>\n{\n    void System.Collections.Generic.ICollection<T>.Add(T item) => throw null;\n    public bool Add(T item) => throw null;\n    public virtual void Clear() => throw null;\n    public System.Collections.Generic.IComparer<T> Comparer { get => throw null; }\n    public virtual bool Contains(T item) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(T[] array, int index, int count) => throw null;\n    public void CopyTo(T[] array, int index) => throw null;\n    public void CopyTo(T[] array) => throw null;\n    public int Count { get => throw null; }\n    public static System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer(System.Collections.Generic.IEqualityComparer<T> memberEqualityComparer) => throw null;\n    public static System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer() => throw null;\n// Generated from `System.Collections.Generic.SortedSet<>.Enumerator` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Enumerator : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.IDisposable, System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<T>\n{\n    public T Current { get => throw null; }\n    object System.Collections.IEnumerator.Current { get => throw null; }\n    public void Dispose() => throw null;\n    // Stub generator skipped constructor \n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public bool MoveNext() => throw null;\n    void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) => throw null;\n    void System.Collections.IEnumerator.Reset() => throw null;\n}\n\n\n    public void ExceptWith(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    public System.Collections.Generic.SortedSet<T>.Enumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() => throw null;\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    protected virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public virtual System.Collections.Generic.SortedSet<T> GetViewBetween(T lowerValue, T upperValue) => throw null;\n    public virtual void IntersectWith(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    public bool IsProperSubsetOf(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    public bool IsProperSupersetOf(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get => throw null; }\n    public bool IsSubsetOf(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    public bool IsSupersetOf(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public T Max { get => throw null; }\n    public T Min { get => throw null; }\n    void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) => throw null;\n    protected virtual void OnDeserialization(object sender) => throw null;\n    public bool Overlaps(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    public bool Remove(T item) => throw null;\n    public int RemoveWhere(System.Predicate<T> match) => throw null;\n    public System.Collections.Generic.IEnumerable<T> Reverse() => throw null;\n    public bool SetEquals(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    public SortedSet(System.Collections.Generic.IEnumerable<T> collection, System.Collections.Generic.IComparer<T> comparer) => throw null;\n    public SortedSet(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public SortedSet(System.Collections.Generic.IComparer<T> comparer) => throw null;\n    public SortedSet() => throw null;\n    protected SortedSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public void SymmetricExceptWith(System.Collections.Generic.IEnumerable<T> other) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public bool TryGetValue(T equalValue, out T actualValue) => throw null;\n    public void UnionWith(System.Collections.Generic.IEnumerable<T> other) => throw null;\n}\n\n// Generated from `System.Collections.Generic.Stack<>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Stack<T> : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>\n{\n    public void Clear() => throw null;\n    public bool Contains(T item) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int arrayIndex) => throw null;\n    public void CopyTo(T[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n// Generated from `System.Collections.Generic.Stack<>.Enumerator` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Enumerator : System.IDisposable, System.Collections.IEnumerator, System.Collections.Generic.IEnumerator<T>\n{\n    public T Current { get => throw null; }\n    object System.Collections.IEnumerator.Current { get => throw null; }\n    public void Dispose() => throw null;\n    // Stub generator skipped constructor \n    public bool MoveNext() => throw null;\n    void System.Collections.IEnumerator.Reset() => throw null;\n}\n\n\n    public System.Collections.Generic.Stack<T>.Enumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() => throw null;\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public T Peek() => throw null;\n    public T Pop() => throw null;\n    public void Push(T item) => throw null;\n    public Stack(int capacity) => throw null;\n    public Stack(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public Stack() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public T[] ToArray() => throw null;\n    public void TrimExcess() => throw null;\n    public bool TryPeek(out T result) => throw null;\n    public bool TryPop(out T result) => throw null;\n}\n\n// Generated from `System.Collections.Generic.TreeSet<>` in `System.Collections, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TreeSet<T> : System.Collections.Generic.SortedSet<T>\n{\n    public TreeSet(System.Collections.Generic.IComparer<T> comparer) => throw null;\n    public TreeSet() => throw null;\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Collections\n{\n// Generated from `System.Collections.CaseInsensitiveComparer` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CaseInsensitiveComparer : System.Collections.IComparer\n{\n    public CaseInsensitiveComparer(System.Globalization.CultureInfo culture) => throw null;\n    public CaseInsensitiveComparer() => throw null;\n    public int Compare(object a, object b) => throw null;\n    public static System.Collections.CaseInsensitiveComparer Default { get => throw null; }\n    public static System.Collections.CaseInsensitiveComparer DefaultInvariant { get => throw null; }\n}\n\n// Generated from `System.Collections.CaseInsensitiveHashCodeProvider` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CaseInsensitiveHashCodeProvider : System.Collections.IHashCodeProvider\n{\n    public CaseInsensitiveHashCodeProvider(System.Globalization.CultureInfo culture) => throw null;\n    public CaseInsensitiveHashCodeProvider() => throw null;\n    public static System.Collections.CaseInsensitiveHashCodeProvider Default { get => throw null; }\n    public static System.Collections.CaseInsensitiveHashCodeProvider DefaultInvariant { get => throw null; }\n    public int GetHashCode(object obj) => throw null;\n}\n\n// Generated from `System.Collections.CollectionBase` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class CollectionBase : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    int System.Collections.IList.Add(object value) => throw null;\n    public int Capacity { get => throw null; set => throw null; }\n    public void Clear() => throw null;\n    protected CollectionBase(int capacity) => throw null;\n    protected CollectionBase() => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    protected System.Collections.ArrayList InnerList { get => throw null; }\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    bool System.Collections.IList.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    protected System.Collections.IList List { get => throw null; }\n    protected virtual void OnClear() => throw null;\n    protected virtual void OnClearComplete() => throw null;\n    protected virtual void OnInsert(int index, object value) => throw null;\n    protected virtual void OnInsertComplete(int index, object value) => throw null;\n    protected virtual void OnRemove(int index, object value) => throw null;\n    protected virtual void OnRemoveComplete(int index, object value) => throw null;\n    protected virtual void OnSet(int index, object oldValue, object newValue) => throw null;\n    protected virtual void OnSetComplete(int index, object oldValue, object newValue) => throw null;\n    protected virtual void OnValidate(object value) => throw null;\n    void System.Collections.IList.Remove(object value) => throw null;\n    public void RemoveAt(int index) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Collections.DictionaryBase` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DictionaryBase : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection\n{\n    void System.Collections.IDictionary.Add(object key, object value) => throw null;\n    public void Clear() => throw null;\n    bool System.Collections.IDictionary.Contains(object key) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    protected System.Collections.IDictionary Dictionary { get => throw null; }\n    protected DictionaryBase() => throw null;\n    public System.Collections.IDictionaryEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    protected System.Collections.Hashtable InnerHashtable { get => throw null; }\n    bool System.Collections.IDictionary.IsFixedSize { get => throw null; }\n    bool System.Collections.IDictionary.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    object System.Collections.IDictionary.this[object key] { get => throw null; set => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Keys { get => throw null; }\n    protected virtual void OnClear() => throw null;\n    protected virtual void OnClearComplete() => throw null;\n    protected virtual object OnGet(object key, object currentValue) => throw null;\n    protected virtual void OnInsert(object key, object value) => throw null;\n    protected virtual void OnInsertComplete(object key, object value) => throw null;\n    protected virtual void OnRemove(object key, object value) => throw null;\n    protected virtual void OnRemoveComplete(object key, object value) => throw null;\n    protected virtual void OnSet(object key, object oldValue, object newValue) => throw null;\n    protected virtual void OnSetComplete(object key, object oldValue, object newValue) => throw null;\n    protected virtual void OnValidate(object key, object value) => throw null;\n    void System.Collections.IDictionary.Remove(object key) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Queue` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Queue : System.ICloneable, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    public virtual void Clear() => throw null;\n    public virtual object Clone() => throw null;\n    public virtual bool Contains(object obj) => throw null;\n    public virtual void CopyTo(System.Array array, int index) => throw null;\n    public virtual int Count { get => throw null; }\n    public virtual object Dequeue() => throw null;\n    public virtual void Enqueue(object obj) => throw null;\n    public virtual System.Collections.IEnumerator GetEnumerator() => throw null;\n    public virtual bool IsSynchronized { get => throw null; }\n    public virtual object Peek() => throw null;\n    public Queue(int capacity, float growFactor) => throw null;\n    public Queue(int capacity) => throw null;\n    public Queue(System.Collections.ICollection col) => throw null;\n    public Queue() => throw null;\n    public virtual object SyncRoot { get => throw null; }\n    public static System.Collections.Queue Synchronized(System.Collections.Queue queue) => throw null;\n    public virtual object[] ToArray() => throw null;\n    public virtual void TrimToSize() => throw null;\n}\n\n// Generated from `System.Collections.ReadOnlyCollectionBase` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class ReadOnlyCollectionBase : System.Collections.IEnumerable, System.Collections.ICollection\n{\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public virtual int Count { get => throw null; }\n    public virtual System.Collections.IEnumerator GetEnumerator() => throw null;\n    protected System.Collections.ArrayList InnerList { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    protected ReadOnlyCollectionBase() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Collections.SortedList` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SortedList : System.ICloneable, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection\n{\n    public virtual void Add(object key, object value) => throw null;\n    public virtual int Capacity { get => throw null; set => throw null; }\n    public virtual void Clear() => throw null;\n    public virtual object Clone() => throw null;\n    public virtual bool Contains(object key) => throw null;\n    public virtual bool ContainsKey(object key) => throw null;\n    public virtual bool ContainsValue(object value) => throw null;\n    public virtual void CopyTo(System.Array array, int arrayIndex) => throw null;\n    public virtual int Count { get => throw null; }\n    public virtual object GetByIndex(int index) => throw null;\n    public virtual System.Collections.IDictionaryEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public virtual object GetKey(int index) => throw null;\n    public virtual System.Collections.IList GetKeyList() => throw null;\n    public virtual System.Collections.IList GetValueList() => throw null;\n    public virtual int IndexOfKey(object key) => throw null;\n    public virtual int IndexOfValue(object value) => throw null;\n    public virtual bool IsFixedSize { get => throw null; }\n    public virtual bool IsReadOnly { get => throw null; }\n    public virtual bool IsSynchronized { get => throw null; }\n    public virtual object this[object key] { get => throw null; set => throw null; }\n    public virtual System.Collections.ICollection Keys { get => throw null; }\n    public virtual void Remove(object key) => throw null;\n    public virtual void RemoveAt(int index) => throw null;\n    public virtual void SetByIndex(int index, object value) => throw null;\n    public SortedList(int initialCapacity) => throw null;\n    public SortedList(System.Collections.IDictionary d, System.Collections.IComparer comparer) => throw null;\n    public SortedList(System.Collections.IDictionary d) => throw null;\n    public SortedList(System.Collections.IComparer comparer, int capacity) => throw null;\n    public SortedList(System.Collections.IComparer comparer) => throw null;\n    public SortedList() => throw null;\n    public virtual object SyncRoot { get => throw null; }\n    public static System.Collections.SortedList Synchronized(System.Collections.SortedList list) => throw null;\n    public virtual void TrimToSize() => throw null;\n    public virtual System.Collections.ICollection Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Stack` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Stack : System.ICloneable, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    public virtual void Clear() => throw null;\n    public virtual object Clone() => throw null;\n    public virtual bool Contains(object obj) => throw null;\n    public virtual void CopyTo(System.Array array, int index) => throw null;\n    public virtual int Count { get => throw null; }\n    public virtual System.Collections.IEnumerator GetEnumerator() => throw null;\n    public virtual bool IsSynchronized { get => throw null; }\n    public virtual object Peek() => throw null;\n    public virtual object Pop() => throw null;\n    public virtual void Push(object obj) => throw null;\n    public Stack(int initialCapacity) => throw null;\n    public Stack(System.Collections.ICollection col) => throw null;\n    public Stack() => throw null;\n    public virtual object SyncRoot { get => throw null; }\n    public static System.Collections.Stack Synchronized(System.Collections.Stack stack) => throw null;\n    public virtual object[] ToArray() => throw null;\n}\n\nnamespace Specialized\n{\n// Generated from `System.Collections.Specialized.CollectionsUtil` in `System.Collections.NonGeneric, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CollectionsUtil\n{\n    public CollectionsUtil() => throw null;\n    public static System.Collections.Hashtable CreateCaseInsensitiveHashtable(int capacity) => throw null;\n    public static System.Collections.Hashtable CreateCaseInsensitiveHashtable(System.Collections.IDictionary d) => throw null;\n    public static System.Collections.Hashtable CreateCaseInsensitiveHashtable() => throw null;\n    public static System.Collections.SortedList CreateCaseInsensitiveSortedList() => throw null;\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Collections\n{\nnamespace Concurrent\n{\n// Generated from `System.Collections.Concurrent.BlockingCollection<>` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class BlockingCollection<T> : System.IDisposable, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>\n{\n    public void Add(T item, System.Threading.CancellationToken cancellationToken) => throw null;\n    public void Add(T item) => throw null;\n    public static int AddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, System.Threading.CancellationToken cancellationToken) => throw null;\n    public static int AddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item) => throw null;\n    public BlockingCollection(int boundedCapacity) => throw null;\n    public BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T> collection, int boundedCapacity) => throw null;\n    public BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T> collection) => throw null;\n    public BlockingCollection() => throw null;\n    public int BoundedCapacity { get => throw null; }\n    public void CompleteAdding() => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(T[] array, int index) => throw null;\n    public int Count { get => throw null; }\n    public void Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable(System.Threading.CancellationToken cancellationToken) => throw null;\n    public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() => throw null;\n    public bool IsAddingCompleted { get => throw null; }\n    public bool IsCompleted { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public T Take(System.Threading.CancellationToken cancellationToken) => throw null;\n    public T Take() => throw null;\n    public static int TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, System.Threading.CancellationToken cancellationToken) => throw null;\n    public static int TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item) => throw null;\n    public T[] ToArray() => throw null;\n    public bool TryAdd(T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) => throw null;\n    public bool TryAdd(T item, int millisecondsTimeout) => throw null;\n    public bool TryAdd(T item, System.TimeSpan timeout) => throw null;\n    public bool TryAdd(T item) => throw null;\n    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) => throw null;\n    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout) => throw null;\n    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, System.TimeSpan timeout) => throw null;\n    public static int TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, T item) => throw null;\n    public bool TryTake(out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) => throw null;\n    public bool TryTake(out T item, int millisecondsTimeout) => throw null;\n    public bool TryTake(out T item, System.TimeSpan timeout) => throw null;\n    public bool TryTake(out T item) => throw null;\n    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken) => throw null;\n    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout) => throw null;\n    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, System.TimeSpan timeout) => throw null;\n    public static int TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item) => throw null;\n}\n\n// Generated from `System.Collections.Concurrent.ConcurrentBag<>` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ConcurrentBag<T> : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Concurrent.IProducerConsumerCollection<T>\n{\n    public void Add(T item) => throw null;\n    public void Clear() => throw null;\n    public ConcurrentBag(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public ConcurrentBag() => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(T[] array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<T> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public bool IsEmpty { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public T[] ToArray() => throw null;\n    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item) => throw null;\n    public bool TryPeek(out T result) => throw null;\n    public bool TryTake(out T result) => throw null;\n}\n\n// Generated from `System.Collections.Concurrent.ConcurrentDictionary<,>` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ConcurrentDictionary<TKey,TValue> : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n{\n    void System.Collections.IDictionary.Add(object key, object value) => throw null;\n    void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public TValue AddOrUpdate<TArg>(TKey key, System.Func<TKey,TArg,TValue> addValueFactory, System.Func<TKey,TValue,TArg,TValue> updateValueFactory, TArg factoryArgument) => throw null;\n    public TValue AddOrUpdate(TKey key, TValue addValue, System.Func<TKey,TValue,TValue> updateValueFactory) => throw null;\n    public TValue AddOrUpdate(TKey key, System.Func<TKey,TValue> addValueFactory, System.Func<TKey,TValue,TValue> updateValueFactory) => throw null;\n    public void Clear() => throw null;\n    public ConcurrentDictionary(int concurrencyLevel, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public ConcurrentDictionary(int concurrencyLevel, int capacity) => throw null;\n    public ConcurrentDictionary(int concurrencyLevel, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection) => throw null;\n    public ConcurrentDictionary() => throw null;\n    bool System.Collections.IDictionary.Contains(object key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    public bool ContainsKey(TKey key) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() => throw null;\n    public TValue GetOrAdd<TArg>(TKey key, System.Func<TKey,TArg,TValue> valueFactory, TArg factoryArgument) => throw null;\n    public TValue GetOrAdd(TKey key, TValue value) => throw null;\n    public TValue GetOrAdd(TKey key, System.Func<TKey,TValue> valueFactory) => throw null;\n    public bool IsEmpty { get => throw null; }\n    bool System.Collections.IDictionary.IsFixedSize { get => throw null; }\n    bool System.Collections.IDictionary.IsReadOnly { get => throw null; }\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public TValue this[TKey key] { get => throw null; set => throw null; }\n    object System.Collections.IDictionary.this[object key] { get => throw null; set => throw null; }\n    public System.Collections.Generic.ICollection<TKey> Keys { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Keys { get => throw null; }\n    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get => throw null; }\n    void System.Collections.IDictionary.Remove(object key) => throw null;\n    bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public System.Collections.Generic.KeyValuePair<TKey,TValue>[] ToArray() => throw null;\n    public bool TryAdd(TKey key, TValue value) => throw null;\n    public bool TryGetValue(TKey key, out TValue value) => throw null;\n    public bool TryRemove(TKey key, out TValue value) => throw null;\n    public bool TryRemove(System.Collections.Generic.KeyValuePair<TKey,TValue> item) => throw null;\n    public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue) => throw null;\n    public System.Collections.Generic.ICollection<TValue> Values { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Values { get => throw null; }\n    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Concurrent.ConcurrentStack<>` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ConcurrentStack<T> : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Concurrent.IProducerConsumerCollection<T>\n{\n    public void Clear() => throw null;\n    public ConcurrentStack(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public ConcurrentStack() => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(T[] array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<T> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public bool IsEmpty { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public void Push(T item) => throw null;\n    public void PushRange(T[] items, int startIndex, int count) => throw null;\n    public void PushRange(T[] items) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public T[] ToArray() => throw null;\n    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T item) => throw null;\n    public bool TryPeek(out T result) => throw null;\n    public bool TryPop(out T result) => throw null;\n    public int TryPopRange(T[] items, int startIndex, int count) => throw null;\n    public int TryPopRange(T[] items) => throw null;\n    bool System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T item) => throw null;\n}\n\n// Generated from `System.Collections.Concurrent.EnumerablePartitionerOptions` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum EnumerablePartitionerOptions\n{\n    // Stub generator skipped constructor \n    NoBuffering,\n    None,\n}\n\n// Generated from `System.Collections.Concurrent.OrderablePartitioner<>` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class OrderablePartitioner<TSource> : System.Collections.Concurrent.Partitioner<TSource>\n{\n    public override System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions() => throw null;\n    public virtual System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64,TSource>> GetOrderableDynamicPartitions() => throw null;\n    public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>> GetOrderablePartitions(int partitionCount);\n    public override System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions(int partitionCount) => throw null;\n    public bool KeysNormalized { get => throw null; }\n    public bool KeysOrderedAcrossPartitions { get => throw null; }\n    public bool KeysOrderedInEachPartition { get => throw null; }\n    protected OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) => throw null;\n}\n\n// Generated from `System.Collections.Concurrent.Partitioner` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class Partitioner\n{\n    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(TSource[] array, bool loadBalance) => throw null;\n    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IList<TSource> list, bool loadBalance) => throw null;\n    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions) => throw null;\n    public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource>(System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int,int>> Create(int fromInclusive, int toExclusive, int rangeSize) => throw null;\n    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<int,int>> Create(int fromInclusive, int toExclusive) => throw null;\n    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>> Create(System.Int64 fromInclusive, System.Int64 toExclusive, System.Int64 rangeSize) => throw null;\n    public static System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>> Create(System.Int64 fromInclusive, System.Int64 toExclusive) => throw null;\n}\n\n// Generated from `System.Collections.Concurrent.Partitioner<>` in `System.Collections.Concurrent, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class Partitioner<TSource>\n{\n    public virtual System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions() => throw null;\n    public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions(int partitionCount);\n    protected Partitioner() => throw null;\n    public virtual bool SupportsDynamicPartitions { get => throw null; }\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Collections\n{\nnamespace ObjectModel\n{\n// Generated from `System.Collections.ObjectModel.KeyedCollection<,>` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class KeyedCollection<TKey,TItem> : System.Collections.ObjectModel.Collection<TItem>\n{\n    protected void ChangeItemKey(TItem item, TKey newKey) => throw null;\n    protected override void ClearItems() => throw null;\n    public System.Collections.Generic.IEqualityComparer<TKey> Comparer { get => throw null; }\n    public bool Contains(TKey key) => throw null;\n    protected System.Collections.Generic.IDictionary<TKey,TItem> Dictionary { get => throw null; }\n    protected abstract TKey GetKeyForItem(TItem item);\n    protected override void InsertItem(int index, TItem item) => throw null;\n    public TItem this[TKey key] { get => throw null; }\n    protected KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold) => throw null;\n    protected KeyedCollection(System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    protected KeyedCollection() => throw null;\n    public bool Remove(TKey key) => throw null;\n    protected override void RemoveItem(int index) => throw null;\n    protected override void SetItem(int index, TItem item) => throw null;\n    public bool TryGetValue(TKey key, out TItem item) => throw null;\n}\n\n// Generated from `System.Collections.ObjectModel.ObservableCollection<>` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ObservableCollection<T> : System.Collections.ObjectModel.Collection<T>, System.ComponentModel.INotifyPropertyChanged, System.Collections.Specialized.INotifyCollectionChanged\n{\n    protected System.IDisposable BlockReentrancy() => throw null;\n    protected void CheckReentrancy() => throw null;\n    protected override void ClearItems() => throw null;\n    public virtual event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged;\n    protected override void InsertItem(int index, T item) => throw null;\n    public void Move(int oldIndex, int newIndex) => throw null;\n    protected virtual void MoveItem(int oldIndex, int newIndex) => throw null;\n    public ObservableCollection(System.Collections.Generic.List<T> list) => throw null;\n    public ObservableCollection(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public ObservableCollection() => throw null;\n    protected virtual void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) => throw null;\n    protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) => throw null;\n    protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\n    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;\n    protected override void RemoveItem(int index) => throw null;\n    protected override void SetItem(int index, T item) => throw null;\n}\n\n// Generated from `System.Collections.ObjectModel.ReadOnlyDictionary<,>` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ReadOnlyDictionary<TKey,TValue> : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n{\n    void System.Collections.IDictionary.Add(object key, object value) => throw null;\n    void System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey key, TValue value) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey,TValue> item) => throw null;\n    void System.Collections.IDictionary.Clear() => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear() => throw null;\n    bool System.Collections.IDictionary.Contains(object key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey,TValue> item) => throw null;\n    public bool ContainsKey(TKey key) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    protected System.Collections.Generic.IDictionary<TKey,TValue> Dictionary { get => throw null; }\n    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() => throw null;\n    bool System.Collections.IDictionary.IsFixedSize { get => throw null; }\n    bool System.Collections.IDictionary.IsReadOnly { get => throw null; }\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public TValue this[TKey key] { get => throw null; }\n    object System.Collections.IDictionary.this[object key] { get => throw null; set => throw null; }\n    TValue System.Collections.Generic.IDictionary<TKey,TValue>.this[TKey key] { get => throw null; set => throw null; }\n// Generated from `System.Collections.ObjectModel.ReadOnlyDictionary<,>.KeyCollection` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class KeyCollection : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.ICollection<TKey>\n{\n    void System.Collections.Generic.ICollection<TKey>.Add(TKey item) => throw null;\n    void System.Collections.Generic.ICollection<TKey>.Clear() => throw null;\n    bool System.Collections.Generic.ICollection<TKey>.Contains(TKey item) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(TKey[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<TKey> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    bool System.Collections.Generic.ICollection<TKey>.Remove(TKey item) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n    public System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>.KeyCollection Keys { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Keys { get => throw null; }\n    System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get => throw null; }\n    System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get => throw null; }\n    public ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey,TValue> dictionary) => throw null;\n    void System.Collections.IDictionary.Remove(object key) => throw null;\n    bool System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey,TValue> item) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public bool TryGetValue(TKey key, out TValue value) => throw null;\n// Generated from `System.Collections.ObjectModel.ReadOnlyDictionary<,>.ValueCollection` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ValueCollection : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.ICollection<TValue>\n{\n    void System.Collections.Generic.ICollection<TValue>.Add(TValue item) => throw null;\n    void System.Collections.Generic.ICollection<TValue>.Clear() => throw null;\n    bool System.Collections.Generic.ICollection<TValue>.Contains(TValue item) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(TValue[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    bool System.Collections.Generic.ICollection<TValue>.Remove(TValue item) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n    public System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>.ValueCollection Values { get => throw null; }\n    System.Collections.ICollection System.Collections.IDictionary.Values { get => throw null; }\n    System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get => throw null; }\n    System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get => throw null; }\n}\n\n// Generated from `System.Collections.ObjectModel.ReadOnlyObservableCollection<>` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ReadOnlyObservableCollection<T> : System.Collections.ObjectModel.ReadOnlyCollection<T>, System.ComponentModel.INotifyPropertyChanged, System.Collections.Specialized.INotifyCollectionChanged\n{\n    protected virtual event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged;\n    event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged;\n    protected virtual void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs args) => throw null;\n    protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs args) => throw null;\n    protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\n    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;\n    public ReadOnlyObservableCollection(System.Collections.ObjectModel.ObservableCollection<T> list) : base(default(System.Collections.Generic.IList<T>)) => throw null;\n}\n\n}\nnamespace Specialized\n{\n// Generated from `System.Collections.Specialized.INotifyCollectionChanged` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface INotifyCollectionChanged\n{\n    event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged;\n}\n\n// Generated from `System.Collections.Specialized.NotifyCollectionChangedAction` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum NotifyCollectionChangedAction\n{\n    Add,\n    Move,\n    // Stub generator skipped constructor \n    Remove,\n    Replace,\n    Reset,\n}\n\n// Generated from `System.Collections.Specialized.NotifyCollectionChangedEventArgs` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NotifyCollectionChangedEventArgs : System.EventArgs\n{\n    public System.Collections.Specialized.NotifyCollectionChangedAction Action { get => throw null; }\n    public System.Collections.IList NewItems { get => throw null; }\n    public int NewStartingIndex { get => throw null; }\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object newItem, object oldItem, int index) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object newItem, object oldItem) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object changedItem, int index) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, object changedItem) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList newItems, System.Collections.IList oldItems, int startingIndex) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList newItems, System.Collections.IList oldItems) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList changedItems, int startingIndex) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList changedItems, int index, int oldIndex) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action, System.Collections.IList changedItems) => throw null;\n    public NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction action) => throw null;\n    public System.Collections.IList OldItems { get => throw null; }\n    public int OldStartingIndex { get => throw null; }\n}\n\n// Generated from `System.Collections.Specialized.NotifyCollectionChangedEventHandler` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void NotifyCollectionChangedEventHandler(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e);\n\n}\n}\nnamespace ComponentModel\n{\n// Generated from `System.ComponentModel.DataErrorsChangedEventArgs` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DataErrorsChangedEventArgs : System.EventArgs\n{\n    public DataErrorsChangedEventArgs(string propertyName) => throw null;\n    public virtual string PropertyName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.INotifyDataErrorInfo` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface INotifyDataErrorInfo\n{\n    event System.EventHandler<System.ComponentModel.DataErrorsChangedEventArgs> ErrorsChanged;\n    System.Collections.IEnumerable GetErrors(string propertyName) => throw null;\n    bool HasErrors { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.INotifyPropertyChanged` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface INotifyPropertyChanged\n{\n    event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\n}\n\n// Generated from `System.ComponentModel.INotifyPropertyChanging` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface INotifyPropertyChanging\n{\n    event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;\n}\n\n// Generated from `System.ComponentModel.PropertyChangedEventArgs` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PropertyChangedEventArgs : System.EventArgs\n{\n    public PropertyChangedEventArgs(string propertyName) => throw null;\n    public virtual string PropertyName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.PropertyChangedEventHandler` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void PropertyChangedEventHandler(object sender, System.ComponentModel.PropertyChangedEventArgs e);\n\n// Generated from `System.ComponentModel.PropertyChangingEventArgs` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PropertyChangingEventArgs : System.EventArgs\n{\n    public PropertyChangingEventArgs(string propertyName) => throw null;\n    public virtual string PropertyName { get => throw null; }\n}\n\n// Generated from `System.ComponentModel.PropertyChangingEventHandler` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate void PropertyChangingEventHandler(object sender, System.ComponentModel.PropertyChangingEventArgs e);\n\n// Generated from `System.ComponentModel.TypeConverterAttribute` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TypeConverterAttribute : System.Attribute\n{\n    public string ConverterTypeName { get => throw null; }\n    public static System.ComponentModel.TypeConverterAttribute Default;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public TypeConverterAttribute(string typeName) => throw null;\n    public TypeConverterAttribute(System.Type type) => throw null;\n    public TypeConverterAttribute() => throw null;\n}\n\n// Generated from `System.ComponentModel.TypeDescriptionProviderAttribute` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TypeDescriptionProviderAttribute : System.Attribute\n{\n    public TypeDescriptionProviderAttribute(string typeName) => throw null;\n    public TypeDescriptionProviderAttribute(System.Type type) => throw null;\n    public string TypeName { get => throw null; }\n}\n\n}\nnamespace Reflection\n{\n// Generated from `System.Reflection.ICustomTypeProvider` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ICustomTypeProvider\n{\n    System.Type GetCustomType() => throw null;\n}\n\n}\nnamespace Windows\n{\nnamespace Input\n{\n// Generated from `System.Windows.Input.ICommand` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ICommand\n{\n    bool CanExecute(object parameter) => throw null;\n    event System.EventHandler CanExecuteChanged;\n    void Execute(object parameter) => throw null;\n}\n\n}\nnamespace Markup\n{\n// Generated from `System.Windows.Markup.ValueSerializerAttribute` in `System.ObjectModel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ValueSerializerAttribute : System.Attribute\n{\n    public ValueSerializerAttribute(string valueSerializerTypeName) => throw null;\n    public ValueSerializerAttribute(System.Type valueSerializerType) => throw null;\n    public System.Type ValueSerializerType { get => throw null; }\n    public string ValueSerializerTypeName { get => throw null; }\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Collections\n{\nnamespace Specialized\n{\n// Generated from `System.Collections.Specialized.BitVector32` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct BitVector32\n{\n    public BitVector32(int data) => throw null;\n    public BitVector32(System.Collections.Specialized.BitVector32 value) => throw null;\n    // Stub generator skipped constructor \n    public static int CreateMask(int previous) => throw null;\n    public static int CreateMask() => throw null;\n    public static System.Collections.Specialized.BitVector32.Section CreateSection(System.Int16 maxValue, System.Collections.Specialized.BitVector32.Section previous) => throw null;\n    public static System.Collections.Specialized.BitVector32.Section CreateSection(System.Int16 maxValue) => throw null;\n    public int Data { get => throw null; }\n    public override bool Equals(object o) => throw null;\n    public override int GetHashCode() => throw null;\n    public int this[System.Collections.Specialized.BitVector32.Section section] { get => throw null; set => throw null; }\n    public bool this[int bit] { get => throw null; set => throw null; }\n// Generated from `System.Collections.Specialized.BitVector32.Section` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct Section\n{\n    public static bool operator !=(System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b) => throw null;\n    public static bool operator ==(System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b) => throw null;\n    public override bool Equals(object o) => throw null;\n    public bool Equals(System.Collections.Specialized.BitVector32.Section obj) => throw null;\n    public override int GetHashCode() => throw null;\n    public System.Int16 Mask { get => throw null; }\n    public System.Int16 Offset { get => throw null; }\n    // Stub generator skipped constructor \n    public static string ToString(System.Collections.Specialized.BitVector32.Section value) => throw null;\n    public override string ToString() => throw null;\n}\n\n\n    public static string ToString(System.Collections.Specialized.BitVector32 value) => throw null;\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.Collections.Specialized.HybridDictionary` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class HybridDictionary : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection\n{\n    public void Add(object key, object value) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(object key) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IDictionaryEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public HybridDictionary(int initialSize, bool caseInsensitive) => throw null;\n    public HybridDictionary(int initialSize) => throw null;\n    public HybridDictionary(bool caseInsensitive) => throw null;\n    public HybridDictionary() => throw null;\n    public bool IsFixedSize { get => throw null; }\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public object this[object key] { get => throw null; set => throw null; }\n    public System.Collections.ICollection Keys { get => throw null; }\n    public void Remove(object key) => throw null;\n    public object SyncRoot { get => throw null; }\n    public System.Collections.ICollection Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Specialized.IOrderedDictionary` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IOrderedDictionary : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection\n{\n    System.Collections.IDictionaryEnumerator GetEnumerator() => throw null;\n    void Insert(int index, object key, object value) => throw null;\n    object this[int index] { get => throw null; set => throw null; }\n    void RemoveAt(int index) => throw null;\n}\n\n// Generated from `System.Collections.Specialized.ListDictionary` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ListDictionary : System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection\n{\n    public void Add(object key, object value) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(object key) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n// Generated from `System.Collections.Specialized.ListDictionary.DictionaryNode` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DictionaryNode\n{\n    public DictionaryNode() => throw null;\n    public object key;\n    public System.Collections.Specialized.ListDictionary.DictionaryNode next;\n    public object value;\n}\n\n\n    public System.Collections.IDictionaryEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public bool IsFixedSize { get => throw null; }\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public object this[object key] { get => throw null; set => throw null; }\n    public System.Collections.ICollection Keys { get => throw null; }\n    public ListDictionary(System.Collections.IComparer comparer) => throw null;\n    public ListDictionary() => throw null;\n    public void Remove(object key) => throw null;\n    public object SyncRoot { get => throw null; }\n    public System.Collections.ICollection Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Specialized.NameObjectCollectionBase` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class NameObjectCollectionBase : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    protected void BaseAdd(string name, object value) => throw null;\n    protected void BaseClear() => throw null;\n    protected object BaseGet(string name) => throw null;\n    protected object BaseGet(int index) => throw null;\n    protected string[] BaseGetAllKeys() => throw null;\n    protected object[] BaseGetAllValues(System.Type type) => throw null;\n    protected object[] BaseGetAllValues() => throw null;\n    protected string BaseGetKey(int index) => throw null;\n    protected bool BaseHasKeys() => throw null;\n    protected void BaseRemove(string name) => throw null;\n    protected void BaseRemoveAt(int index) => throw null;\n    protected void BaseSet(string name, object value) => throw null;\n    protected void BaseSet(int index, object value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public virtual int Count { get => throw null; }\n    public virtual System.Collections.IEnumerator GetEnumerator() => throw null;\n    public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    protected bool IsReadOnly { get => throw null; set => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public virtual System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get => throw null; }\n// Generated from `System.Collections.Specialized.NameObjectCollectionBase.KeysCollection` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class KeysCollection : System.Collections.IEnumerable, System.Collections.ICollection\n{\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public virtual string Get(int index) => throw null;\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public string this[int index] { get => throw null; }\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n\n    protected NameObjectCollectionBase(int capacity, System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer) => throw null;\n    protected NameObjectCollectionBase(int capacity, System.Collections.IEqualityComparer equalityComparer) => throw null;\n    protected NameObjectCollectionBase(int capacity) => throw null;\n    protected NameObjectCollectionBase(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    protected NameObjectCollectionBase(System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer) => throw null;\n    protected NameObjectCollectionBase(System.Collections.IEqualityComparer equalityComparer) => throw null;\n    protected NameObjectCollectionBase() => throw null;\n    public virtual void OnDeserialization(object sender) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Collections.Specialized.NameValueCollection` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NameValueCollection : System.Collections.Specialized.NameObjectCollectionBase\n{\n    public void Add(System.Collections.Specialized.NameValueCollection c) => throw null;\n    public virtual void Add(string name, string value) => throw null;\n    public virtual string[] AllKeys { get => throw null; }\n    public virtual void Clear() => throw null;\n    public void CopyTo(System.Array dest, int index) => throw null;\n    public virtual string Get(string name) => throw null;\n    public virtual string Get(int index) => throw null;\n    public virtual string GetKey(int index) => throw null;\n    public virtual string[] GetValues(string name) => throw null;\n    public virtual string[] GetValues(int index) => throw null;\n    public bool HasKeys() => throw null;\n    protected void InvalidateCachedArrays() => throw null;\n    public string this[string name] { get => throw null; set => throw null; }\n    public string this[int index] { get => throw null; }\n    public NameValueCollection(int capacity, System.Collections.Specialized.NameValueCollection col) => throw null;\n    public NameValueCollection(int capacity, System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer) => throw null;\n    public NameValueCollection(int capacity, System.Collections.IEqualityComparer equalityComparer) => throw null;\n    public NameValueCollection(int capacity) => throw null;\n    public NameValueCollection(System.Collections.Specialized.NameValueCollection col) => throw null;\n    public NameValueCollection(System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer) => throw null;\n    public NameValueCollection(System.Collections.IEqualityComparer equalityComparer) => throw null;\n    public NameValueCollection() => throw null;\n    protected NameValueCollection(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public virtual void Remove(string name) => throw null;\n    public virtual void Set(string name, string value) => throw null;\n}\n\n// Generated from `System.Collections.Specialized.OrderedDictionary` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class OrderedDictionary : System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.Collections.Specialized.IOrderedDictionary, System.Collections.IEnumerable, System.Collections.IDictionary, System.Collections.ICollection\n{\n    public void Add(object key, object value) => throw null;\n    public System.Collections.Specialized.OrderedDictionary AsReadOnly() => throw null;\n    public void Clear() => throw null;\n    public bool Contains(object key) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public virtual System.Collections.IDictionaryEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public void Insert(int index, object key, object value) => throw null;\n    bool System.Collections.IDictionary.IsFixedSize { get => throw null; }\n    public bool IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public object this[object key] { get => throw null; set => throw null; }\n    public object this[int index] { get => throw null; set => throw null; }\n    public System.Collections.ICollection Keys { get => throw null; }\n    void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) => throw null;\n    protected virtual void OnDeserialization(object sender) => throw null;\n    public OrderedDictionary(int capacity, System.Collections.IEqualityComparer comparer) => throw null;\n    public OrderedDictionary(int capacity) => throw null;\n    public OrderedDictionary(System.Collections.IEqualityComparer comparer) => throw null;\n    public OrderedDictionary() => throw null;\n    protected OrderedDictionary(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public void Remove(object key) => throw null;\n    public void RemoveAt(int index) => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public System.Collections.ICollection Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Specialized.StringCollection` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class StringCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection\n{\n    public int Add(string value) => throw null;\n    int System.Collections.IList.Add(object value) => throw null;\n    public void AddRange(string[] value) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(string value) => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(string[] array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Specialized.StringEnumerator GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public int IndexOf(string value) => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    public void Insert(int index, string value) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    public bool IsReadOnly { get => throw null; }\n    bool System.Collections.IList.IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public string this[int index] { get => throw null; set => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    void System.Collections.IList.Remove(object value) => throw null;\n    public void Remove(string value) => throw null;\n    public void RemoveAt(int index) => throw null;\n    public StringCollection() => throw null;\n    public object SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Collections.Specialized.StringDictionary` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class StringDictionary : System.Collections.IEnumerable\n{\n    public virtual void Add(string key, string value) => throw null;\n    public virtual void Clear() => throw null;\n    public virtual bool ContainsKey(string key) => throw null;\n    public virtual bool ContainsValue(string value) => throw null;\n    public virtual void CopyTo(System.Array array, int index) => throw null;\n    public virtual int Count { get => throw null; }\n    public virtual System.Collections.IEnumerator GetEnumerator() => throw null;\n    public virtual bool IsSynchronized { get => throw null; }\n    public virtual string this[string key] { get => throw null; set => throw null; }\n    public virtual System.Collections.ICollection Keys { get => throw null; }\n    public virtual void Remove(string key) => throw null;\n    public StringDictionary() => throw null;\n    public virtual object SyncRoot { get => throw null; }\n    public virtual System.Collections.ICollection Values { get => throw null; }\n}\n\n// Generated from `System.Collections.Specialized.StringEnumerator` in `System.Collections.Specialized, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class StringEnumerator\n{\n    public string Current { get => throw null; }\n    public bool MoveNext() => throw null;\n    public void Reset() => throw null;\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Dynamic\n{\n// Generated from `System.Dynamic.BinaryOperationBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class BinaryOperationBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    protected BinaryOperationBinder(System.Linq.Expressions.ExpressionType operation) => throw null;\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject FallbackBinaryOperation(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject arg, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackBinaryOperation(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject arg) => throw null;\n    public System.Linq.Expressions.ExpressionType Operation { get => throw null; }\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.BindingRestrictions` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class BindingRestrictions\n{\n    public static System.Dynamic.BindingRestrictions Combine(System.Collections.Generic.IList<System.Dynamic.DynamicMetaObject> contributingObjects) => throw null;\n    public static System.Dynamic.BindingRestrictions Empty;\n    public static System.Dynamic.BindingRestrictions GetExpressionRestriction(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Dynamic.BindingRestrictions GetInstanceRestriction(System.Linq.Expressions.Expression expression, object instance) => throw null;\n    public static System.Dynamic.BindingRestrictions GetTypeRestriction(System.Linq.Expressions.Expression expression, System.Type type) => throw null;\n    public System.Dynamic.BindingRestrictions Merge(System.Dynamic.BindingRestrictions restrictions) => throw null;\n    public System.Linq.Expressions.Expression ToExpression() => throw null;\n}\n\n// Generated from `System.Dynamic.CallInfo` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CallInfo\n{\n    public int ArgumentCount { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<string> ArgumentNames { get => throw null; }\n    public CallInfo(int argCount, params string[] argNames) => throw null;\n    public CallInfo(int argCount, System.Collections.Generic.IEnumerable<string> argNames) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public override int GetHashCode() => throw null;\n}\n\n// Generated from `System.Dynamic.ConvertBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class ConvertBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    protected ConvertBinder(System.Type type, bool @explicit) => throw null;\n    public bool Explicit { get => throw null; }\n    public abstract System.Dynamic.DynamicMetaObject FallbackConvert(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackConvert(System.Dynamic.DynamicMetaObject target) => throw null;\n    public override System.Type ReturnType { get => throw null; }\n    public System.Type Type { get => throw null; }\n}\n\n// Generated from `System.Dynamic.CreateInstanceBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class CreateInstanceBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public System.Dynamic.CallInfo CallInfo { get => throw null; }\n    protected CreateInstanceBinder(System.Dynamic.CallInfo callInfo) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject FallbackCreateInstance(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackCreateInstance(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.DeleteIndexBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DeleteIndexBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public System.Dynamic.CallInfo CallInfo { get => throw null; }\n    protected DeleteIndexBinder(System.Dynamic.CallInfo callInfo) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject FallbackDeleteIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackDeleteIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes) => throw null;\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.DeleteMemberBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DeleteMemberBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    protected DeleteMemberBinder(string name, bool ignoreCase) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject FallbackDeleteMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackDeleteMember(System.Dynamic.DynamicMetaObject target) => throw null;\n    public bool IgnoreCase { get => throw null; }\n    public string Name { get => throw null; }\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.DynamicMetaObject` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DynamicMetaObject\n{\n    public virtual System.Dynamic.DynamicMetaObject BindBinaryOperation(System.Dynamic.BinaryOperationBinder binder, System.Dynamic.DynamicMetaObject arg) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindConvert(System.Dynamic.ConvertBinder binder) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindCreateInstance(System.Dynamic.CreateInstanceBinder binder, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindDeleteIndex(System.Dynamic.DeleteIndexBinder binder, System.Dynamic.DynamicMetaObject[] indexes) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindDeleteMember(System.Dynamic.DeleteMemberBinder binder) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindGetIndex(System.Dynamic.GetIndexBinder binder, System.Dynamic.DynamicMetaObject[] indexes) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindGetMember(System.Dynamic.GetMemberBinder binder) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindInvoke(System.Dynamic.InvokeBinder binder, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindInvokeMember(System.Dynamic.InvokeMemberBinder binder, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindSetIndex(System.Dynamic.SetIndexBinder binder, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject value) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindSetMember(System.Dynamic.SetMemberBinder binder, System.Dynamic.DynamicMetaObject value) => throw null;\n    public virtual System.Dynamic.DynamicMetaObject BindUnaryOperation(System.Dynamic.UnaryOperationBinder binder) => throw null;\n    public static System.Dynamic.DynamicMetaObject Create(object value, System.Linq.Expressions.Expression expression) => throw null;\n    public DynamicMetaObject(System.Linq.Expressions.Expression expression, System.Dynamic.BindingRestrictions restrictions, object value) => throw null;\n    public DynamicMetaObject(System.Linq.Expressions.Expression expression, System.Dynamic.BindingRestrictions restrictions) => throw null;\n    public static System.Dynamic.DynamicMetaObject[] EmptyMetaObjects;\n    public System.Linq.Expressions.Expression Expression { get => throw null; }\n    public virtual System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames() => throw null;\n    public bool HasValue { get => throw null; }\n    public System.Type LimitType { get => throw null; }\n    public System.Dynamic.BindingRestrictions Restrictions { get => throw null; }\n    public System.Type RuntimeType { get => throw null; }\n    public object Value { get => throw null; }\n}\n\n// Generated from `System.Dynamic.DynamicMetaObjectBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DynamicMetaObjectBinder : System.Runtime.CompilerServices.CallSiteBinder\n{\n    public override System.Linq.Expressions.Expression Bind(object[] args, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> parameters, System.Linq.Expressions.LabelTarget returnLabel) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args);\n    public System.Dynamic.DynamicMetaObject Defer(params System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public System.Dynamic.DynamicMetaObject Defer(System.Dynamic.DynamicMetaObject target, params System.Dynamic.DynamicMetaObject[] args) => throw null;\n    protected DynamicMetaObjectBinder() => throw null;\n    public System.Linq.Expressions.Expression GetUpdateExpression(System.Type type) => throw null;\n    public virtual System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.DynamicObject` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DynamicObject : System.Dynamic.IDynamicMetaObjectProvider\n{\n    protected DynamicObject() => throw null;\n    public virtual System.Collections.Generic.IEnumerable<string> GetDynamicMemberNames() => throw null;\n    public virtual System.Dynamic.DynamicMetaObject GetMetaObject(System.Linq.Expressions.Expression parameter) => throw null;\n    public virtual bool TryBinaryOperation(System.Dynamic.BinaryOperationBinder binder, object arg, out object result) => throw null;\n    public virtual bool TryConvert(System.Dynamic.ConvertBinder binder, out object result) => throw null;\n    public virtual bool TryCreateInstance(System.Dynamic.CreateInstanceBinder binder, object[] args, out object result) => throw null;\n    public virtual bool TryDeleteIndex(System.Dynamic.DeleteIndexBinder binder, object[] indexes) => throw null;\n    public virtual bool TryDeleteMember(System.Dynamic.DeleteMemberBinder binder) => throw null;\n    public virtual bool TryGetIndex(System.Dynamic.GetIndexBinder binder, object[] indexes, out object result) => throw null;\n    public virtual bool TryGetMember(System.Dynamic.GetMemberBinder binder, out object result) => throw null;\n    public virtual bool TryInvoke(System.Dynamic.InvokeBinder binder, object[] args, out object result) => throw null;\n    public virtual bool TryInvokeMember(System.Dynamic.InvokeMemberBinder binder, object[] args, out object result) => throw null;\n    public virtual bool TrySetIndex(System.Dynamic.SetIndexBinder binder, object[] indexes, object value) => throw null;\n    public virtual bool TrySetMember(System.Dynamic.SetMemberBinder binder, object value) => throw null;\n    public virtual bool TryUnaryOperation(System.Dynamic.UnaryOperationBinder binder, out object result) => throw null;\n}\n\n// Generated from `System.Dynamic.ExpandoObject` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ExpandoObject : System.Dynamic.IDynamicMetaObjectProvider, System.ComponentModel.INotifyPropertyChanged, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>, System.Collections.Generic.IDictionary<string,object>, System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>\n{\n    void System.Collections.Generic.IDictionary<string,object>.Add(string key, object value) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>.Add(System.Collections.Generic.KeyValuePair<string,object> item) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>.Clear() => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>.Contains(System.Collections.Generic.KeyValuePair<string,object> item) => throw null;\n    bool System.Collections.Generic.IDictionary<string,object>.ContainsKey(string key) => throw null;\n    void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>.CopyTo(System.Collections.Generic.KeyValuePair<string,object>[] array, int arrayIndex) => throw null;\n    int System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>.Count { get => throw null; }\n    public ExpandoObject() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,object>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>>.GetEnumerator() => throw null;\n    System.Dynamic.DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression parameter) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>.IsReadOnly { get => throw null; }\n    object System.Collections.Generic.IDictionary<string,object>.this[string key] { get => throw null; set => throw null; }\n    System.Collections.Generic.ICollection<string> System.Collections.Generic.IDictionary<string,object>.Keys { get => throw null; }\n    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;\n    bool System.Collections.Generic.IDictionary<string,object>.Remove(string key) => throw null;\n    bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,object>>.Remove(System.Collections.Generic.KeyValuePair<string,object> item) => throw null;\n    bool System.Collections.Generic.IDictionary<string,object>.TryGetValue(string key, out object value) => throw null;\n    System.Collections.Generic.ICollection<object> System.Collections.Generic.IDictionary<string,object>.Values { get => throw null; }\n}\n\n// Generated from `System.Dynamic.GetIndexBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class GetIndexBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public System.Dynamic.CallInfo CallInfo { get => throw null; }\n    public abstract System.Dynamic.DynamicMetaObject FallbackGetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackGetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes) => throw null;\n    protected GetIndexBinder(System.Dynamic.CallInfo callInfo) => throw null;\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.GetMemberBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class GetMemberBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject FallbackGetMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackGetMember(System.Dynamic.DynamicMetaObject target) => throw null;\n    protected GetMemberBinder(string name, bool ignoreCase) => throw null;\n    public bool IgnoreCase { get => throw null; }\n    public string Name { get => throw null; }\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.IDynamicMetaObjectProvider` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDynamicMetaObjectProvider\n{\n    System.Dynamic.DynamicMetaObject GetMetaObject(System.Linq.Expressions.Expression parameter) => throw null;\n}\n\n// Generated from `System.Dynamic.IInvokeOnGetBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IInvokeOnGetBinder\n{\n    bool InvokeOnGet { get => throw null; }\n}\n\n// Generated from `System.Dynamic.InvokeBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class InvokeBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public System.Dynamic.CallInfo CallInfo { get => throw null; }\n    public abstract System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    protected InvokeBinder(System.Dynamic.CallInfo callInfo) => throw null;\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.InvokeMemberBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class InvokeMemberBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public System.Dynamic.CallInfo CallInfo { get => throw null; }\n    public abstract System.Dynamic.DynamicMetaObject FallbackInvoke(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public abstract System.Dynamic.DynamicMetaObject FallbackInvokeMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackInvokeMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public bool IgnoreCase { get => throw null; }\n    protected InvokeMemberBinder(string name, bool ignoreCase, System.Dynamic.CallInfo callInfo) => throw null;\n    public string Name { get => throw null; }\n    public override System.Type ReturnType { get => throw null; }\n}\n\n// Generated from `System.Dynamic.SetIndexBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class SetIndexBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public System.Dynamic.CallInfo CallInfo { get => throw null; }\n    public abstract System.Dynamic.DynamicMetaObject FallbackSetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject value, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackSetIndex(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] indexes, System.Dynamic.DynamicMetaObject value) => throw null;\n    public override System.Type ReturnType { get => throw null; }\n    protected SetIndexBinder(System.Dynamic.CallInfo callInfo) => throw null;\n}\n\n// Generated from `System.Dynamic.SetMemberBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class SetMemberBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject FallbackSetMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject value, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackSetMember(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject value) => throw null;\n    public bool IgnoreCase { get => throw null; }\n    public string Name { get => throw null; }\n    public override System.Type ReturnType { get => throw null; }\n    protected SetMemberBinder(string name, bool ignoreCase) => throw null;\n}\n\n// Generated from `System.Dynamic.UnaryOperationBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class UnaryOperationBinder : System.Dynamic.DynamicMetaObjectBinder\n{\n    public override System.Dynamic.DynamicMetaObject Bind(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject[] args) => throw null;\n    public abstract System.Dynamic.DynamicMetaObject FallbackUnaryOperation(System.Dynamic.DynamicMetaObject target, System.Dynamic.DynamicMetaObject errorSuggestion);\n    public System.Dynamic.DynamicMetaObject FallbackUnaryOperation(System.Dynamic.DynamicMetaObject target) => throw null;\n    public System.Linq.Expressions.ExpressionType Operation { get => throw null; }\n    public override System.Type ReturnType { get => throw null; }\n    protected UnaryOperationBinder(System.Linq.Expressions.ExpressionType operation) => throw null;\n}\n\n}\nnamespace Linq\n{\n// Generated from `System.Linq.IOrderedQueryable` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IOrderedQueryable : System.Linq.IQueryable, System.Collections.IEnumerable\n{\n}\n\n// Generated from `System.Linq.IOrderedQueryable<>` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IOrderedQueryable<T> : System.Linq.IQueryable<T>, System.Linq.IQueryable, System.Linq.IOrderedQueryable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<T>\n{\n}\n\n// Generated from `System.Linq.IQueryProvider` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IQueryProvider\n{\n    System.Linq.IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression) => throw null;\n    System.Linq.IQueryable CreateQuery(System.Linq.Expressions.Expression expression) => throw null;\n    object Execute(System.Linq.Expressions.Expression expression) => throw null;\n    TResult Execute<TResult>(System.Linq.Expressions.Expression expression) => throw null;\n}\n\n// Generated from `System.Linq.IQueryable` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IQueryable : System.Collections.IEnumerable\n{\n    System.Type ElementType { get => throw null; }\n    System.Linq.Expressions.Expression Expression { get => throw null; }\n    System.Linq.IQueryProvider Provider { get => throw null; }\n}\n\n// Generated from `System.Linq.IQueryable<>` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IQueryable<T> : System.Linq.IQueryable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<T>\n{\n}\n\nnamespace Expressions\n{\n// Generated from `System.Linq.Expressions.BinaryExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class BinaryExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public override bool CanReduce { get => throw null; }\n    public System.Linq.Expressions.LambdaExpression Conversion { get => throw null; }\n    public bool IsLifted { get => throw null; }\n    public bool IsLiftedToNull { get => throw null; }\n    public System.Linq.Expressions.Expression Left { get => throw null; }\n    public System.Reflection.MethodInfo Method { get => throw null; }\n    public override System.Linq.Expressions.Expression Reduce() => throw null;\n    public System.Linq.Expressions.Expression Right { get => throw null; }\n    public System.Linq.Expressions.BinaryExpression Update(System.Linq.Expressions.Expression left, System.Linq.Expressions.LambdaExpression conversion, System.Linq.Expressions.Expression right) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.BlockExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class BlockExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Expressions { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.Expression Result { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.BlockExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> Variables { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.CatchBlock` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CatchBlock\n{\n    public System.Linq.Expressions.Expression Body { get => throw null; }\n    public System.Linq.Expressions.Expression Filter { get => throw null; }\n    public System.Type Test { get => throw null; }\n    public override string ToString() => throw null;\n    public System.Linq.Expressions.CatchBlock Update(System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression filter, System.Linq.Expressions.Expression body) => throw null;\n    public System.Linq.Expressions.ParameterExpression Variable { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.ConditionalExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ConditionalExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.Expression IfFalse { get => throw null; }\n    public System.Linq.Expressions.Expression IfTrue { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.Expression Test { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.ConditionalExpression Update(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.ConstantExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ConstantExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public object Value { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.DebugInfoExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DebugInfoExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.SymbolDocumentInfo Document { get => throw null; }\n    public virtual int EndColumn { get => throw null; }\n    public virtual int EndLine { get => throw null; }\n    public virtual bool IsClear { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public virtual int StartColumn { get => throw null; }\n    public virtual int StartLine { get => throw null; }\n    public override System.Type Type { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.DefaultExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DefaultExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.DynamicExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DynamicExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IDynamicExpression, System.Linq.Expressions.IArgumentProvider\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    int System.Linq.Expressions.IArgumentProvider.ArgumentCount { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get => throw null; }\n    public System.Runtime.CompilerServices.CallSiteBinder Binder { get => throw null; }\n    public override bool CanReduce { get => throw null; }\n    object System.Linq.Expressions.IDynamicExpression.CreateCallSite() => throw null;\n    public System.Type DelegateType { get => throw null; }\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    System.Linq.Expressions.Expression System.Linq.Expressions.IArgumentProvider.GetArgument(int index) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Linq.Expressions.Expression Reduce() => throw null;\n    System.Linq.Expressions.Expression System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[] args) => throw null;\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.DynamicExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.DynamicExpressionVisitor` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DynamicExpressionVisitor : System.Linq.Expressions.ExpressionVisitor\n{\n    public DynamicExpressionVisitor() => throw null;\n    protected internal override System.Linq.Expressions.Expression VisitDynamic(System.Linq.Expressions.DynamicExpression node) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.ElementInit` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ElementInit : System.Linq.Expressions.IArgumentProvider\n{\n    public System.Reflection.MethodInfo AddMethod { get => throw null; }\n    public int ArgumentCount { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get => throw null; }\n    public System.Linq.Expressions.Expression GetArgument(int index) => throw null;\n    public override string ToString() => throw null;\n    public System.Linq.Expressions.ElementInit Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.Expression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class Expression\n{\n    protected internal virtual System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Add(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Add(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AddChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression And(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression And(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AndAlso(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AndAlso(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression AndAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.IndexExpression ArrayAccess(System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes) => throw null;\n    public static System.Linq.Expressions.IndexExpression ArrayAccess(System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression ArrayIndex(System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression ArrayIndex(System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> indexes) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ArrayIndex(System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index) => throw null;\n    public static System.Linq.Expressions.UnaryExpression ArrayLength(System.Linq.Expressions.Expression array) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Assign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.MemberAssignment Bind(System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.MemberAssignment Bind(System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(params System.Linq.Expressions.Expression[] expressions) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Type type, params System.Linq.Expressions.Expression[] expressions) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, params System.Linq.Expressions.Expression[] expressions) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, params System.Linq.Expressions.Expression[] expressions) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) => throw null;\n    public static System.Linq.Expressions.BlockExpression Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) => throw null;\n    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target, System.Type type) => throw null;\n    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) => throw null;\n    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) => throw null;\n    public static System.Linq.Expressions.GotoExpression Break(System.Linq.Expressions.LabelTarget target) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Type type, string methodName, System.Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, string methodName, System.Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.MethodCallExpression Call(System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method) => throw null;\n    public virtual bool CanReduce { get => throw null; }\n    public static System.Linq.Expressions.CatchBlock Catch(System.Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter) => throw null;\n    public static System.Linq.Expressions.CatchBlock Catch(System.Type type, System.Linq.Expressions.Expression body) => throw null;\n    public static System.Linq.Expressions.CatchBlock Catch(System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter) => throw null;\n    public static System.Linq.Expressions.CatchBlock Catch(System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body) => throw null;\n    public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo document) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Coalesce(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Coalesce(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.ConditionalExpression Condition(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, System.Type type) => throw null;\n    public static System.Linq.Expressions.ConditionalExpression Condition(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse) => throw null;\n    public static System.Linq.Expressions.ConstantExpression Constant(object value, System.Type type) => throw null;\n    public static System.Linq.Expressions.ConstantExpression Constant(object value) => throw null;\n    public static System.Linq.Expressions.GotoExpression Continue(System.Linq.Expressions.LabelTarget target, System.Type type) => throw null;\n    public static System.Linq.Expressions.GotoExpression Continue(System.Linq.Expressions.LabelTarget target) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Convert(System.Linq.Expressions.Expression expression, System.Type type, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Convert(System.Linq.Expressions.Expression expression, System.Type type) => throw null;\n    public static System.Linq.Expressions.UnaryExpression ConvertChecked(System.Linq.Expressions.Expression expression, System.Type type, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression ConvertChecked(System.Linq.Expressions.Expression expression, System.Type type) => throw null;\n    public static System.Linq.Expressions.DebugInfoExpression DebugInfo(System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Decrement(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Decrement(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.DefaultExpression Default(System.Type type) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Divide(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Divide(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression DivideAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Linq.Expressions.Expression arg0) => throw null;\n    public static System.Linq.Expressions.DynamicExpression Dynamic(System.Runtime.CompilerServices.CallSiteBinder binder, System.Type returnType, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.ElementInit ElementInit(System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.ElementInit ElementInit(System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.DefaultExpression Empty() => throw null;\n    public static System.Linq.Expressions.BinaryExpression Equal(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Equal(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ExclusiveOr(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ExclusiveOr(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    protected Expression(System.Linq.Expressions.ExpressionType nodeType, System.Type type) => throw null;\n    protected Expression() => throw null;\n    public static System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression expression, string fieldName) => throw null;\n    public static System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression expression, System.Type type, string fieldName) => throw null;\n    public static System.Linq.Expressions.MemberExpression Field(System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field) => throw null;\n    public static System.Type GetActionType(params System.Type[] typeArgs) => throw null;\n    public static System.Type GetDelegateType(params System.Type[] typeArgs) => throw null;\n    public static System.Type GetFuncType(params System.Type[] typeArgs) => throw null;\n    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target, System.Type type) => throw null;\n    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) => throw null;\n    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) => throw null;\n    public static System.Linq.Expressions.GotoExpression Goto(System.Linq.Expressions.LabelTarget target) => throw null;\n    public static System.Linq.Expressions.BinaryExpression GreaterThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression GreaterThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.ConditionalExpression IfThen(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue) => throw null;\n    public static System.Linq.Expressions.ConditionalExpression IfThenElse(System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Increment(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Increment(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.InvocationExpression Invoke(System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.InvocationExpression Invoke(System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.UnaryExpression IsFalse(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression IsFalse(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.UnaryExpression IsTrue(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression IsTrue(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.LabelTarget Label(string name) => throw null;\n    public static System.Linq.Expressions.LabelTarget Label(System.Type type, string name) => throw null;\n    public static System.Linq.Expressions.LabelTarget Label(System.Type type) => throw null;\n    public static System.Linq.Expressions.LabelTarget Label() => throw null;\n    public static System.Linq.Expressions.LabelExpression Label(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue) => throw null;\n    public static System.Linq.Expressions.LabelExpression Label(System.Linq.Expressions.LabelTarget target) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.LambdaExpression Lambda(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters) => throw null;\n    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters) => throw null;\n    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.Expression<TDelegate> Lambda<TDelegate>(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LeftShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LeftShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LeftShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LessThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LessThan(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LessThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression LessThanOrEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers) => throw null;\n    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) => throw null;\n    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers) => throw null;\n    public static System.Linq.Expressions.MemberListBinding ListBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) => throw null;\n    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers) => throw null;\n    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers) => throw null;\n    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers) => throw null;\n    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers) => throw null;\n    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers) => throw null;\n    public static System.Linq.Expressions.ListInitExpression ListInit(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) => throw null;\n    public static System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget @break, System.Linq.Expressions.LabelTarget @continue) => throw null;\n    public static System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget @break) => throw null;\n    public static System.Linq.Expressions.LoopExpression Loop(System.Linq.Expressions.Expression body) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MakeBinary(System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.CatchBlock MakeCatchBlock(System.Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0) => throw null;\n    public static System.Linq.Expressions.DynamicExpression MakeDynamic(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.GotoExpression MakeGoto(System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) => throw null;\n    public static System.Linq.Expressions.IndexExpression MakeIndex(System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.MemberExpression MakeMemberAccess(System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member) => throw null;\n    public static System.Linq.Expressions.TryExpression MakeTry(System.Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression @finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers) => throw null;\n    public static System.Linq.Expressions.UnaryExpression MakeUnary(System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, System.Type type, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression MakeUnary(System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, System.Type type) => throw null;\n    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings) => throw null;\n    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) => throw null;\n    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings) => throw null;\n    public static System.Linq.Expressions.MemberMemberBinding MemberBind(System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) => throw null;\n    public static System.Linq.Expressions.MemberInitExpression MemberInit(System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings) => throw null;\n    public static System.Linq.Expressions.MemberInitExpression MemberInit(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Modulo(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Modulo(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ModuloAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Multiply(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Multiply(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression MultiplyChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Negate(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Negate(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.UnaryExpression NegateChecked(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression NegateChecked(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.NewExpression New(System.Type type) => throw null;\n    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, params System.Reflection.MemberInfo[] members) => throw null;\n    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> members) => throw null;\n    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.NewExpression New(System.Reflection.ConstructorInfo constructor) => throw null;\n    public static System.Linq.Expressions.NewArrayExpression NewArrayBounds(System.Type type, params System.Linq.Expressions.Expression[] bounds) => throw null;\n    public static System.Linq.Expressions.NewArrayExpression NewArrayBounds(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> bounds) => throw null;\n    public static System.Linq.Expressions.NewArrayExpression NewArrayInit(System.Type type, params System.Linq.Expressions.Expression[] initializers) => throw null;\n    public static System.Linq.Expressions.NewArrayExpression NewArrayInit(System.Type type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> initializers) => throw null;\n    public virtual System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public static System.Linq.Expressions.UnaryExpression Not(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Not(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.BinaryExpression NotEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression NotEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.UnaryExpression OnesComplement(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression OnesComplement(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Or(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Or(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression OrAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression OrElse(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression OrElse(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.ParameterExpression Parameter(System.Type type, string name) => throw null;\n    public static System.Linq.Expressions.ParameterExpression Parameter(System.Type type) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PostDecrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PostDecrementAssign(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PostIncrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PostIncrementAssign(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Power(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Power(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression PowerAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PreDecrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PreDecrementAssign(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PreIncrementAssign(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression PreIncrementAssign(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, string propertyName) => throw null;\n    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, System.Type type, string propertyName) => throw null;\n    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property) => throw null;\n    public static System.Linq.Expressions.MemberExpression Property(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor) => throw null;\n    public static System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments) => throw null;\n    public static System.Linq.Expressions.IndexExpression Property(System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n    public static System.Linq.Expressions.MemberExpression PropertyOrField(System.Linq.Expressions.Expression expression, string propertyOrFieldName) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Quote(System.Linq.Expressions.Expression expression) => throw null;\n    public virtual System.Linq.Expressions.Expression Reduce() => throw null;\n    public System.Linq.Expressions.Expression ReduceAndCheck() => throw null;\n    public System.Linq.Expressions.Expression ReduceExtensions() => throw null;\n    public static System.Linq.Expressions.BinaryExpression ReferenceEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Rethrow(System.Type type) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Rethrow() => throw null;\n    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target, System.Type type) => throw null;\n    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, System.Type type) => throw null;\n    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) => throw null;\n    public static System.Linq.Expressions.GotoExpression Return(System.Linq.Expressions.LabelTarget target) => throw null;\n    public static System.Linq.Expressions.BinaryExpression RightShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression RightShift(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression RightShiftAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(params System.Linq.Expressions.ParameterExpression[] variables) => throw null;\n    public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Subtract(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression Subtract(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractAssign(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.BinaryExpression SubtractChecked(System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right) => throw null;\n    public static System.Linq.Expressions.SwitchExpression Switch(System.Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases) => throw null;\n    public static System.Linq.Expressions.SwitchExpression Switch(System.Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases) => throw null;\n    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases) => throw null;\n    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases) => throw null;\n    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases) => throw null;\n    public static System.Linq.Expressions.SwitchExpression Switch(System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases) => throw null;\n    public static System.Linq.Expressions.SwitchCase SwitchCase(System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues) => throw null;\n    public static System.Linq.Expressions.SwitchCase SwitchCase(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues) => throw null;\n    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, System.Guid language, System.Guid languageVendor, System.Guid documentType) => throw null;\n    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, System.Guid language, System.Guid languageVendor) => throw null;\n    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, System.Guid language) => throw null;\n    public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Throw(System.Linq.Expressions.Expression value, System.Type type) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Throw(System.Linq.Expressions.Expression value) => throw null;\n    public override string ToString() => throw null;\n    public static System.Linq.Expressions.TryExpression TryCatch(System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers) => throw null;\n    public static System.Linq.Expressions.TryExpression TryCatchFinally(System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression @finally, params System.Linq.Expressions.CatchBlock[] handlers) => throw null;\n    public static System.Linq.Expressions.TryExpression TryFault(System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault) => throw null;\n    public static System.Linq.Expressions.TryExpression TryFinally(System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression @finally) => throw null;\n    public static bool TryGetActionType(System.Type[] typeArgs, out System.Type actionType) => throw null;\n    public static bool TryGetFuncType(System.Type[] typeArgs, out System.Type funcType) => throw null;\n    public virtual System.Type Type { get => throw null; }\n    public static System.Linq.Expressions.UnaryExpression TypeAs(System.Linq.Expressions.Expression expression, System.Type type) => throw null;\n    public static System.Linq.Expressions.TypeBinaryExpression TypeEqual(System.Linq.Expressions.Expression expression, System.Type type) => throw null;\n    public static System.Linq.Expressions.TypeBinaryExpression TypeIs(System.Linq.Expressions.Expression expression, System.Type type) => throw null;\n    public static System.Linq.Expressions.UnaryExpression UnaryPlus(System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method) => throw null;\n    public static System.Linq.Expressions.UnaryExpression UnaryPlus(System.Linq.Expressions.Expression expression) => throw null;\n    public static System.Linq.Expressions.UnaryExpression Unbox(System.Linq.Expressions.Expression expression, System.Type type) => throw null;\n    public static System.Linq.Expressions.ParameterExpression Variable(System.Type type, string name) => throw null;\n    public static System.Linq.Expressions.ParameterExpression Variable(System.Type type) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitChildren(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.Expression<>` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Expression<TDelegate> : System.Linq.Expressions.LambdaExpression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public TDelegate Compile(bool preferInterpretation) => throw null;\n    public TDelegate Compile(System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) => throw null;\n    public TDelegate Compile() => throw null;\n    public System.Linq.Expressions.Expression<TDelegate> Update(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> parameters) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.ExpressionType` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ExpressionType\n{\n    Add,\n    AddAssign,\n    AddAssignChecked,\n    AddChecked,\n    And,\n    AndAlso,\n    AndAssign,\n    ArrayIndex,\n    ArrayLength,\n    Assign,\n    Block,\n    Call,\n    Coalesce,\n    Conditional,\n    Constant,\n    Convert,\n    ConvertChecked,\n    DebugInfo,\n    Decrement,\n    Default,\n    Divide,\n    DivideAssign,\n    Dynamic,\n    Equal,\n    ExclusiveOr,\n    ExclusiveOrAssign,\n    // Stub generator skipped constructor \n    Extension,\n    Goto,\n    GreaterThan,\n    GreaterThanOrEqual,\n    Increment,\n    Index,\n    Invoke,\n    IsFalse,\n    IsTrue,\n    Label,\n    Lambda,\n    LeftShift,\n    LeftShiftAssign,\n    LessThan,\n    LessThanOrEqual,\n    ListInit,\n    Loop,\n    MemberAccess,\n    MemberInit,\n    Modulo,\n    ModuloAssign,\n    Multiply,\n    MultiplyAssign,\n    MultiplyAssignChecked,\n    MultiplyChecked,\n    Negate,\n    NegateChecked,\n    New,\n    NewArrayBounds,\n    NewArrayInit,\n    Not,\n    NotEqual,\n    OnesComplement,\n    Or,\n    OrAssign,\n    OrElse,\n    Parameter,\n    PostDecrementAssign,\n    PostIncrementAssign,\n    Power,\n    PowerAssign,\n    PreDecrementAssign,\n    PreIncrementAssign,\n    Quote,\n    RightShift,\n    RightShiftAssign,\n    RuntimeVariables,\n    Subtract,\n    SubtractAssign,\n    SubtractAssignChecked,\n    SubtractChecked,\n    Switch,\n    Throw,\n    Try,\n    TypeAs,\n    TypeEqual,\n    TypeIs,\n    UnaryPlus,\n    Unbox,\n}\n\n// Generated from `System.Linq.Expressions.ExpressionVisitor` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class ExpressionVisitor\n{\n    protected ExpressionVisitor() => throw null;\n    public virtual System.Linq.Expressions.Expression Visit(System.Linq.Expressions.Expression node) => throw null;\n    public static System.Collections.ObjectModel.ReadOnlyCollection<T> Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T> nodes, System.Func<T,T> elementVisitor) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> nodes) => throw null;\n    public T VisitAndConvert<T>(T node, string callerName) where T: System.Linq.Expressions.Expression => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<T> VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T> nodes, string callerName) where T: System.Linq.Expressions.Expression => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitBinary(System.Linq.Expressions.BinaryExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitBlock(System.Linq.Expressions.BlockExpression node) => throw null;\n    protected virtual System.Linq.Expressions.CatchBlock VisitCatchBlock(System.Linq.Expressions.CatchBlock node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitConditional(System.Linq.Expressions.ConditionalExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitConstant(System.Linq.Expressions.ConstantExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitDefault(System.Linq.Expressions.DefaultExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitDynamic(System.Linq.Expressions.DynamicExpression node) => throw null;\n    protected virtual System.Linq.Expressions.ElementInit VisitElementInit(System.Linq.Expressions.ElementInit node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitExtension(System.Linq.Expressions.Expression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitGoto(System.Linq.Expressions.GotoExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitIndex(System.Linq.Expressions.IndexExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitInvocation(System.Linq.Expressions.InvocationExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitLabel(System.Linq.Expressions.LabelExpression node) => throw null;\n    protected virtual System.Linq.Expressions.LabelTarget VisitLabelTarget(System.Linq.Expressions.LabelTarget node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitLambda<T>(System.Linq.Expressions.Expression<T> node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitListInit(System.Linq.Expressions.ListInitExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitLoop(System.Linq.Expressions.LoopExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitMember(System.Linq.Expressions.MemberExpression node) => throw null;\n    protected virtual System.Linq.Expressions.MemberAssignment VisitMemberAssignment(System.Linq.Expressions.MemberAssignment node) => throw null;\n    protected virtual System.Linq.Expressions.MemberBinding VisitMemberBinding(System.Linq.Expressions.MemberBinding node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitMemberInit(System.Linq.Expressions.MemberInitExpression node) => throw null;\n    protected virtual System.Linq.Expressions.MemberListBinding VisitMemberListBinding(System.Linq.Expressions.MemberListBinding node) => throw null;\n    protected virtual System.Linq.Expressions.MemberMemberBinding VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitMethodCall(System.Linq.Expressions.MethodCallExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitNew(System.Linq.Expressions.NewExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitNewArray(System.Linq.Expressions.NewArrayExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitParameter(System.Linq.Expressions.ParameterExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitSwitch(System.Linq.Expressions.SwitchExpression node) => throw null;\n    protected virtual System.Linq.Expressions.SwitchCase VisitSwitchCase(System.Linq.Expressions.SwitchCase node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitTry(System.Linq.Expressions.TryExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression node) => throw null;\n    protected internal virtual System.Linq.Expressions.Expression VisitUnary(System.Linq.Expressions.UnaryExpression node) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.GotoExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class GotoExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.GotoExpressionKind Kind { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.LabelTarget Target { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.GotoExpression Update(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value) => throw null;\n    public System.Linq.Expressions.Expression Value { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.GotoExpressionKind` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum GotoExpressionKind\n{\n    Break,\n    Continue,\n    Goto,\n    // Stub generator skipped constructor \n    Return,\n}\n\n// Generated from `System.Linq.Expressions.IArgumentProvider` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IArgumentProvider\n{\n    int ArgumentCount { get => throw null; }\n    System.Linq.Expressions.Expression GetArgument(int index) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.IDynamicExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IDynamicExpression : System.Linq.Expressions.IArgumentProvider\n{\n    object CreateCallSite() => throw null;\n    System.Type DelegateType { get => throw null; }\n    System.Linq.Expressions.Expression Rewrite(System.Linq.Expressions.Expression[] args) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.IParameterProvider` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\ninternal interface IParameterProvider\n{\n}\n\n// Generated from `System.Linq.Expressions.IndexExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class IndexExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public int ArgumentCount { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get => throw null; }\n    public System.Linq.Expressions.Expression GetArgument(int index) => throw null;\n    public System.Reflection.PropertyInfo Indexer { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.Expression Object { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.IndexExpression Update(System.Linq.Expressions.Expression @object, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.InvocationExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class InvocationExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public virtual int ArgumentCount { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get => throw null; }\n    public System.Linq.Expressions.Expression Expression { get => throw null; }\n    public virtual System.Linq.Expressions.Expression GetArgument(int index) => throw null;\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.InvocationExpression Update(System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.LabelExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LabelExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.Expression DefaultValue { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.LabelTarget Target { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.LabelExpression Update(System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.LabelTarget` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LabelTarget\n{\n    public string Name { get => throw null; }\n    public override string ToString() => throw null;\n    public System.Type Type { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.LambdaExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class LambdaExpression : System.Linq.Expressions.Expression\n{\n    public System.Linq.Expressions.Expression Body { get => throw null; }\n    public System.Delegate Compile(bool preferInterpretation) => throw null;\n    public System.Delegate Compile(System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) => throw null;\n    public System.Delegate Compile() => throw null;\n    public string Name { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> Parameters { get => throw null; }\n    public System.Type ReturnType { get => throw null; }\n    public bool TailCall { get => throw null; }\n    public override System.Type Type { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.ListInitExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ListInitExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public override bool CanReduce { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit> Initializers { get => throw null; }\n    public System.Linq.Expressions.NewExpression NewExpression { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Linq.Expressions.Expression Reduce() => throw null;\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.ListInitExpression Update(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.LoopExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LoopExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.Expression Body { get => throw null; }\n    public System.Linq.Expressions.LabelTarget BreakLabel { get => throw null; }\n    public System.Linq.Expressions.LabelTarget ContinueLabel { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.LoopExpression Update(System.Linq.Expressions.LabelTarget breakLabel, System.Linq.Expressions.LabelTarget continueLabel, System.Linq.Expressions.Expression body) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.MemberAssignment` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MemberAssignment : System.Linq.Expressions.MemberBinding\n{\n    public System.Linq.Expressions.Expression Expression { get => throw null; }\n    public System.Linq.Expressions.MemberAssignment Update(System.Linq.Expressions.Expression expression) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.MemberBinding` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class MemberBinding\n{\n    public System.Linq.Expressions.MemberBindingType BindingType { get => throw null; }\n    public System.Reflection.MemberInfo Member { get => throw null; }\n    protected MemberBinding(System.Linq.Expressions.MemberBindingType type, System.Reflection.MemberInfo member) => throw null;\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.Linq.Expressions.MemberBindingType` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum MemberBindingType\n{\n    Assignment,\n    ListBinding,\n    MemberBinding,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.Linq.Expressions.MemberExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MemberExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.Expression Expression { get => throw null; }\n    public System.Reflection.MemberInfo Member { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.MemberExpression Update(System.Linq.Expressions.Expression expression) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.MemberInitExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MemberInitExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding> Bindings { get => throw null; }\n    public override bool CanReduce { get => throw null; }\n    public System.Linq.Expressions.NewExpression NewExpression { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Linq.Expressions.Expression Reduce() => throw null;\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.MemberInitExpression Update(System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.MemberListBinding` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MemberListBinding : System.Linq.Expressions.MemberBinding\n{\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ElementInit> Initializers { get => throw null; }\n    public System.Linq.Expressions.MemberListBinding Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit> initializers) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.MemberMemberBinding` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MemberMemberBinding : System.Linq.Expressions.MemberBinding\n{\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding> Bindings { get => throw null; }\n    public System.Linq.Expressions.MemberMemberBinding Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding> bindings) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.MethodCallExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MethodCallExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public virtual int ArgumentCount { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get => throw null; }\n    public virtual System.Linq.Expressions.Expression GetArgument(int index) => throw null;\n    public System.Reflection.MethodInfo Method { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.Expression Object { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.MethodCallExpression Update(System.Linq.Expressions.Expression @object, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.NewArrayExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NewArrayExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Expressions { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.NewArrayExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> expressions) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.NewExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NewExpression : System.Linq.Expressions.Expression, System.Linq.Expressions.IArgumentProvider\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public int ArgumentCount { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> Arguments { get => throw null; }\n    public System.Reflection.ConstructorInfo Constructor { get => throw null; }\n    public System.Linq.Expressions.Expression GetArgument(int index) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.MemberInfo> Members { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.NewExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.ParameterExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ParameterExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public bool IsByRef { get => throw null; }\n    public string Name { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.RuntimeVariablesExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RuntimeVariablesExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.RuntimeVariablesExpression Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression> variables) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> Variables { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.SwitchCase` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SwitchCase\n{\n    public System.Linq.Expressions.Expression Body { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression> TestValues { get => throw null; }\n    public override string ToString() => throw null;\n    public System.Linq.Expressions.SwitchCase Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> testValues, System.Linq.Expressions.Expression body) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.SwitchExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SwitchExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.SwitchCase> Cases { get => throw null; }\n    public System.Reflection.MethodInfo Comparison { get => throw null; }\n    public System.Linq.Expressions.Expression DefaultBody { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.Expression SwitchValue { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.SwitchExpression Update(System.Linq.Expressions.Expression switchValue, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase> cases, System.Linq.Expressions.Expression defaultBody) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.SymbolDocumentInfo` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SymbolDocumentInfo\n{\n    public virtual System.Guid DocumentType { get => throw null; }\n    public string FileName { get => throw null; }\n    public virtual System.Guid Language { get => throw null; }\n    public virtual System.Guid LanguageVendor { get => throw null; }\n}\n\n// Generated from `System.Linq.Expressions.TryExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TryExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.Expression Body { get => throw null; }\n    public System.Linq.Expressions.Expression Fault { get => throw null; }\n    public System.Linq.Expressions.Expression Finally { get => throw null; }\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.CatchBlock> Handlers { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.TryExpression Update(System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock> handlers, System.Linq.Expressions.Expression @finally, System.Linq.Expressions.Expression fault) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.TypeBinaryExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class TypeBinaryExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public System.Linq.Expressions.Expression Expression { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public override System.Type Type { get => throw null; }\n    public System.Type TypeOperand { get => throw null; }\n    public System.Linq.Expressions.TypeBinaryExpression Update(System.Linq.Expressions.Expression expression) => throw null;\n}\n\n// Generated from `System.Linq.Expressions.UnaryExpression` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class UnaryExpression : System.Linq.Expressions.Expression\n{\n    protected internal override System.Linq.Expressions.Expression Accept(System.Linq.Expressions.ExpressionVisitor visitor) => throw null;\n    public override bool CanReduce { get => throw null; }\n    public bool IsLifted { get => throw null; }\n    public bool IsLiftedToNull { get => throw null; }\n    public System.Reflection.MethodInfo Method { get => throw null; }\n    public override System.Linq.Expressions.ExpressionType NodeType { get => throw null; }\n    public System.Linq.Expressions.Expression Operand { get => throw null; }\n    public override System.Linq.Expressions.Expression Reduce() => throw null;\n    public override System.Type Type { get => throw null; }\n    public System.Linq.Expressions.UnaryExpression Update(System.Linq.Expressions.Expression operand) => throw null;\n}\n\nnamespace Interpreter\n{\n// Generated from `System.Linq.Expressions.Interpreter.LightLambda` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class LightLambda\n{\n    public object Run(params object[] arguments) => throw null;\n    public object RunVoid(params object[] arguments) => throw null;\n}\n\n}\n}\n}\nnamespace Runtime\n{\nnamespace CompilerServices\n{\n// Generated from `System.Runtime.CompilerServices.CallSite` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CallSite\n{\n    public System.Runtime.CompilerServices.CallSiteBinder Binder { get => throw null; }\n    public static System.Runtime.CompilerServices.CallSite Create(System.Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder) => throw null;\n}\n\n// Generated from `System.Runtime.CompilerServices.CallSite<>` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CallSite<T> : System.Runtime.CompilerServices.CallSite where T: class\n{\n    public static System.Runtime.CompilerServices.CallSite<T> Create(System.Runtime.CompilerServices.CallSiteBinder binder) => throw null;\n    public T Target;\n    public T Update { get => throw null; }\n}\n\n// Generated from `System.Runtime.CompilerServices.CallSiteBinder` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class CallSiteBinder\n{\n    public abstract System.Linq.Expressions.Expression Bind(object[] args, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.ParameterExpression> parameters, System.Linq.Expressions.LabelTarget returnLabel);\n    public virtual T BindDelegate<T>(System.Runtime.CompilerServices.CallSite<T> site, object[] args) where T: class => throw null;\n    protected void CacheTarget<T>(T target) where T: class => throw null;\n    protected CallSiteBinder() => throw null;\n    public static System.Linq.Expressions.LabelTarget UpdateLabel { get => throw null; }\n}\n\n// Generated from `System.Runtime.CompilerServices.CallSiteHelpers` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class CallSiteHelpers\n{\n    public static bool IsInternalFrame(System.Reflection.MethodBase mb) => throw null;\n}\n\n// Generated from `System.Runtime.CompilerServices.CallSiteOps` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class CallSiteOps\n{\n    public static void AddRule<T>(System.Runtime.CompilerServices.CallSite<T> site, T rule) where T: class => throw null;\n    public static T Bind<T>(System.Runtime.CompilerServices.CallSiteBinder binder, System.Runtime.CompilerServices.CallSite<T> site, object[] args) where T: class => throw null;\n    public static void ClearMatch(System.Runtime.CompilerServices.CallSite site) => throw null;\n    public static System.Runtime.CompilerServices.CallSite<T> CreateMatchmaker<T>(System.Runtime.CompilerServices.CallSite<T> site) where T: class => throw null;\n    public static T[] GetCachedRules<T>(System.Runtime.CompilerServices.RuleCache<T> cache) where T: class => throw null;\n    public static bool GetMatch(System.Runtime.CompilerServices.CallSite site) => throw null;\n    public static System.Runtime.CompilerServices.RuleCache<T> GetRuleCache<T>(System.Runtime.CompilerServices.CallSite<T> site) where T: class => throw null;\n    public static T[] GetRules<T>(System.Runtime.CompilerServices.CallSite<T> site) where T: class => throw null;\n    public static void MoveRule<T>(System.Runtime.CompilerServices.RuleCache<T> cache, T rule, int i) where T: class => throw null;\n    public static bool SetNotMatched(System.Runtime.CompilerServices.CallSite site) => throw null;\n    public static void UpdateRules<T>(System.Runtime.CompilerServices.CallSite<T> @this, int matched) where T: class => throw null;\n}\n\n// Generated from `System.Runtime.CompilerServices.Closure` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Closure\n{\n    public Closure(object[] constants, object[] locals) => throw null;\n    public object[] Constants;\n    public object[] Locals;\n}\n\n// Generated from `System.Runtime.CompilerServices.DebugInfoGenerator` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class DebugInfoGenerator\n{\n    public static System.Runtime.CompilerServices.DebugInfoGenerator CreatePdbGenerator() => throw null;\n    protected DebugInfoGenerator() => throw null;\n    public abstract void MarkSequencePoint(System.Linq.Expressions.LambdaExpression method, int ilOffset, System.Linq.Expressions.DebugInfoExpression sequencePoint);\n}\n\n// Generated from `System.Runtime.CompilerServices.DynamicAttribute` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DynamicAttribute : System.Attribute\n{\n    public DynamicAttribute(bool[] transformFlags) => throw null;\n    public DynamicAttribute() => throw null;\n    public System.Collections.Generic.IList<bool> TransformFlags { get => throw null; }\n}\n\n// Generated from `System.Runtime.CompilerServices.IRuntimeVariables` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IRuntimeVariables\n{\n    int Count { get => throw null; }\n    object this[int index] { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Runtime.CompilerServices.ReadOnlyCollectionBuilder<>` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ReadOnlyCollectionBuilder<T> : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.ICollection<T>\n{\n    public void Add(T item) => throw null;\n    int System.Collections.IList.Add(object value) => throw null;\n    public int Capacity { get => throw null; set => throw null; }\n    public void Clear() => throw null;\n    public bool Contains(T item) => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    void System.Collections.ICollection.CopyTo(System.Array array, int index) => throw null;\n    public void CopyTo(T[] array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<T> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public int IndexOf(T item) => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    public void Insert(int index, T item) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    bool System.Collections.IList.IsReadOnly { get => throw null; }\n    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get => throw null; }\n    bool System.Collections.ICollection.IsSynchronized { get => throw null; }\n    public T this[int index] { get => throw null; set => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    public ReadOnlyCollectionBuilder(int capacity) => throw null;\n    public ReadOnlyCollectionBuilder(System.Collections.Generic.IEnumerable<T> collection) => throw null;\n    public ReadOnlyCollectionBuilder() => throw null;\n    void System.Collections.IList.Remove(object value) => throw null;\n    public bool Remove(T item) => throw null;\n    public void RemoveAt(int index) => throw null;\n    public void Reverse(int index, int count) => throw null;\n    public void Reverse() => throw null;\n    object System.Collections.ICollection.SyncRoot { get => throw null; }\n    public T[] ToArray() => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<T> ToReadOnlyCollection() => throw null;\n}\n\n// Generated from `System.Runtime.CompilerServices.RuleCache<>` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RuleCache<T> where T: class\n{\n}\n\n// Generated from `System.Runtime.CompilerServices.RuntimeOps` in `System.Linq.Expressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class RuntimeOps\n{\n    public static System.Runtime.CompilerServices.IRuntimeVariables CreateRuntimeVariables(object[] data, System.Int64[] indexes) => throw null;\n    public static System.Runtime.CompilerServices.IRuntimeVariables CreateRuntimeVariables() => throw null;\n    public static bool ExpandoCheckVersion(System.Dynamic.ExpandoObject expando, object version) => throw null;\n    public static void ExpandoPromoteClass(System.Dynamic.ExpandoObject expando, object oldClass, object newClass) => throw null;\n    public static bool ExpandoTryDeleteValue(System.Dynamic.ExpandoObject expando, object indexClass, int index, string name, bool ignoreCase) => throw null;\n    public static bool ExpandoTryGetValue(System.Dynamic.ExpandoObject expando, object indexClass, int index, string name, bool ignoreCase, out object value) => throw null;\n    public static object ExpandoTrySetValue(System.Dynamic.ExpandoObject expando, object indexClass, int index, object value, string name, bool ignoreCase) => throw null;\n    public static System.Runtime.CompilerServices.IRuntimeVariables MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables first, System.Runtime.CompilerServices.IRuntimeVariables second, int[] indexes) => throw null;\n    public static System.Linq.Expressions.Expression Quote(System.Linq.Expressions.Expression expression, object hoistedLocals, object[] locals) => throw null;\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace IO\n{\nnamespace Compression\n{\n// Generated from `System.IO.Compression.CompressionLevel` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic enum CompressionLevel\n{\n    // Stub generator skipped constructor \n    Fastest,\n    NoCompression,\n    Optimal,\n}\n\n// Generated from `System.IO.Compression.CompressionMode` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic enum CompressionMode\n{\n    Compress,\n    // Stub generator skipped constructor \n    Decompress,\n}\n\n// Generated from `System.IO.Compression.DeflateStream` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic class DeflateStream : System.IO.Stream\n{\n    public System.IO.Stream BaseStream { get => throw null; }\n    public override System.IAsyncResult BeginRead(System.Byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public override System.IAsyncResult BeginWrite(System.Byte[] array, int offset, int count, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public override bool CanRead { get => throw null; }\n    public override bool CanSeek { get => throw null; }\n    public override bool CanWrite { get => throw null; }\n    public override void CopyTo(System.IO.Stream destination, int bufferSize) => throw null;\n    public override System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken) => throw null;\n    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen) => throw null;\n    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode) => throw null;\n    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen) => throw null;\n    public DeflateStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel) => throw null;\n    protected override void Dispose(bool disposing) => throw null;\n    public override System.Threading.Tasks.ValueTask DisposeAsync() => throw null;\n    public override int EndRead(System.IAsyncResult asyncResult) => throw null;\n    public override void EndWrite(System.IAsyncResult asyncResult) => throw null;\n    public override void Flush() => throw null;\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) => throw null;\n    public override System.Int64 Length { get => throw null; }\n    public override System.Int64 Position { get => throw null; set => throw null; }\n    public override int Read(System.Span<System.Byte> buffer) => throw null;\n    public override int Read(System.Byte[] array, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public override System.Threading.Tasks.Task<int> ReadAsync(System.Byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override int ReadByte() => throw null;\n    public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin) => throw null;\n    public override void SetLength(System.Int64 value) => throw null;\n    public override void Write(System.ReadOnlySpan<System.Byte> buffer) => throw null;\n    public override void Write(System.Byte[] array, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override System.Threading.Tasks.Task WriteAsync(System.Byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n}\n\n// Generated from `System.IO.Compression.GZipStream` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic class GZipStream : System.IO.Stream\n{\n    public System.IO.Stream BaseStream { get => throw null; }\n    public override System.IAsyncResult BeginRead(System.Byte[] array, int offset, int count, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public override System.IAsyncResult BeginWrite(System.Byte[] array, int offset, int count, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public override bool CanRead { get => throw null; }\n    public override bool CanSeek { get => throw null; }\n    public override bool CanWrite { get => throw null; }\n    public override void CopyTo(System.IO.Stream destination, int bufferSize) => throw null;\n    public override System.Threading.Tasks.Task CopyToAsync(System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken) => throw null;\n    protected override void Dispose(bool disposing) => throw null;\n    public override System.Threading.Tasks.ValueTask DisposeAsync() => throw null;\n    public override int EndRead(System.IAsyncResult asyncResult) => throw null;\n    public override void EndWrite(System.IAsyncResult asyncResult) => throw null;\n    public override void Flush() => throw null;\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) => throw null;\n    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode, bool leaveOpen) => throw null;\n    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionMode mode) => throw null;\n    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel, bool leaveOpen) => throw null;\n    public GZipStream(System.IO.Stream stream, System.IO.Compression.CompressionLevel compressionLevel) => throw null;\n    public override System.Int64 Length { get => throw null; }\n    public override System.Int64 Position { get => throw null; set => throw null; }\n    public override int Read(System.Span<System.Byte> buffer) => throw null;\n    public override int Read(System.Byte[] array, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public override System.Threading.Tasks.Task<int> ReadAsync(System.Byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override int ReadByte() => throw null;\n    public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin) => throw null;\n    public override void SetLength(System.Int64 value) => throw null;\n    public override void Write(System.ReadOnlySpan<System.Byte> buffer) => throw null;\n    public override void Write(System.Byte[] array, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public override System.Threading.Tasks.Task WriteAsync(System.Byte[] array, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n}\n\n// Generated from `System.IO.Compression.ZLibException` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic class ZLibException : System.IO.IOException, System.Runtime.Serialization.ISerializable\n{\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public ZLibException(string message, string zlibErrorContext, int zlibErrorCode, string zlibErrorMessage) => throw null;\n    public ZLibException(string message, System.Exception innerException) => throw null;\n    public ZLibException() => throw null;\n    protected ZLibException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n}\n\n// Generated from `System.IO.Compression.ZipArchive` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic class ZipArchive : System.IDisposable\n{\n    public System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName, System.IO.Compression.CompressionLevel compressionLevel) => throw null;\n    public System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName) => throw null;\n    public void Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    public System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Compression.ZipArchiveEntry> Entries { get => throw null; }\n    public System.IO.Compression.ZipArchiveEntry GetEntry(string entryName) => throw null;\n    public System.IO.Compression.ZipArchiveMode Mode { get => throw null; }\n    public ZipArchive(System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen, System.Text.Encoding entryNameEncoding) => throw null;\n    public ZipArchive(System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen) => throw null;\n    public ZipArchive(System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode) => throw null;\n    public ZipArchive(System.IO.Stream stream) => throw null;\n}\n\n// Generated from `System.IO.Compression.ZipArchiveEntry` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic class ZipArchiveEntry\n{\n    public System.IO.Compression.ZipArchive Archive { get => throw null; }\n    public System.Int64 CompressedLength { get => throw null; }\n    public System.UInt32 Crc32 { get => throw null; }\n    public void Delete() => throw null;\n    public int ExternalAttributes { get => throw null; set => throw null; }\n    public string FullName { get => throw null; }\n    public System.DateTimeOffset LastWriteTime { get => throw null; set => throw null; }\n    public System.Int64 Length { get => throw null; }\n    public string Name { get => throw null; }\n    public System.IO.Stream Open() => throw null;\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.IO.Compression.ZipArchiveMode` in `System.IO.Compression, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089`\npublic enum ZipArchiveMode\n{\n    Create,\n    Read,\n    Update,\n    // Stub generator skipped constructor \n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Linq\n{\n// Generated from `System.Linq.EnumerableExecutor` in `System.Linq.Queryable, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class EnumerableExecutor\n{\n}\n\n// Generated from `System.Linq.EnumerableExecutor<>` in `System.Linq.Queryable, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class EnumerableExecutor<T> : System.Linq.EnumerableExecutor\n{\n    public EnumerableExecutor(System.Linq.Expressions.Expression expression) => throw null;\n}\n\n// Generated from `System.Linq.EnumerableQuery` in `System.Linq.Queryable, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class EnumerableQuery\n{\n}\n\n// Generated from `System.Linq.EnumerableQuery<>` in `System.Linq.Queryable, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class EnumerableQuery<T> : System.Linq.EnumerableQuery, System.Linq.IQueryable<T>, System.Linq.IQueryable, System.Linq.IQueryProvider, System.Linq.IOrderedQueryable<T>, System.Linq.IOrderedQueryable, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<T>\n{\n    System.Linq.IQueryable<TElement> System.Linq.IQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression expression) => throw null;\n    System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression expression) => throw null;\n    System.Type System.Linq.IQueryable.ElementType { get => throw null; }\n    public EnumerableQuery(System.Linq.Expressions.Expression expression) => throw null;\n    public EnumerableQuery(System.Collections.Generic.IEnumerable<T> enumerable) => throw null;\n    object System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression expression) => throw null;\n    TElement System.Linq.IQueryProvider.Execute<TElement>(System.Linq.Expressions.Expression expression) => throw null;\n    System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get => throw null; }\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() => throw null;\n    System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get => throw null; }\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.Linq.Queryable` in `System.Linq.Queryable, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class Queryable\n{\n    public static TSource Aggregate<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TSource,TSource>> func) => throw null;\n    public static TResult Aggregate<TSource,TAccumulate,TResult>(this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>> func, System.Linq.Expressions.Expression<System.Func<TAccumulate,TResult>> selector) => throw null;\n    public static TAccumulate Aggregate<TSource,TAccumulate>(this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>> func) => throw null;\n    public static bool All<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static bool Any<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static bool Any<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static System.Linq.IQueryable<TSource> Append<TSource>(this System.Linq.IQueryable<TSource> source, TSource element) => throw null;\n    public static System.Linq.IQueryable<TElement> AsQueryable<TElement>(this System.Collections.Generic.IEnumerable<TElement> source) => throw null;\n    public static System.Linq.IQueryable AsQueryable(this System.Collections.IEnumerable source) => throw null;\n    public static float? Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,float?>> selector) => throw null;\n    public static float? Average(this System.Linq.IQueryable<float?> source) => throw null;\n    public static float Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,float>> selector) => throw null;\n    public static float Average(this System.Linq.IQueryable<float> source) => throw null;\n    public static double? Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int?>> selector) => throw null;\n    public static double? Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,double?>> selector) => throw null;\n    public static double? Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64?>> selector) => throw null;\n    public static double? Average(this System.Linq.IQueryable<int?> source) => throw null;\n    public static double? Average(this System.Linq.IQueryable<double?> source) => throw null;\n    public static double? Average(this System.Linq.IQueryable<System.Int64?> source) => throw null;\n    public static double Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int>> selector) => throw null;\n    public static double Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,double>> selector) => throw null;\n    public static double Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>> selector) => throw null;\n    public static double Average(this System.Linq.IQueryable<int> source) => throw null;\n    public static double Average(this System.Linq.IQueryable<double> source) => throw null;\n    public static double Average(this System.Linq.IQueryable<System.Int64> source) => throw null;\n    public static System.Decimal? Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal?>> selector) => throw null;\n    public static System.Decimal? Average(this System.Linq.IQueryable<System.Decimal?> source) => throw null;\n    public static System.Decimal Average<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>> selector) => throw null;\n    public static System.Decimal Average(this System.Linq.IQueryable<System.Decimal> source) => throw null;\n    public static System.Linq.IQueryable<TResult> Cast<TResult>(this System.Linq.IQueryable source) => throw null;\n    public static System.Linq.IQueryable<TSource> Concat<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) => throw null;\n    public static bool Contains<TSource>(this System.Linq.IQueryable<TSource> source, TSource item, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static bool Contains<TSource>(this System.Linq.IQueryable<TSource> source, TSource item) => throw null;\n    public static int Count<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static int Count<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(this System.Linq.IQueryable<TSource> source, TSource defaultValue) => throw null;\n    public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static System.Linq.IQueryable<TSource> Distinct<TSource>(this System.Linq.IQueryable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.IQueryable<TSource> Distinct<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static TSource ElementAt<TSource>(this System.Linq.IQueryable<TSource> source, int index) => throw null;\n    public static TSource ElementAtOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, int index) => throw null;\n    public static System.Linq.IQueryable<TSource> Except<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.IQueryable<TSource> Except<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) => throw null;\n    public static TSource First<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static TSource First<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static TSource FirstOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static TSource FirstOrDefault<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector) => throw null;\n    public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector) => throw null;\n    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector) => throw null;\n    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource,TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource,TElement>> elementSelector) => throw null;\n    public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector) => throw null;\n    public static System.Linq.IQueryable<TSource> Intersect<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.IQueryable<TSource> Intersect<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) => throw null;\n    public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<System.Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<System.Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>> resultSelector) => throw null;\n    public static TSource Last<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static TSource Last<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static TSource LastOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static TSource LastOrDefault<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static System.Int64 LongCount<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static System.Int64 LongCount<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static TSource Max<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static TResult Max<TSource,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TResult>> selector) => throw null;\n    public static TSource Min<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static TResult Min<TSource,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TResult>> selector) => throw null;\n    public static System.Linq.IQueryable<TResult> OfType<TResult>(this System.Linq.IQueryable source) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector) => throw null;\n    public static System.Linq.IQueryable<TSource> Prepend<TSource>(this System.Linq.IQueryable<TSource> source, TSource element) => throw null;\n    public static System.Linq.IQueryable<TSource> Reverse<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static System.Linq.IQueryable<TResult> Select<TSource,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int,TResult>> selector) => throw null;\n    public static System.Linq.IQueryable<TResult> Select<TSource,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TResult>> selector) => throw null;\n    public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>>> selector) => throw null;\n    public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>> selector) => throw null;\n    public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>> resultSelector) => throw null;\n    public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>> resultSelector) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) => throw null;\n    public static TSource Single<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static TSource Single<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static TSource SingleOrDefault<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static TSource SingleOrDefault<TSource>(this System.Linq.IQueryable<TSource> source) => throw null;\n    public static System.Linq.IQueryable<TSource> Skip<TSource>(this System.Linq.IQueryable<TSource> source, int count) => throw null;\n    public static System.Linq.IQueryable<TSource> SkipLast<TSource>(this System.Linq.IQueryable<TSource> source, int count) => throw null;\n    public static System.Linq.IQueryable<TSource> SkipWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int,bool>> predicate) => throw null;\n    public static System.Linq.IQueryable<TSource> SkipWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static int? Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int?>> selector) => throw null;\n    public static int? Sum(this System.Linq.IQueryable<int?> source) => throw null;\n    public static int Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int>> selector) => throw null;\n    public static int Sum(this System.Linq.IQueryable<int> source) => throw null;\n    public static float? Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,float?>> selector) => throw null;\n    public static float? Sum(this System.Linq.IQueryable<float?> source) => throw null;\n    public static float Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,float>> selector) => throw null;\n    public static float Sum(this System.Linq.IQueryable<float> source) => throw null;\n    public static double? Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,double?>> selector) => throw null;\n    public static double? Sum(this System.Linq.IQueryable<double?> source) => throw null;\n    public static double Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,double>> selector) => throw null;\n    public static double Sum(this System.Linq.IQueryable<double> source) => throw null;\n    public static System.Int64? Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64?>> selector) => throw null;\n    public static System.Int64? Sum(this System.Linq.IQueryable<System.Int64?> source) => throw null;\n    public static System.Int64 Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>> selector) => throw null;\n    public static System.Int64 Sum(this System.Linq.IQueryable<System.Int64> source) => throw null;\n    public static System.Decimal? Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal?>> selector) => throw null;\n    public static System.Decimal? Sum(this System.Linq.IQueryable<System.Decimal?> source) => throw null;\n    public static System.Decimal Sum<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>> selector) => throw null;\n    public static System.Decimal Sum(this System.Linq.IQueryable<System.Decimal> source) => throw null;\n    public static System.Linq.IQueryable<TSource> Take<TSource>(this System.Linq.IQueryable<TSource> source, int count) => throw null;\n    public static System.Linq.IQueryable<TSource> TakeLast<TSource>(this System.Linq.IQueryable<TSource> source, int count) => throw null;\n    public static System.Linq.IQueryable<TSource> TakeWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int,bool>> predicate) => throw null;\n    public static System.Linq.IQueryable<TSource> TakeWhile<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey>(this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,TKey>> keySelector) => throw null;\n    public static System.Linq.IQueryable<TSource> Union<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.IQueryable<TSource> Union<TSource>(this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2) => throw null;\n    public static System.Linq.IQueryable<TSource> Where<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,int,bool>> predicate) => throw null;\n    public static System.Linq.IQueryable<TSource> Where<TSource>(this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource,bool>> predicate) => throw null;\n    public static System.Linq.IQueryable<TResult> Zip<TFirst,TSecond,TResult>(this System.Linq.IQueryable<TFirst> source1, System.Collections.Generic.IEnumerable<TSecond> source2, System.Linq.Expressions.Expression<System.Func<TFirst,TSecond,TResult>> resultSelector) => throw null;\n    public static System.Linq.IQueryable<(TFirst,TSecond)> Zip<TFirst,TSecond>(this System.Linq.IQueryable<TFirst> source1, System.Collections.Generic.IEnumerable<TSecond> source2) => throw null;\n}\n\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Linq\n{\n// Generated from `System.Linq.Enumerable` in `System.Linq, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class Enumerable\n{\n    public static TSource Aggregate<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TSource,TSource> func) => throw null;\n    public static TResult Aggregate<TSource,TAccumulate,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, System.Func<TAccumulate,TSource,TAccumulate> func, System.Func<TAccumulate,TResult> resultSelector) => throw null;\n    public static TAccumulate Aggregate<TSource,TAccumulate>(this System.Collections.Generic.IEnumerable<TSource> source, TAccumulate seed, System.Func<TAccumulate,TSource,TAccumulate> func) => throw null;\n    public static bool All<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static bool Any<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static bool Any<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Append<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource element) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static float? Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Average(this System.Collections.Generic.IEnumerable<float?> source) => throw null;\n    public static float Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Average(this System.Collections.Generic.IEnumerable<float> source) => throw null;\n    public static double? Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static double? Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static double? Average(this System.Collections.Generic.IEnumerable<int?> source) => throw null;\n    public static double? Average(this System.Collections.Generic.IEnumerable<double?> source) => throw null;\n    public static double? Average(this System.Collections.Generic.IEnumerable<System.Int64?> source) => throw null;\n    public static double Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static double Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static double Average(this System.Collections.Generic.IEnumerable<int> source) => throw null;\n    public static double Average(this System.Collections.Generic.IEnumerable<double> source) => throw null;\n    public static double Average(this System.Collections.Generic.IEnumerable<System.Int64> source) => throw null;\n    public static System.Decimal? Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Average(this System.Collections.Generic.IEnumerable<System.Decimal?> source) => throw null;\n    public static System.Decimal Average<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Average(this System.Collections.Generic.IEnumerable<System.Decimal> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Cast<TResult>(this System.Collections.IEnumerable source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Concat<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static bool Contains<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static bool Contains<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource value) => throw null;\n    public static int Count<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static int Count<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource defaultValue) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> DefaultIfEmpty<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Distinct<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static TSource ElementAt<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int index) => throw null;\n    public static TSource ElementAtOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int index) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Empty<TResult>() => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Except<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Except<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static TSource First<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource First<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static TSource FirstOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource FirstOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TElement,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> GroupBy<TSource,TKey,TElement,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Intersect<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Collections.Generic.IEnumerable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,TInner,TResult> resultSelector) => throw null;\n    public static TSource Last<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource Last<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static TSource LastOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource LastOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Int64 LongCount<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static System.Int64 LongCount<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static int? Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static int? Max(this System.Collections.Generic.IEnumerable<int?> source) => throw null;\n    public static int Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static int Max(this System.Collections.Generic.IEnumerable<int> source) => throw null;\n    public static float? Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Max(this System.Collections.Generic.IEnumerable<float?> source) => throw null;\n    public static float Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Max(this System.Collections.Generic.IEnumerable<float> source) => throw null;\n    public static double? Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Max(this System.Collections.Generic.IEnumerable<double?> source) => throw null;\n    public static double Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Max(this System.Collections.Generic.IEnumerable<double> source) => throw null;\n    public static TSource Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static TResult Max<TSource,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TResult> selector) => throw null;\n    public static System.Int64? Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static System.Int64? Max(this System.Collections.Generic.IEnumerable<System.Int64?> source) => throw null;\n    public static System.Int64 Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static System.Int64 Max(this System.Collections.Generic.IEnumerable<System.Int64> source) => throw null;\n    public static System.Decimal? Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Max(this System.Collections.Generic.IEnumerable<System.Decimal?> source) => throw null;\n    public static System.Decimal Max<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Max(this System.Collections.Generic.IEnumerable<System.Decimal> source) => throw null;\n    public static int? Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static int? Min(this System.Collections.Generic.IEnumerable<int?> source) => throw null;\n    public static int Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static int Min(this System.Collections.Generic.IEnumerable<int> source) => throw null;\n    public static float? Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Min(this System.Collections.Generic.IEnumerable<float?> source) => throw null;\n    public static float Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Min(this System.Collections.Generic.IEnumerable<float> source) => throw null;\n    public static double? Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Min(this System.Collections.Generic.IEnumerable<double?> source) => throw null;\n    public static double Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Min(this System.Collections.Generic.IEnumerable<double> source) => throw null;\n    public static TSource Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static TResult Min<TSource,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TResult> selector) => throw null;\n    public static System.Int64? Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static System.Int64? Min(this System.Collections.Generic.IEnumerable<System.Int64?> source) => throw null;\n    public static System.Int64 Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static System.Int64 Min(this System.Collections.Generic.IEnumerable<System.Int64> source) => throw null;\n    public static System.Decimal? Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Min(this System.Collections.Generic.IEnumerable<System.Decimal?> source) => throw null;\n    public static System.Decimal Min<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Min(this System.Collections.Generic.IEnumerable<System.Decimal> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> OfType<TResult>(this System.Collections.IEnumerable source) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> OrderBy<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> OrderByDescending<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Prepend<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, TSource element) => throw null;\n    public static System.Collections.Generic.IEnumerable<int> Range(int start, int count) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Repeat<TResult>(TResult element, int count) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Reverse<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Select<TSource,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int,TResult> selector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Select<TSource,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TResult> selector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>> selector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>> selector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TCollection,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource,TCollection,TResult> resultSelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> SelectMany<TSource,TCollection,TResult>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource,TCollection,TResult> resultSelector) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static TSource Single<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource Single<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static TSource SingleOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource SingleOrDefault<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Skip<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int count) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> SkipLast<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int count) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int,bool> predicate) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> SkipWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static int? Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static int? Sum(this System.Collections.Generic.IEnumerable<int?> source) => throw null;\n    public static int Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static int Sum(this System.Collections.Generic.IEnumerable<int> source) => throw null;\n    public static float? Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Sum(this System.Collections.Generic.IEnumerable<float?> source) => throw null;\n    public static float Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Sum(this System.Collections.Generic.IEnumerable<float> source) => throw null;\n    public static double? Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Sum(this System.Collections.Generic.IEnumerable<double?> source) => throw null;\n    public static double Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Sum(this System.Collections.Generic.IEnumerable<double> source) => throw null;\n    public static System.Int64? Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static System.Int64? Sum(this System.Collections.Generic.IEnumerable<System.Int64?> source) => throw null;\n    public static System.Int64 Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static System.Int64 Sum(this System.Collections.Generic.IEnumerable<System.Int64> source) => throw null;\n    public static System.Decimal? Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Sum(this System.Collections.Generic.IEnumerable<System.Decimal?> source) => throw null;\n    public static System.Decimal Sum<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Sum(this System.Collections.Generic.IEnumerable<System.Decimal> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Take<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int count) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> TakeLast<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, int count) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int,bool> predicate) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> TakeWhile<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource,TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> ThenBy<TSource,TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource,TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.IOrderedEnumerable<TSource> ThenByDescending<TSource,TKey>(this System.Linq.IOrderedEnumerable<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static TSource[] ToArray<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector) => throw null;\n    public static System.Collections.Generic.HashSet<TSource> ToHashSet<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Collections.Generic.HashSet<TSource> ToHashSet<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Collections.Generic.List<TSource> ToList<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Union<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Union<TSource>(this System.Collections.Generic.IEnumerable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Where<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,int,bool> predicate) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> Where<TSource>(this System.Collections.Generic.IEnumerable<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static System.Collections.Generic.IEnumerable<TResult> Zip<TFirst,TSecond,TResult>(this System.Collections.Generic.IEnumerable<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, System.Func<TFirst,TSecond,TResult> resultSelector) => throw null;\n    public static System.Collections.Generic.IEnumerable<(TFirst,TSecond)> Zip<TFirst,TSecond>(this System.Collections.Generic.IEnumerable<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second) => throw null;\n}\n\n// Generated from `System.Linq.Grouping<,>` in `System.Linq, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Grouping<TKey,TElement> : System.Linq.IGrouping<TKey,TElement>, System.Collections.IEnumerable, System.Collections.Generic.IList<TElement>, System.Collections.Generic.IEnumerable<TElement>, System.Collections.Generic.ICollection<TElement>\n{\n    void System.Collections.Generic.ICollection<TElement>.Add(TElement item) => throw null;\n    void System.Collections.Generic.ICollection<TElement>.Clear() => throw null;\n    bool System.Collections.Generic.ICollection<TElement>.Contains(TElement item) => throw null;\n    void System.Collections.Generic.ICollection<TElement>.CopyTo(TElement[] array, int arrayIndex) => throw null;\n    int System.Collections.Generic.ICollection<TElement>.Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<TElement> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    int System.Collections.Generic.IList<TElement>.IndexOf(TElement item) => throw null;\n    void System.Collections.Generic.IList<TElement>.Insert(int index, TElement item) => throw null;\n    bool System.Collections.Generic.ICollection<TElement>.IsReadOnly { get => throw null; }\n    TElement System.Collections.Generic.IList<TElement>.this[int index] { get => throw null; set => throw null; }\n    public TKey Key { get => throw null; }\n    bool System.Collections.Generic.ICollection<TElement>.Remove(TElement item) => throw null;\n    void System.Collections.Generic.IList<TElement>.RemoveAt(int index) => throw null;\n}\n\n// Generated from `System.Linq.IGrouping<,>` in `System.Linq, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IGrouping<TKey,TElement> : System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<TElement>\n{\n    TKey Key { get => throw null; }\n}\n\n// Generated from `System.Linq.IIListProvider<>` in `System.Linq, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\ninternal interface IIListProvider<TElement> : System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<TElement>\n{\n}\n\n// Generated from `System.Linq.ILookup<,>` in `System.Linq, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ILookup<TKey,TElement> : System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>\n{\n    bool Contains(TKey key) => throw null;\n    int Count { get => throw null; }\n    System.Collections.Generic.IEnumerable<TElement> this[TKey key] { get => throw null; }\n}\n\n// Generated from `System.Linq.IOrderedEnumerable<>` in `System.Linq, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IOrderedEnumerable<TElement> : System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<TElement>\n{\n    System.Linq.IOrderedEnumerable<TElement> CreateOrderedEnumerable<TKey>(System.Func<TElement,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer, bool descending) => throw null;\n}\n\n// Generated from `System.Linq.Lookup<,>` in `System.Linq, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Lookup<TKey,TElement> : System.Linq.ILookup<TKey,TElement>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>\n{\n    public System.Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult>(System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector) => throw null;\n    public bool Contains(TKey key) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey,TElement>> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public System.Collections.Generic.IEnumerable<TElement> this[TKey key] { get => throw null; }\n}\n\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Linq\n{\n// Generated from `System.Linq.OrderedParallelQuery<>` in `System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class OrderedParallelQuery<TSource> : System.Linq.ParallelQuery<TSource>\n{\n    public override System.Collections.Generic.IEnumerator<TSource> GetEnumerator() => throw null;\n}\n\n// Generated from `System.Linq.ParallelEnumerable` in `System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class ParallelEnumerable\n{\n    public static TSource Aggregate<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TSource,TSource> func) => throw null;\n    public static TResult Aggregate<TSource,TAccumulate,TResult>(this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, System.Func<TAccumulate,TSource,TAccumulate> updateAccumulatorFunc, System.Func<TAccumulate,TAccumulate,TAccumulate> combineAccumulatorsFunc, System.Func<TAccumulate,TResult> resultSelector) => throw null;\n    public static TResult Aggregate<TSource,TAccumulate,TResult>(this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, System.Func<TAccumulate,TSource,TAccumulate> func, System.Func<TAccumulate,TResult> resultSelector) => throw null;\n    public static TResult Aggregate<TSource,TAccumulate,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TAccumulate> seedFactory, System.Func<TAccumulate,TSource,TAccumulate> updateAccumulatorFunc, System.Func<TAccumulate,TAccumulate,TAccumulate> combineAccumulatorsFunc, System.Func<TAccumulate,TResult> resultSelector) => throw null;\n    public static TAccumulate Aggregate<TSource,TAccumulate>(this System.Linq.ParallelQuery<TSource> source, TAccumulate seed, System.Func<TAccumulate,TSource,TAccumulate> func) => throw null;\n    public static bool All<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static bool Any<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static bool Any<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> AsEnumerable<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> AsOrdered<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery AsOrdered(this System.Linq.ParallelQuery source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> AsParallel<TSource>(this System.Collections.Generic.IEnumerable<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> AsParallel<TSource>(this System.Collections.Concurrent.Partitioner<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery AsParallel(this System.Collections.IEnumerable source) => throw null;\n    public static System.Collections.Generic.IEnumerable<TSource> AsSequential<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> AsUnordered<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static float? Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Average(this System.Linq.ParallelQuery<float?> source) => throw null;\n    public static float Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Average(this System.Linq.ParallelQuery<float> source) => throw null;\n    public static double? Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static double? Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static double? Average(this System.Linq.ParallelQuery<int?> source) => throw null;\n    public static double? Average(this System.Linq.ParallelQuery<double?> source) => throw null;\n    public static double? Average(this System.Linq.ParallelQuery<System.Int64?> source) => throw null;\n    public static double Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static double Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static double Average(this System.Linq.ParallelQuery<int> source) => throw null;\n    public static double Average(this System.Linq.ParallelQuery<double> source) => throw null;\n    public static double Average(this System.Linq.ParallelQuery<System.Int64> source) => throw null;\n    public static System.Decimal? Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Average(this System.Linq.ParallelQuery<System.Decimal?> source) => throw null;\n    public static System.Decimal Average<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Average(this System.Linq.ParallelQuery<System.Decimal> source) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Cast<TResult>(this System.Linq.ParallelQuery source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Concat<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Concat<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static bool Contains<TSource>(this System.Linq.ParallelQuery<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static bool Contains<TSource>(this System.Linq.ParallelQuery<TSource> source, TSource value) => throw null;\n    public static int Count<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static int Count<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(this System.Linq.ParallelQuery<TSource> source, TSource defaultValue) => throw null;\n    public static System.Linq.ParallelQuery<TSource> DefaultIfEmpty<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Distinct<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Distinct<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static TSource ElementAt<TSource>(this System.Linq.ParallelQuery<TSource> source, int index) => throw null;\n    public static TSource ElementAtOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, int index) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Empty<TResult>() => throw null;\n    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Except<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static TSource First<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource First<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static TSource FirstOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource FirstOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static void ForAll<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Action<TSource> action) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult> resultSelector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TElement,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupBy<TSource,TKey,TElement,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector) => throw null;\n    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TResult> GroupJoin<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult> resultSelector) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Intersect<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Linq.ParallelQuery<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,TInner,TResult> resultSelector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,TInner,TResult> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Join<TOuter,TInner,TKey,TResult>(this System.Linq.ParallelQuery<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Func<TOuter,TKey> outerKeySelector, System.Func<TInner,TKey> innerKeySelector, System.Func<TOuter,TInner,TResult> resultSelector) => throw null;\n    public static TSource Last<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource Last<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static TSource LastOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource LastOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Int64 LongCount<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static System.Int64 LongCount<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static int? Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static int? Max(this System.Linq.ParallelQuery<int?> source) => throw null;\n    public static int Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static int Max(this System.Linq.ParallelQuery<int> source) => throw null;\n    public static float? Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Max(this System.Linq.ParallelQuery<float?> source) => throw null;\n    public static float Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Max(this System.Linq.ParallelQuery<float> source) => throw null;\n    public static double? Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Max(this System.Linq.ParallelQuery<double?> source) => throw null;\n    public static double Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Max(this System.Linq.ParallelQuery<double> source) => throw null;\n    public static TSource Max<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static TResult Max<TSource,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TResult> selector) => throw null;\n    public static System.Int64? Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static System.Int64? Max(this System.Linq.ParallelQuery<System.Int64?> source) => throw null;\n    public static System.Int64 Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static System.Int64 Max(this System.Linq.ParallelQuery<System.Int64> source) => throw null;\n    public static System.Decimal? Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Max(this System.Linq.ParallelQuery<System.Decimal?> source) => throw null;\n    public static System.Decimal Max<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Max(this System.Linq.ParallelQuery<System.Decimal> source) => throw null;\n    public static int? Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static int? Min(this System.Linq.ParallelQuery<int?> source) => throw null;\n    public static int Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static int Min(this System.Linq.ParallelQuery<int> source) => throw null;\n    public static float? Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Min(this System.Linq.ParallelQuery<float?> source) => throw null;\n    public static float Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Min(this System.Linq.ParallelQuery<float> source) => throw null;\n    public static double? Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Min(this System.Linq.ParallelQuery<double?> source) => throw null;\n    public static double Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Min(this System.Linq.ParallelQuery<double> source) => throw null;\n    public static TSource Min<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static TResult Min<TSource,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TResult> selector) => throw null;\n    public static System.Int64? Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static System.Int64? Min(this System.Linq.ParallelQuery<System.Int64?> source) => throw null;\n    public static System.Int64 Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static System.Int64 Min(this System.Linq.ParallelQuery<System.Int64> source) => throw null;\n    public static System.Decimal? Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Min(this System.Linq.ParallelQuery<System.Decimal?> source) => throw null;\n    public static System.Decimal Min<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Min(this System.Linq.ParallelQuery<System.Decimal> source) => throw null;\n    public static System.Linq.ParallelQuery<TResult> OfType<TResult>(this System.Linq.ParallelQuery source) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> OrderBy<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> OrderByDescending<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.ParallelQuery<int> Range(int start, int count) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Repeat<TResult>(TResult element, int count) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Reverse<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Select<TSource,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int,TResult> selector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Select<TSource,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TResult> selector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>> selector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>> selector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TCollection,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource,TCollection,TResult> resultSelector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> SelectMany<TSource,TCollection,TResult>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource,TCollection,TResult> resultSelector) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static bool SequenceEqual<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static TSource Single<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource Single<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static TSource SingleOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static TSource SingleOrDefault<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Skip<TSource>(this System.Linq.ParallelQuery<TSource> source, int count) => throw null;\n    public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int,bool> predicate) => throw null;\n    public static System.Linq.ParallelQuery<TSource> SkipWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static int? Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int?> selector) => throw null;\n    public static int? Sum(this System.Linq.ParallelQuery<int?> source) => throw null;\n    public static int Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int> selector) => throw null;\n    public static int Sum(this System.Linq.ParallelQuery<int> source) => throw null;\n    public static float? Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float?> selector) => throw null;\n    public static float? Sum(this System.Linq.ParallelQuery<float?> source) => throw null;\n    public static float Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,float> selector) => throw null;\n    public static float Sum(this System.Linq.ParallelQuery<float> source) => throw null;\n    public static double? Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double?> selector) => throw null;\n    public static double? Sum(this System.Linq.ParallelQuery<double?> source) => throw null;\n    public static double Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,double> selector) => throw null;\n    public static double Sum(this System.Linq.ParallelQuery<double> source) => throw null;\n    public static System.Int64? Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64?> selector) => throw null;\n    public static System.Int64? Sum(this System.Linq.ParallelQuery<System.Int64?> source) => throw null;\n    public static System.Int64 Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Int64> selector) => throw null;\n    public static System.Int64 Sum(this System.Linq.ParallelQuery<System.Int64> source) => throw null;\n    public static System.Decimal? Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal?> selector) => throw null;\n    public static System.Decimal? Sum(this System.Linq.ParallelQuery<System.Decimal?> source) => throw null;\n    public static System.Decimal Sum<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,System.Decimal> selector) => throw null;\n    public static System.Decimal Sum(this System.Linq.ParallelQuery<System.Decimal> source) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Take<TSource>(this System.Linq.ParallelQuery<TSource> source, int count) => throw null;\n    public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int,bool> predicate) => throw null;\n    public static System.Linq.ParallelQuery<TSource> TakeWhile<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource,TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> ThenBy<TSource,TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource,TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IComparer<TKey> comparer) => throw null;\n    public static System.Linq.OrderedParallelQuery<TSource> ThenByDescending<TSource,TKey>(this System.Linq.OrderedParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static TSource[] ToArray<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TSource> ToDictionary<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Collections.Generic.Dictionary<TKey,TElement> ToDictionary<TSource,TKey,TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector) => throw null;\n    public static System.Collections.Generic.List<TSource> ToList<TSource>(this System.Linq.ParallelQuery<TSource> source) => throw null;\n    public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ILookup<TKey,TSource> ToLookup<TSource,TKey>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector) => throw null;\n    public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) => throw null;\n    public static System.Linq.ILookup<TKey,TElement> ToLookup<TSource,TKey,TElement>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,TKey> keySelector, System.Func<TSource,TElement> elementSelector) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Linq.ParallelQuery<TSource> second) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Union<TSource>(this System.Linq.ParallelQuery<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Where<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,int,bool> predicate) => throw null;\n    public static System.Linq.ParallelQuery<TSource> Where<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Func<TSource,bool> predicate) => throw null;\n    public static System.Linq.ParallelQuery<TSource> WithCancellation<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Threading.CancellationToken cancellationToken) => throw null;\n    public static System.Linq.ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(this System.Linq.ParallelQuery<TSource> source, int degreeOfParallelism) => throw null;\n    public static System.Linq.ParallelQuery<TSource> WithExecutionMode<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelExecutionMode executionMode) => throw null;\n    public static System.Linq.ParallelQuery<TSource> WithMergeOptions<TSource>(this System.Linq.ParallelQuery<TSource> source, System.Linq.ParallelMergeOptions mergeOptions) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Zip<TFirst,TSecond,TResult>(this System.Linq.ParallelQuery<TFirst> first, System.Linq.ParallelQuery<TSecond> second, System.Func<TFirst,TSecond,TResult> resultSelector) => throw null;\n    public static System.Linq.ParallelQuery<TResult> Zip<TFirst,TSecond,TResult>(this System.Linq.ParallelQuery<TFirst> first, System.Collections.Generic.IEnumerable<TSecond> second, System.Func<TFirst,TSecond,TResult> resultSelector) => throw null;\n}\n\n// Generated from `System.Linq.ParallelExecutionMode` in `System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ParallelExecutionMode\n{\n    Default,\n    ForceParallelism,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.Linq.ParallelMergeOptions` in `System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ParallelMergeOptions\n{\n    AutoBuffered,\n    Default,\n    FullyBuffered,\n    NotBuffered,\n    // Stub generator skipped constructor \n}\n\n// Generated from `System.Linq.ParallelQuery` in `System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ParallelQuery : System.Collections.IEnumerable\n{\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n}\n\n// Generated from `System.Linq.ParallelQuery<>` in `System.Linq.Parallel, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ParallelQuery<TSource> : System.Linq.ParallelQuery, System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<TSource>\n{\n    public virtual System.Collections.Generic.IEnumerator<TSource> GetEnumerator() => throw null;\n}\n\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Net\n{\n// Generated from `System.Net.AuthenticationSchemeSelector` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic delegate System.Net.AuthenticationSchemes AuthenticationSchemeSelector(System.Net.HttpListenerRequest httpRequest);\n\n// Generated from `System.Net.HttpListener` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic class HttpListener : System.IDisposable\n{\n    public void Abort() => throw null;\n    public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get => throw null; set => throw null; }\n    public System.Net.AuthenticationSchemes AuthenticationSchemes { get => throw null; set => throw null; }\n    public System.IAsyncResult BeginGetContext(System.AsyncCallback callback, object state) => throw null;\n    public void Close() => throw null;\n    public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get => throw null; }\n    void System.IDisposable.Dispose() => throw null;\n    public System.Net.HttpListenerContext EndGetContext(System.IAsyncResult asyncResult) => throw null;\n    public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get => throw null; set => throw null; }\n// Generated from `System.Net.HttpListener.ExtendedProtectionSelector` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic delegate System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionSelector(System.Net.HttpListenerRequest request);\n\n\n    public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get => throw null; set => throw null; }\n    public System.Net.HttpListenerContext GetContext() => throw null;\n    public System.Threading.Tasks.Task<System.Net.HttpListenerContext> GetContextAsync() => throw null;\n    public HttpListener() => throw null;\n    public bool IgnoreWriteExceptions { get => throw null; set => throw null; }\n    public bool IsListening { get => throw null; }\n    public static bool IsSupported { get => throw null; }\n    public System.Net.HttpListenerPrefixCollection Prefixes { get => throw null; }\n    public string Realm { get => throw null; set => throw null; }\n    public void Start() => throw null;\n    public void Stop() => throw null;\n    public System.Net.HttpListenerTimeoutManager TimeoutManager { get => throw null; }\n    public bool UnsafeConnectionNtlmAuthentication { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Net.HttpListenerBasicIdentity` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic class HttpListenerBasicIdentity\n{\n    public HttpListenerBasicIdentity(string username, string password) => throw null;\n    public virtual string Password { get => throw null; }\n}\n\n// Generated from `System.Net.HttpListenerContext` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic class HttpListenerContext\n{\n    public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, int receiveBufferSize, System.TimeSpan keepAliveInterval, System.ArraySegment<System.Byte> internalBuffer) => throw null;\n    public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, int receiveBufferSize, System.TimeSpan keepAliveInterval) => throw null;\n    public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol, System.TimeSpan keepAliveInterval) => throw null;\n    public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync(string subProtocol) => throw null;\n    public System.Net.HttpListenerRequest Request { get => throw null; }\n    public System.Net.HttpListenerResponse Response { get => throw null; }\n    public System.Security.Principal.IPrincipal User { get => throw null; }\n}\n\n// Generated from `System.Net.HttpListenerException` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic class HttpListenerException\n{\n    public override int ErrorCode { get => throw null; }\n    public HttpListenerException(int errorCode, string message) => throw null;\n    public HttpListenerException(int errorCode) => throw null;\n    public HttpListenerException() => throw null;\n    protected HttpListenerException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n}\n\n// Generated from `System.Net.HttpListenerPrefixCollection` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic class HttpListenerPrefixCollection : System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.ICollection<string>\n{\n    public void Add(string uriPrefix) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(string uriPrefix) => throw null;\n    public void CopyTo(string[] array, int offset) => throw null;\n    public void CopyTo(System.Array array, int offset) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.Generic.IEnumerator<string> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public bool Remove(string uriPrefix) => throw null;\n}\n\n// Generated from `System.Net.HttpListenerTimeoutManager` in `System.Net.HttpListener, Version=5.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51`\npublic class HttpListenerTimeoutManager\n{\n    public System.TimeSpan DrainEntityBody { get => throw null; set => throw null; }\n    public System.TimeSpan EntityBody { get => throw null; set => throw null; }\n    public System.TimeSpan HeaderWait { get => throw null; set => throw null; }\n    public System.TimeSpan IdleConnection { get => throw null; set => throw null; }\n    public System.Int64 MinSendBytesPerSecond { get => throw null; set => throw null; }\n    public System.TimeSpan RequestQueue { get => throw null; set => throw null; }\n}\n\nnamespace WebSockets\n{\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Net\n{\n// Generated from `System.Net.AuthenticationSchemes` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum AuthenticationSchemes\n{\n    Anonymous,\n    // Stub generator skipped constructor \n    Basic,\n    Digest,\n    IntegratedWindowsAuthentication,\n    Negotiate,\n    None,\n    Ntlm,\n}\n\n// Generated from `System.Net.Cookie` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Cookie\n{\n    public string Comment { get => throw null; set => throw null; }\n    public System.Uri CommentUri { get => throw null; set => throw null; }\n    public Cookie(string name, string value, string path, string domain) => throw null;\n    public Cookie(string name, string value, string path) => throw null;\n    public Cookie(string name, string value) => throw null;\n    public Cookie() => throw null;\n    public bool Discard { get => throw null; set => throw null; }\n    public string Domain { get => throw null; set => throw null; }\n    public override bool Equals(object comparand) => throw null;\n    public bool Expired { get => throw null; set => throw null; }\n    public System.DateTime Expires { get => throw null; set => throw null; }\n    public override int GetHashCode() => throw null;\n    public bool HttpOnly { get => throw null; set => throw null; }\n    public string Name { get => throw null; set => throw null; }\n    public string Path { get => throw null; set => throw null; }\n    public string Port { get => throw null; set => throw null; }\n    public bool Secure { get => throw null; set => throw null; }\n    public System.DateTime TimeStamp { get => throw null; }\n    public override string ToString() => throw null;\n    public string Value { get => throw null; set => throw null; }\n    public int Version { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Net.CookieCollection` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CookieCollection : System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyCollection<System.Net.Cookie>, System.Collections.Generic.IEnumerable<System.Net.Cookie>, System.Collections.Generic.ICollection<System.Net.Cookie>\n{\n    public void Add(System.Net.CookieCollection cookies) => throw null;\n    public void Add(System.Net.Cookie cookie) => throw null;\n    public void Clear() => throw null;\n    public bool Contains(System.Net.Cookie cookie) => throw null;\n    public CookieCollection() => throw null;\n    public void CopyTo(System.Net.Cookie[] array, int index) => throw null;\n    public void CopyTo(System.Array array, int index) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Net.Cookie> System.Collections.Generic.IEnumerable<System.Net.Cookie>.GetEnumerator() => throw null;\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public System.Net.Cookie this[string name] { get => throw null; }\n    public System.Net.Cookie this[int index] { get => throw null; }\n    public bool Remove(System.Net.Cookie cookie) => throw null;\n    public object SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Net.CookieContainer` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CookieContainer\n{\n    public void Add(System.Uri uri, System.Net.CookieCollection cookies) => throw null;\n    public void Add(System.Uri uri, System.Net.Cookie cookie) => throw null;\n    public void Add(System.Net.CookieCollection cookies) => throw null;\n    public void Add(System.Net.Cookie cookie) => throw null;\n    public int Capacity { get => throw null; set => throw null; }\n    public CookieContainer(int capacity, int perDomainCapacity, int maxCookieSize) => throw null;\n    public CookieContainer(int capacity) => throw null;\n    public CookieContainer() => throw null;\n    public int Count { get => throw null; }\n    public const int DefaultCookieLengthLimit = default;\n    public const int DefaultCookieLimit = default;\n    public const int DefaultPerDomainCookieLimit = default;\n    public string GetCookieHeader(System.Uri uri) => throw null;\n    public System.Net.CookieCollection GetCookies(System.Uri uri) => throw null;\n    public int MaxCookieSize { get => throw null; set => throw null; }\n    public int PerDomainCapacity { get => throw null; set => throw null; }\n    public void SetCookies(System.Uri uri, string cookieHeader) => throw null;\n}\n\n// Generated from `System.Net.CookieException` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CookieException : System.FormatException, System.Runtime.Serialization.ISerializable\n{\n    public CookieException() => throw null;\n    protected CookieException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n    public override void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n}\n\n// Generated from `System.Net.CookieVariant` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum CookieVariant\n{\n    // Stub generator skipped constructor \n    Default,\n    Plain,\n    Rfc2109,\n    Rfc2965,\n    Unknown,\n}\n\n// Generated from `System.Net.CredentialCache` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CredentialCache : System.Net.ICredentialsByHost, System.Net.ICredentials, System.Collections.IEnumerable\n{\n    public void Add(string host, int port, string authenticationType, System.Net.NetworkCredential credential) => throw null;\n    public void Add(System.Uri uriPrefix, string authType, System.Net.NetworkCredential cred) => throw null;\n    public CredentialCache() => throw null;\n    public static System.Net.ICredentials DefaultCredentials { get => throw null; }\n    public static System.Net.NetworkCredential DefaultNetworkCredentials { get => throw null; }\n    public System.Net.NetworkCredential GetCredential(string host, int port, string authenticationType) => throw null;\n    public System.Net.NetworkCredential GetCredential(System.Uri uriPrefix, string authType) => throw null;\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    public void Remove(string host, int port, string authenticationType) => throw null;\n    public void Remove(System.Uri uriPrefix, string authType) => throw null;\n}\n\n// Generated from `System.Net.DecompressionMethods` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum DecompressionMethods\n{\n    All,\n    Brotli,\n    // Stub generator skipped constructor \n    Deflate,\n    GZip,\n    None,\n}\n\n// Generated from `System.Net.DnsEndPoint` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DnsEndPoint : System.Net.EndPoint\n{\n    public override System.Net.Sockets.AddressFamily AddressFamily { get => throw null; }\n    public DnsEndPoint(string host, int port, System.Net.Sockets.AddressFamily addressFamily) => throw null;\n    public DnsEndPoint(string host, int port) => throw null;\n    public override bool Equals(object comparand) => throw null;\n    public override int GetHashCode() => throw null;\n    public string Host { get => throw null; }\n    public int Port { get => throw null; }\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.Net.EndPoint` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class EndPoint\n{\n    public virtual System.Net.Sockets.AddressFamily AddressFamily { get => throw null; }\n    public virtual System.Net.EndPoint Create(System.Net.SocketAddress socketAddress) => throw null;\n    protected EndPoint() => throw null;\n    public virtual System.Net.SocketAddress Serialize() => throw null;\n}\n\n// Generated from `System.Net.HttpStatusCode` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum HttpStatusCode\n{\n    Accepted,\n    AlreadyReported,\n    Ambiguous,\n    BadGateway,\n    BadRequest,\n    Conflict,\n    Continue,\n    Created,\n    EarlyHints,\n    ExpectationFailed,\n    FailedDependency,\n    Forbidden,\n    Found,\n    GatewayTimeout,\n    Gone,\n    // Stub generator skipped constructor \n    HttpVersionNotSupported,\n    IMUsed,\n    InsufficientStorage,\n    InternalServerError,\n    LengthRequired,\n    Locked,\n    LoopDetected,\n    MethodNotAllowed,\n    MisdirectedRequest,\n    Moved,\n    MovedPermanently,\n    MultiStatus,\n    MultipleChoices,\n    NetworkAuthenticationRequired,\n    NoContent,\n    NonAuthoritativeInformation,\n    NotAcceptable,\n    NotExtended,\n    NotFound,\n    NotImplemented,\n    NotModified,\n    OK,\n    PartialContent,\n    PaymentRequired,\n    PermanentRedirect,\n    PreconditionFailed,\n    PreconditionRequired,\n    Processing,\n    ProxyAuthenticationRequired,\n    Redirect,\n    RedirectKeepVerb,\n    RedirectMethod,\n    RequestEntityTooLarge,\n    RequestHeaderFieldsTooLarge,\n    RequestTimeout,\n    RequestUriTooLong,\n    RequestedRangeNotSatisfiable,\n    ResetContent,\n    SeeOther,\n    ServiceUnavailable,\n    SwitchingProtocols,\n    TemporaryRedirect,\n    TooManyRequests,\n    Unauthorized,\n    UnavailableForLegalReasons,\n    UnprocessableEntity,\n    UnsupportedMediaType,\n    Unused,\n    UpgradeRequired,\n    UseProxy,\n    VariantAlsoNegotiates,\n}\n\n// Generated from `System.Net.HttpVersion` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class HttpVersion\n{\n    public static System.Version Unknown;\n    public static System.Version Version10;\n    public static System.Version Version11;\n    public static System.Version Version20;\n}\n\n// Generated from `System.Net.ICredentials` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ICredentials\n{\n    System.Net.NetworkCredential GetCredential(System.Uri uri, string authType) => throw null;\n}\n\n// Generated from `System.Net.ICredentialsByHost` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ICredentialsByHost\n{\n    System.Net.NetworkCredential GetCredential(string host, int port, string authenticationType) => throw null;\n}\n\n// Generated from `System.Net.IPAddress` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class IPAddress\n{\n    public System.Int64 Address { get => throw null; set => throw null; }\n    public System.Net.Sockets.AddressFamily AddressFamily { get => throw null; }\n    public static System.Net.IPAddress Any;\n    public static System.Net.IPAddress Broadcast;\n    public override bool Equals(object comparand) => throw null;\n    public System.Byte[] GetAddressBytes() => throw null;\n    public override int GetHashCode() => throw null;\n    public static int HostToNetworkOrder(int host) => throw null;\n    public static System.Int64 HostToNetworkOrder(System.Int64 host) => throw null;\n    public static System.Int16 HostToNetworkOrder(System.Int16 host) => throw null;\n    public IPAddress(System.ReadOnlySpan<System.Byte> address, System.Int64 scopeid) => throw null;\n    public IPAddress(System.ReadOnlySpan<System.Byte> address) => throw null;\n    public IPAddress(System.Int64 newAddress) => throw null;\n    public IPAddress(System.Byte[] address, System.Int64 scopeid) => throw null;\n    public IPAddress(System.Byte[] address) => throw null;\n    public static System.Net.IPAddress IPv6Any;\n    public static System.Net.IPAddress IPv6Loopback;\n    public static System.Net.IPAddress IPv6None;\n    public bool IsIPv4MappedToIPv6 { get => throw null; }\n    public bool IsIPv6LinkLocal { get => throw null; }\n    public bool IsIPv6Multicast { get => throw null; }\n    public bool IsIPv6SiteLocal { get => throw null; }\n    public bool IsIPv6Teredo { get => throw null; }\n    public static bool IsLoopback(System.Net.IPAddress address) => throw null;\n    public static System.Net.IPAddress Loopback;\n    public System.Net.IPAddress MapToIPv4() => throw null;\n    public System.Net.IPAddress MapToIPv6() => throw null;\n    public static int NetworkToHostOrder(int network) => throw null;\n    public static System.Int64 NetworkToHostOrder(System.Int64 network) => throw null;\n    public static System.Int16 NetworkToHostOrder(System.Int16 network) => throw null;\n    public static System.Net.IPAddress None;\n    public static System.Net.IPAddress Parse(string ipString) => throw null;\n    public static System.Net.IPAddress Parse(System.ReadOnlySpan<System.Char> ipSpan) => throw null;\n    public System.Int64 ScopeId { get => throw null; set => throw null; }\n    public override string ToString() => throw null;\n    public bool TryFormat(System.Span<System.Char> destination, out int charsWritten) => throw null;\n    public static bool TryParse(string ipString, out System.Net.IPAddress address) => throw null;\n    public static bool TryParse(System.ReadOnlySpan<System.Char> ipSpan, out System.Net.IPAddress address) => throw null;\n    public bool TryWriteBytes(System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n}\n\n// Generated from `System.Net.IPEndPoint` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class IPEndPoint : System.Net.EndPoint\n{\n    public System.Net.IPAddress Address { get => throw null; set => throw null; }\n    public override System.Net.Sockets.AddressFamily AddressFamily { get => throw null; }\n    public override System.Net.EndPoint Create(System.Net.SocketAddress socketAddress) => throw null;\n    public override bool Equals(object comparand) => throw null;\n    public override int GetHashCode() => throw null;\n    public IPEndPoint(System.Net.IPAddress address, int port) => throw null;\n    public IPEndPoint(System.Int64 address, int port) => throw null;\n    public const int MaxPort = default;\n    public const int MinPort = default;\n    public static System.Net.IPEndPoint Parse(string s) => throw null;\n    public static System.Net.IPEndPoint Parse(System.ReadOnlySpan<System.Char> s) => throw null;\n    public int Port { get => throw null; set => throw null; }\n    public override System.Net.SocketAddress Serialize() => throw null;\n    public override string ToString() => throw null;\n    public static bool TryParse(string s, out System.Net.IPEndPoint result) => throw null;\n    public static bool TryParse(System.ReadOnlySpan<System.Char> s, out System.Net.IPEndPoint result) => throw null;\n}\n\n// Generated from `System.Net.IWebProxy` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface IWebProxy\n{\n    System.Net.ICredentials Credentials { get => throw null; set => throw null; }\n    System.Uri GetProxy(System.Uri destination) => throw null;\n    bool IsBypassed(System.Uri host) => throw null;\n}\n\n// Generated from `System.Net.NetworkCredential` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NetworkCredential : System.Net.ICredentialsByHost, System.Net.ICredentials\n{\n    public string Domain { get => throw null; set => throw null; }\n    public System.Net.NetworkCredential GetCredential(string host, int port, string authenticationType) => throw null;\n    public System.Net.NetworkCredential GetCredential(System.Uri uri, string authenticationType) => throw null;\n    public NetworkCredential(string userName, string password, string domain) => throw null;\n    public NetworkCredential(string userName, string password) => throw null;\n    public NetworkCredential(string userName, System.Security.SecureString password, string domain) => throw null;\n    public NetworkCredential(string userName, System.Security.SecureString password) => throw null;\n    public NetworkCredential() => throw null;\n    public string Password { get => throw null; set => throw null; }\n    public System.Security.SecureString SecurePassword { get => throw null; set => throw null; }\n    public string UserName { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Net.PathList` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PathList\n{\n    public PathList() => throw null;\n}\n\n// Generated from `System.Net.SocketAddress` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SocketAddress\n{\n    public override bool Equals(object comparand) => throw null;\n    public System.Net.Sockets.AddressFamily Family { get => throw null; }\n    public override int GetHashCode() => throw null;\n    public System.Byte this[int offset] { get => throw null; set => throw null; }\n    public int Size { get => throw null; }\n    public SocketAddress(System.Net.Sockets.AddressFamily family, int size) => throw null;\n    public SocketAddress(System.Net.Sockets.AddressFamily family) => throw null;\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.Net.TransportContext` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class TransportContext\n{\n    public abstract System.Security.Authentication.ExtendedProtection.ChannelBinding GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind kind);\n    protected TransportContext() => throw null;\n}\n\nnamespace Cache\n{\n// Generated from `System.Net.Cache.RequestCacheLevel` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum RequestCacheLevel\n{\n    BypassCache,\n    CacheIfAvailable,\n    CacheOnly,\n    Default,\n    NoCacheNoStore,\n    Reload,\n    // Stub generator skipped constructor \n    Revalidate,\n}\n\n// Generated from `System.Net.Cache.RequestCachePolicy` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RequestCachePolicy\n{\n    public System.Net.Cache.RequestCacheLevel Level { get => throw null; }\n    public RequestCachePolicy(System.Net.Cache.RequestCacheLevel level) => throw null;\n    public RequestCachePolicy() => throw null;\n    public override string ToString() => throw null;\n}\n\n}\nnamespace NetworkInformation\n{\n// Generated from `System.Net.NetworkInformation.IPAddressCollection` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class IPAddressCollection : System.Collections.IEnumerable, System.Collections.Generic.IEnumerable<System.Net.IPAddress>, System.Collections.Generic.ICollection<System.Net.IPAddress>\n{\n    public virtual void Add(System.Net.IPAddress address) => throw null;\n    public virtual void Clear() => throw null;\n    public virtual bool Contains(System.Net.IPAddress address) => throw null;\n    public virtual void CopyTo(System.Net.IPAddress[] array, int offset) => throw null;\n    public virtual int Count { get => throw null; }\n    public virtual System.Collections.Generic.IEnumerator<System.Net.IPAddress> GetEnumerator() => throw null;\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => throw null;\n    protected internal IPAddressCollection() => throw null;\n    public virtual bool IsReadOnly { get => throw null; }\n    public virtual System.Net.IPAddress this[int index] { get => throw null; }\n    public virtual bool Remove(System.Net.IPAddress address) => throw null;\n}\n\n}\nnamespace Security\n{\n// Generated from `System.Net.Security.AuthenticationLevel` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum AuthenticationLevel\n{\n    // Stub generator skipped constructor \n    MutualAuthRequested,\n    MutualAuthRequired,\n    None,\n}\n\n// Generated from `System.Net.Security.SslPolicyErrors` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum SslPolicyErrors\n{\n    None,\n    RemoteCertificateChainErrors,\n    RemoteCertificateNameMismatch,\n    RemoteCertificateNotAvailable,\n    // Stub generator skipped constructor \n}\n\n}\nnamespace Sockets\n{\n// Generated from `System.Net.Sockets.AddressFamily` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum AddressFamily\n{\n    // Stub generator skipped constructor \n    AppleTalk,\n    Atm,\n    Banyan,\n    Ccitt,\n    Chaos,\n    Cluster,\n    ControllerAreaNetwork,\n    DataKit,\n    DataLink,\n    DecNet,\n    Ecma,\n    FireFox,\n    HyperChannel,\n    Ieee12844,\n    ImpLink,\n    InterNetwork,\n    InterNetworkV6,\n    Ipx,\n    Irda,\n    Iso,\n    Lat,\n    Max,\n    NS,\n    NetBios,\n    NetworkDesigners,\n    Osi,\n    Packet,\n    Pup,\n    Sna,\n    Unix,\n    Unknown,\n    Unspecified,\n    VoiceView,\n}\n\n// Generated from `System.Net.Sockets.SocketError` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum SocketError\n{\n    AccessDenied,\n    AddressAlreadyInUse,\n    AddressFamilyNotSupported,\n    AddressNotAvailable,\n    AlreadyInProgress,\n    ConnectionAborted,\n    ConnectionRefused,\n    ConnectionReset,\n    DestinationAddressRequired,\n    Disconnecting,\n    Fault,\n    HostDown,\n    HostNotFound,\n    HostUnreachable,\n    IOPending,\n    InProgress,\n    Interrupted,\n    InvalidArgument,\n    IsConnected,\n    MessageSize,\n    NetworkDown,\n    NetworkReset,\n    NetworkUnreachable,\n    NoBufferSpaceAvailable,\n    NoData,\n    NoRecovery,\n    NotConnected,\n    NotInitialized,\n    NotSocket,\n    OperationAborted,\n    OperationNotSupported,\n    ProcessLimit,\n    ProtocolFamilyNotSupported,\n    ProtocolNotSupported,\n    ProtocolOption,\n    ProtocolType,\n    Shutdown,\n    SocketError,\n    // Stub generator skipped constructor \n    SocketNotSupported,\n    Success,\n    SystemNotReady,\n    TimedOut,\n    TooManyOpenSockets,\n    TryAgain,\n    TypeNotFound,\n    VersionNotSupported,\n    WouldBlock,\n}\n\n// Generated from `System.Net.Sockets.SocketException` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SocketException\n{\n    public override int ErrorCode { get => throw null; }\n    public override string Message { get => throw null; }\n    public System.Net.Sockets.SocketError SocketErrorCode { get => throw null; }\n    public SocketException(int errorCode) => throw null;\n    public SocketException() => throw null;\n    protected SocketException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n}\n\n}\n}\nnamespace Security\n{\nnamespace Authentication\n{\n// Generated from `System.Security.Authentication.CipherAlgorithmType` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum CipherAlgorithmType\n{\n    Aes,\n    Aes128,\n    Aes192,\n    Aes256,\n    // Stub generator skipped constructor \n    Des,\n    None,\n    Null,\n    Rc2,\n    Rc4,\n    TripleDes,\n}\n\n// Generated from `System.Security.Authentication.ExchangeAlgorithmType` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ExchangeAlgorithmType\n{\n    DiffieHellman,\n    // Stub generator skipped constructor \n    None,\n    RsaKeyX,\n    RsaSign,\n}\n\n// Generated from `System.Security.Authentication.HashAlgorithmType` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum HashAlgorithmType\n{\n    // Stub generator skipped constructor \n    Md5,\n    None,\n    Sha1,\n    Sha256,\n    Sha384,\n    Sha512,\n}\n\n// Generated from `System.Security.Authentication.SslProtocols` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum SslProtocols\n{\n    Default,\n    None,\n    Ssl2,\n    Ssl3,\n    // Stub generator skipped constructor \n    Tls,\n    Tls11,\n    Tls12,\n    Tls13,\n}\n\nnamespace ExtendedProtection\n{\n// Generated from `System.Security.Authentication.ExtendedProtection.ChannelBinding` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class ChannelBinding : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid\n{\n    protected ChannelBinding(bool ownsHandle) : base(default(bool)) => throw null;\n    protected ChannelBinding() : base(default(bool)) => throw null;\n    public abstract int Size { get; }\n}\n\n// Generated from `System.Security.Authentication.ExtendedProtection.ChannelBindingKind` in `System.Net.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ChannelBindingKind\n{\n    // Stub generator skipped constructor \n    Endpoint,\n    Unique,\n    Unknown,\n}\n\n}\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Net\n{\nnamespace Security\n{\n// Generated from `System.Net.Security.AuthenticatedStream` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class AuthenticatedStream : System.IO.Stream\n{\n    protected AuthenticatedStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen) => throw null;\n    protected override void Dispose(bool disposing) => throw null;\n    public override System.Threading.Tasks.ValueTask DisposeAsync() => throw null;\n    protected System.IO.Stream InnerStream { get => throw null; }\n    public abstract bool IsAuthenticated { get; }\n    public abstract bool IsEncrypted { get; }\n    public abstract bool IsMutuallyAuthenticated { get; }\n    public abstract bool IsServer { get; }\n    public abstract bool IsSigned { get; }\n    public bool LeaveInnerStreamOpen { get => throw null; }\n}\n\n// Generated from `System.Net.Security.CipherSuitesPolicy` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CipherSuitesPolicy\n{\n    public System.Collections.Generic.IEnumerable<System.Net.Security.TlsCipherSuite> AllowedCipherSuites { get => throw null; }\n    public CipherSuitesPolicy(System.Collections.Generic.IEnumerable<System.Net.Security.TlsCipherSuite> allowedCipherSuites) => throw null;\n}\n\n// Generated from `System.Net.Security.EncryptionPolicy` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum EncryptionPolicy\n{\n    AllowNoEncryption,\n    // Stub generator skipped constructor \n    NoEncryption,\n    RequireEncryption,\n}\n\n// Generated from `System.Net.Security.NegotiateStream` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class NegotiateStream : System.Net.Security.AuthenticatedStream\n{\n    public virtual void AuthenticateAsClient(System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) => throw null;\n    public virtual void AuthenticateAsClient(System.Net.NetworkCredential credential, string targetName) => throw null;\n    public virtual void AuthenticateAsClient(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) => throw null;\n    public virtual void AuthenticateAsClient(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) => throw null;\n    public virtual void AuthenticateAsClient() => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, string targetName) => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync() => throw null;\n    public virtual void AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) => throw null;\n    public virtual void AuthenticateAsServer(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) => throw null;\n    public virtual void AuthenticateAsServer(System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) => throw null;\n    public virtual void AuthenticateAsServer() => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync(System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) => throw null;\n    public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync() => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsClient(System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsClient(System.Net.NetworkCredential credential, string targetName, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsClient(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsClient(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsClient(System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsServer(System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsServer(System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public virtual System.IAsyncResult BeginAuthenticateAsServer(System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public override System.IAsyncResult BeginRead(System.Byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public override System.IAsyncResult BeginWrite(System.Byte[] buffer, int offset, int count, System.AsyncCallback asyncCallback, object asyncState) => throw null;\n    public override bool CanRead { get => throw null; }\n    public override bool CanSeek { get => throw null; }\n    public override bool CanTimeout { get => throw null; }\n    public override bool CanWrite { get => throw null; }\n    protected override void Dispose(bool disposing) => throw null;\n    public override System.Threading.Tasks.ValueTask DisposeAsync() => throw null;\n    public virtual void EndAuthenticateAsClient(System.IAsyncResult asyncResult) => throw null;\n    public virtual void EndAuthenticateAsServer(System.IAsyncResult asyncResult) => throw null;\n    public override int EndRead(System.IAsyncResult asyncResult) => throw null;\n    public override void EndWrite(System.IAsyncResult asyncResult) => throw null;\n    public override void Flush() => throw null;\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) => throw null;\n    public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get => throw null; }\n    public override bool IsAuthenticated { get => throw null; }\n    public override bool IsEncrypted { get => throw null; }\n    public override bool IsMutuallyAuthenticated { get => throw null; }\n    public override bool IsServer { get => throw null; }\n    public override bool IsSigned { get => throw null; }\n    public override System.Int64 Length { get => throw null; }\n    public NegotiateStream(System.IO.Stream innerStream, bool leaveInnerStreamOpen) : base(default(System.IO.Stream), default(bool)) => throw null;\n    public NegotiateStream(System.IO.Stream innerStream) : base(default(System.IO.Stream), default(bool)) => throw null;\n    public override System.Int64 Position { get => throw null; set => throw null; }\n    public override int Read(System.Byte[] buffer, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public override System.Threading.Tasks.Task<int> ReadAsync(System.Byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override int ReadTimeout { get => throw null; set => throw null; }\n    public virtual System.Security.Principal.IIdentity RemoteIdentity { get => throw null; }\n    public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin) => throw null;\n    public override void SetLength(System.Int64 value) => throw null;\n    public override void Write(System.Byte[] buffer, int offset, int count) => throw null;\n    public override System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<System.Byte> buffer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public override System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override int WriteTimeout { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Net.Security.ProtectionLevel` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ProtectionLevel\n{\n    EncryptAndSign,\n    None,\n    // Stub generator skipped constructor \n    Sign,\n}\n\n// Generated from `System.Net.Security.RemoteCertificateValidationCallback` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate bool RemoteCertificateValidationCallback(object sender, System.Net.Security.SslPolicyErrors sslPolicyErrors);\n\n// Generated from `System.Net.Security.ServerOptionsSelectionCallback` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate System.Threading.Tasks.ValueTask<System.Net.Security.SslServerAuthenticationOptions> ServerOptionsSelectionCallback(System.Net.Security.SslStream stream, System.Net.Security.SslClientHelloInfo clientHelloInfo, object state, System.Threading.CancellationToken cancellationToken);\n\n// Generated from `System.Net.Security.SslApplicationProtocol` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct SslApplicationProtocol : System.IEquatable<System.Net.Security.SslApplicationProtocol>\n{\n    public static bool operator !=(System.Net.Security.SslApplicationProtocol left, System.Net.Security.SslApplicationProtocol right) => throw null;\n    public static bool operator ==(System.Net.Security.SslApplicationProtocol left, System.Net.Security.SslApplicationProtocol right) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public bool Equals(System.Net.Security.SslApplicationProtocol other) => throw null;\n    public override int GetHashCode() => throw null;\n    public static System.Net.Security.SslApplicationProtocol Http11;\n    public static System.Net.Security.SslApplicationProtocol Http2;\n    public System.ReadOnlyMemory<System.Byte> Protocol { get => throw null; }\n    public SslApplicationProtocol(string protocol) => throw null;\n    public SslApplicationProtocol(System.Byte[] protocol) => throw null;\n    // Stub generator skipped constructor \n    public override string ToString() => throw null;\n}\n\n// Generated from `System.Net.Security.SslClientHelloInfo` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct SslClientHelloInfo\n{\n    public string ServerName { get => throw null; }\n    // Stub generator skipped constructor \n    public System.Security.Authentication.SslProtocols SslProtocols { get => throw null; }\n}\n\n// Generated from `System.Net.Security.SslStreamCertificateContext` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class SslStreamCertificateContext\n{\n    public static System.Net.Security.SslStreamCertificateContext Create(bool offline = default(bool)) => throw null;\n}\n\n// Generated from `System.Net.Security.TlsCipherSuite` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum TlsCipherSuite\n{\n    TLS_AES_128_CCM_8_SHA256,\n    TLS_AES_128_CCM_SHA256,\n    TLS_AES_128_GCM_SHA256,\n    TLS_AES_256_GCM_SHA384,\n    TLS_CHACHA20_POLY1305_SHA256,\n    TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA,\n    TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA,\n    TLS_DHE_DSS_WITH_AES_128_CBC_SHA,\n    TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,\n    TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,\n    TLS_DHE_DSS_WITH_AES_256_CBC_SHA,\n    TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,\n    TLS_DHE_DSS_WITH_AES_256_GCM_SHA384,\n    TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256,\n    TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256,\n    TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384,\n    TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384,\n    TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA,\n    TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA,\n    TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256,\n    TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_DHE_DSS_WITH_DES_CBC_SHA,\n    TLS_DHE_DSS_WITH_SEED_CBC_SHA,\n    TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA,\n    TLS_DHE_PSK_WITH_AES_128_CBC_SHA,\n    TLS_DHE_PSK_WITH_AES_128_CBC_SHA256,\n    TLS_DHE_PSK_WITH_AES_128_CCM,\n    TLS_DHE_PSK_WITH_AES_128_GCM_SHA256,\n    TLS_DHE_PSK_WITH_AES_256_CBC_SHA,\n    TLS_DHE_PSK_WITH_AES_256_CBC_SHA384,\n    TLS_DHE_PSK_WITH_AES_256_CCM,\n    TLS_DHE_PSK_WITH_AES_256_GCM_SHA384,\n    TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256,\n    TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256,\n    TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384,\n    TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384,\n    TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256,\n    TLS_DHE_PSK_WITH_NULL_SHA,\n    TLS_DHE_PSK_WITH_NULL_SHA256,\n    TLS_DHE_PSK_WITH_NULL_SHA384,\n    TLS_DHE_PSK_WITH_RC4_128_SHA,\n    TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA,\n    TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_DHE_RSA_WITH_AES_128_CBC_SHA,\n    TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,\n    TLS_DHE_RSA_WITH_AES_128_CCM,\n    TLS_DHE_RSA_WITH_AES_128_CCM_8,\n    TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,\n    TLS_DHE_RSA_WITH_AES_256_CBC_SHA,\n    TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,\n    TLS_DHE_RSA_WITH_AES_256_CCM,\n    TLS_DHE_RSA_WITH_AES_256_CCM_8,\n    TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,\n    TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256,\n    TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256,\n    TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384,\n    TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384,\n    TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,\n    TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,\n    TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,\n    TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,\n    TLS_DHE_RSA_WITH_DES_CBC_SHA,\n    TLS_DHE_RSA_WITH_SEED_CBC_SHA,\n    TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA,\n    TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA,\n    TLS_DH_DSS_WITH_AES_128_CBC_SHA,\n    TLS_DH_DSS_WITH_AES_128_CBC_SHA256,\n    TLS_DH_DSS_WITH_AES_128_GCM_SHA256,\n    TLS_DH_DSS_WITH_AES_256_CBC_SHA,\n    TLS_DH_DSS_WITH_AES_256_CBC_SHA256,\n    TLS_DH_DSS_WITH_AES_256_GCM_SHA384,\n    TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256,\n    TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256,\n    TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384,\n    TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384,\n    TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA,\n    TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA,\n    TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256,\n    TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_DH_DSS_WITH_DES_CBC_SHA,\n    TLS_DH_DSS_WITH_SEED_CBC_SHA,\n    TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA,\n    TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_DH_RSA_WITH_AES_128_CBC_SHA,\n    TLS_DH_RSA_WITH_AES_128_CBC_SHA256,\n    TLS_DH_RSA_WITH_AES_128_GCM_SHA256,\n    TLS_DH_RSA_WITH_AES_256_CBC_SHA,\n    TLS_DH_RSA_WITH_AES_256_CBC_SHA256,\n    TLS_DH_RSA_WITH_AES_256_GCM_SHA384,\n    TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256,\n    TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256,\n    TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384,\n    TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384,\n    TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA,\n    TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA,\n    TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256,\n    TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_DH_RSA_WITH_DES_CBC_SHA,\n    TLS_DH_RSA_WITH_SEED_CBC_SHA,\n    TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA,\n    TLS_DH_anon_EXPORT_WITH_RC4_40_MD5,\n    TLS_DH_anon_WITH_3DES_EDE_CBC_SHA,\n    TLS_DH_anon_WITH_AES_128_CBC_SHA,\n    TLS_DH_anon_WITH_AES_128_CBC_SHA256,\n    TLS_DH_anon_WITH_AES_128_GCM_SHA256,\n    TLS_DH_anon_WITH_AES_256_CBC_SHA,\n    TLS_DH_anon_WITH_AES_256_CBC_SHA256,\n    TLS_DH_anon_WITH_AES_256_GCM_SHA384,\n    TLS_DH_anon_WITH_ARIA_128_CBC_SHA256,\n    TLS_DH_anon_WITH_ARIA_128_GCM_SHA256,\n    TLS_DH_anon_WITH_ARIA_256_CBC_SHA384,\n    TLS_DH_anon_WITH_ARIA_256_GCM_SHA384,\n    TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA,\n    TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA,\n    TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256,\n    TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_DH_anon_WITH_DES_CBC_SHA,\n    TLS_DH_anon_WITH_RC4_128_MD5,\n    TLS_DH_anon_WITH_SEED_CBC_SHA,\n    TLS_ECCPWD_WITH_AES_128_CCM_SHA256,\n    TLS_ECCPWD_WITH_AES_128_GCM_SHA256,\n    TLS_ECCPWD_WITH_AES_256_CCM_SHA384,\n    TLS_ECCPWD_WITH_AES_256_GCM_SHA384,\n    TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,\n    TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,\n    TLS_ECDHE_ECDSA_WITH_AES_128_CCM,\n    TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8,\n    TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,\n    TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,\n    TLS_ECDHE_ECDSA_WITH_AES_256_CCM,\n    TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8,\n    TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\n    TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256,\n    TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256,\n    TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384,\n    TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384,\n    TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,\n    TLS_ECDHE_ECDSA_WITH_NULL_SHA,\n    TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,\n    TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA,\n    TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA,\n    TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256,\n    TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256,\n    TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256,\n    TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256,\n    TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA,\n    TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384,\n    TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384,\n    TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256,\n    TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384,\n    TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256,\n    TLS_ECDHE_PSK_WITH_NULL_SHA,\n    TLS_ECDHE_PSK_WITH_NULL_SHA256,\n    TLS_ECDHE_PSK_WITH_NULL_SHA384,\n    TLS_ECDHE_PSK_WITH_RC4_128_SHA,\n    TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,\n    TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,\n    TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,\n    TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,\n    TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,\n    TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256,\n    TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256,\n    TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384,\n    TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384,\n    TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,\n    TLS_ECDHE_RSA_WITH_NULL_SHA,\n    TLS_ECDHE_RSA_WITH_RC4_128_SHA,\n    TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,\n    TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,\n    TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,\n    TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,\n    TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,\n    TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,\n    TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256,\n    TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256,\n    TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384,\n    TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384,\n    TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_ECDH_ECDSA_WITH_NULL_SHA,\n    TLS_ECDH_ECDSA_WITH_RC4_128_SHA,\n    TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,\n    TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,\n    TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,\n    TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,\n    TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,\n    TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,\n    TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256,\n    TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256,\n    TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384,\n    TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384,\n    TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_ECDH_RSA_WITH_NULL_SHA,\n    TLS_ECDH_RSA_WITH_RC4_128_SHA,\n    TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA,\n    TLS_ECDH_anon_WITH_AES_128_CBC_SHA,\n    TLS_ECDH_anon_WITH_AES_256_CBC_SHA,\n    TLS_ECDH_anon_WITH_NULL_SHA,\n    TLS_ECDH_anon_WITH_RC4_128_SHA,\n    TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5,\n    TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA,\n    TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5,\n    TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA,\n    TLS_KRB5_EXPORT_WITH_RC4_40_MD5,\n    TLS_KRB5_EXPORT_WITH_RC4_40_SHA,\n    TLS_KRB5_WITH_3DES_EDE_CBC_MD5,\n    TLS_KRB5_WITH_3DES_EDE_CBC_SHA,\n    TLS_KRB5_WITH_DES_CBC_MD5,\n    TLS_KRB5_WITH_DES_CBC_SHA,\n    TLS_KRB5_WITH_IDEA_CBC_MD5,\n    TLS_KRB5_WITH_IDEA_CBC_SHA,\n    TLS_KRB5_WITH_RC4_128_MD5,\n    TLS_KRB5_WITH_RC4_128_SHA,\n    TLS_NULL_WITH_NULL_NULL,\n    TLS_PSK_DHE_WITH_AES_128_CCM_8,\n    TLS_PSK_DHE_WITH_AES_256_CCM_8,\n    TLS_PSK_WITH_3DES_EDE_CBC_SHA,\n    TLS_PSK_WITH_AES_128_CBC_SHA,\n    TLS_PSK_WITH_AES_128_CBC_SHA256,\n    TLS_PSK_WITH_AES_128_CCM,\n    TLS_PSK_WITH_AES_128_CCM_8,\n    TLS_PSK_WITH_AES_128_GCM_SHA256,\n    TLS_PSK_WITH_AES_256_CBC_SHA,\n    TLS_PSK_WITH_AES_256_CBC_SHA384,\n    TLS_PSK_WITH_AES_256_CCM,\n    TLS_PSK_WITH_AES_256_CCM_8,\n    TLS_PSK_WITH_AES_256_GCM_SHA384,\n    TLS_PSK_WITH_ARIA_128_CBC_SHA256,\n    TLS_PSK_WITH_ARIA_128_GCM_SHA256,\n    TLS_PSK_WITH_ARIA_256_CBC_SHA384,\n    TLS_PSK_WITH_ARIA_256_GCM_SHA384,\n    TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_PSK_WITH_CHACHA20_POLY1305_SHA256,\n    TLS_PSK_WITH_NULL_SHA,\n    TLS_PSK_WITH_NULL_SHA256,\n    TLS_PSK_WITH_NULL_SHA384,\n    TLS_PSK_WITH_RC4_128_SHA,\n    TLS_RSA_EXPORT_WITH_DES40_CBC_SHA,\n    TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5,\n    TLS_RSA_EXPORT_WITH_RC4_40_MD5,\n    TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA,\n    TLS_RSA_PSK_WITH_AES_128_CBC_SHA,\n    TLS_RSA_PSK_WITH_AES_128_CBC_SHA256,\n    TLS_RSA_PSK_WITH_AES_128_GCM_SHA256,\n    TLS_RSA_PSK_WITH_AES_256_CBC_SHA,\n    TLS_RSA_PSK_WITH_AES_256_CBC_SHA384,\n    TLS_RSA_PSK_WITH_AES_256_GCM_SHA384,\n    TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256,\n    TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256,\n    TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384,\n    TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384,\n    TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384,\n    TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256,\n    TLS_RSA_PSK_WITH_NULL_SHA,\n    TLS_RSA_PSK_WITH_NULL_SHA256,\n    TLS_RSA_PSK_WITH_NULL_SHA384,\n    TLS_RSA_PSK_WITH_RC4_128_SHA,\n    TLS_RSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_RSA_WITH_AES_128_CBC_SHA,\n    TLS_RSA_WITH_AES_128_CBC_SHA256,\n    TLS_RSA_WITH_AES_128_CCM,\n    TLS_RSA_WITH_AES_128_CCM_8,\n    TLS_RSA_WITH_AES_128_GCM_SHA256,\n    TLS_RSA_WITH_AES_256_CBC_SHA,\n    TLS_RSA_WITH_AES_256_CBC_SHA256,\n    TLS_RSA_WITH_AES_256_CCM,\n    TLS_RSA_WITH_AES_256_CCM_8,\n    TLS_RSA_WITH_AES_256_GCM_SHA384,\n    TLS_RSA_WITH_ARIA_128_CBC_SHA256,\n    TLS_RSA_WITH_ARIA_128_GCM_SHA256,\n    TLS_RSA_WITH_ARIA_256_CBC_SHA384,\n    TLS_RSA_WITH_ARIA_256_GCM_SHA384,\n    TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,\n    TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,\n    TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256,\n    TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,\n    TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,\n    TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384,\n    TLS_RSA_WITH_DES_CBC_SHA,\n    TLS_RSA_WITH_IDEA_CBC_SHA,\n    TLS_RSA_WITH_NULL_MD5,\n    TLS_RSA_WITH_NULL_SHA,\n    TLS_RSA_WITH_NULL_SHA256,\n    TLS_RSA_WITH_RC4_128_MD5,\n    TLS_RSA_WITH_RC4_128_SHA,\n    TLS_RSA_WITH_SEED_CBC_SHA,\n    TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA,\n    TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA,\n    TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA,\n    TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA,\n    TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA,\n    TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA,\n    TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA,\n    TLS_SRP_SHA_WITH_AES_128_CBC_SHA,\n    TLS_SRP_SHA_WITH_AES_256_CBC_SHA,\n    // Stub generator skipped constructor \n}\n\n}\n}\nnamespace Security\n{\nnamespace Authentication\n{\n// Generated from `System.Security.Authentication.AuthenticationException` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class AuthenticationException : System.SystemException\n{\n    public AuthenticationException(string message, System.Exception innerException) => throw null;\n    public AuthenticationException(string message) => throw null;\n    public AuthenticationException() => throw null;\n    protected AuthenticationException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n}\n\n// Generated from `System.Security.Authentication.InvalidCredentialException` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class InvalidCredentialException : System.Security.Authentication.AuthenticationException\n{\n    public InvalidCredentialException(string message, System.Exception innerException) => throw null;\n    public InvalidCredentialException(string message) => throw null;\n    public InvalidCredentialException() => throw null;\n    protected InvalidCredentialException(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext) => throw null;\n}\n\nnamespace ExtendedProtection\n{\n// Generated from `System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ExtendedProtectionPolicy : System.Runtime.Serialization.ISerializable\n{\n    public System.Security.Authentication.ExtendedProtection.ChannelBinding CustomChannelBinding { get => throw null; }\n    public System.Security.Authentication.ExtendedProtection.ServiceNameCollection CustomServiceNames { get => throw null; }\n    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement, System.Security.Authentication.ExtendedProtection.ProtectionScenario protectionScenario, System.Security.Authentication.ExtendedProtection.ServiceNameCollection customServiceNames) => throw null;\n    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement, System.Security.Authentication.ExtendedProtection.ProtectionScenario protectionScenario, System.Collections.ICollection customServiceNames) => throw null;\n    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement, System.Security.Authentication.ExtendedProtection.ChannelBinding customChannelBinding) => throw null;\n    public ExtendedProtectionPolicy(System.Security.Authentication.ExtendedProtection.PolicyEnforcement policyEnforcement) => throw null;\n    protected ExtendedProtectionPolicy(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public static bool OSSupportsExtendedProtection { get => throw null; }\n    public System.Security.Authentication.ExtendedProtection.PolicyEnforcement PolicyEnforcement { get => throw null; }\n    public System.Security.Authentication.ExtendedProtection.ProtectionScenario ProtectionScenario { get => throw null; }\n    public override string ToString() => throw null;\n}\n\n// Generated from `System.Security.Authentication.ExtendedProtection.PolicyEnforcement` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum PolicyEnforcement\n{\n    Always,\n    Never,\n    // Stub generator skipped constructor \n    WhenSupported,\n}\n\n// Generated from `System.Security.Authentication.ExtendedProtection.ProtectionScenario` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum ProtectionScenario\n{\n    // Stub generator skipped constructor \n    TransportSelected,\n    TrustedProxy,\n}\n\n// Generated from `System.Security.Authentication.ExtendedProtection.ServiceNameCollection` in `System.Net.Security, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ServiceNameCollection : System.Collections.ReadOnlyCollectionBase\n{\n    public bool Contains(string searchServiceName) => throw null;\n    public System.Security.Authentication.ExtendedProtection.ServiceNameCollection Merge(string serviceName) => throw null;\n    public System.Security.Authentication.ExtendedProtection.ServiceNameCollection Merge(System.Collections.IEnumerable serviceNames) => throw null;\n    public ServiceNameCollection(System.Collections.ICollection items) => throw null;\n}\n\n}\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Runtime\n{\nnamespace Serialization\n{\n// Generated from `System.Runtime.Serialization.CollectionDataContractAttribute` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CollectionDataContractAttribute : System.Attribute\n{\n    public CollectionDataContractAttribute() => throw null;\n    public bool IsItemNameSetExplicitly { get => throw null; }\n    public bool IsKeyNameSetExplicitly { get => throw null; }\n    public bool IsNameSetExplicitly { get => throw null; }\n    public bool IsNamespaceSetExplicitly { get => throw null; }\n    public bool IsReference { get => throw null; set => throw null; }\n    public bool IsReferenceSetExplicitly { get => throw null; }\n    public bool IsValueNameSetExplicitly { get => throw null; }\n    public string ItemName { get => throw null; set => throw null; }\n    public string KeyName { get => throw null; set => throw null; }\n    public string Name { get => throw null; set => throw null; }\n    public string Namespace { get => throw null; set => throw null; }\n    public string ValueName { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Runtime.Serialization.ContractNamespaceAttribute` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class ContractNamespaceAttribute : System.Attribute\n{\n    public string ClrNamespace { get => throw null; set => throw null; }\n    public string ContractNamespace { get => throw null; }\n    public ContractNamespaceAttribute(string contractNamespace) => throw null;\n}\n\n// Generated from `System.Runtime.Serialization.DataContractAttribute` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DataContractAttribute : System.Attribute\n{\n    public DataContractAttribute() => throw null;\n    public bool IsNameSetExplicitly { get => throw null; }\n    public bool IsNamespaceSetExplicitly { get => throw null; }\n    public bool IsReference { get => throw null; set => throw null; }\n    public bool IsReferenceSetExplicitly { get => throw null; }\n    public string Name { get => throw null; set => throw null; }\n    public string Namespace { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Runtime.Serialization.DataMemberAttribute` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class DataMemberAttribute : System.Attribute\n{\n    public DataMemberAttribute() => throw null;\n    public bool EmitDefaultValue { get => throw null; set => throw null; }\n    public bool IsNameSetExplicitly { get => throw null; }\n    public bool IsRequired { get => throw null; set => throw null; }\n    public string Name { get => throw null; set => throw null; }\n    public int Order { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Runtime.Serialization.EnumMemberAttribute` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class EnumMemberAttribute : System.Attribute\n{\n    public EnumMemberAttribute() => throw null;\n    public bool IsValueSetExplicitly { get => throw null; }\n    public string Value { get => throw null; set => throw null; }\n}\n\n// Generated from `System.Runtime.Serialization.ISerializationSurrogateProvider` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ISerializationSurrogateProvider\n{\n    object GetDeserializedObject(object obj, System.Type targetType) => throw null;\n    object GetObjectToSerialize(object obj, System.Type targetType) => throw null;\n    System.Type GetSurrogateType(System.Type type) => throw null;\n}\n\n// Generated from `System.Runtime.Serialization.IgnoreDataMemberAttribute` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class IgnoreDataMemberAttribute : System.Attribute\n{\n    public IgnoreDataMemberAttribute() => throw null;\n}\n\n// Generated from `System.Runtime.Serialization.InvalidDataContractException` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class InvalidDataContractException : System.Exception\n{\n    public InvalidDataContractException(string message, System.Exception innerException) => throw null;\n    public InvalidDataContractException(string message) => throw null;\n    public InvalidDataContractException() => throw null;\n    protected InvalidDataContractException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n}\n\n// Generated from `System.Runtime.Serialization.KnownTypeAttribute` in `System.Runtime.Serialization.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class KnownTypeAttribute : System.Attribute\n{\n    public KnownTypeAttribute(string methodName) => throw null;\n    public KnownTypeAttribute(System.Type type) => throw null;\n    public string MethodName { get => throw null; }\n    public System.Type Type { get => throw null; }\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Security\n{\nnamespace Cryptography\n{\n// Generated from `System.Security.Cryptography.AsymmetricAlgorithm` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class AsymmetricAlgorithm : System.IDisposable\n{\n    protected AsymmetricAlgorithm() => throw null;\n    public void Clear() => throw null;\n    public static System.Security.Cryptography.AsymmetricAlgorithm Create(string algName) => throw null;\n    public static System.Security.Cryptography.AsymmetricAlgorithm Create() => throw null;\n    public void Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    public virtual System.Byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<System.Char> password, System.Security.Cryptography.PbeParameters pbeParameters) => throw null;\n    public virtual System.Byte[] ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<System.Byte> passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters) => throw null;\n    public virtual System.Byte[] ExportPkcs8PrivateKey() => throw null;\n    public virtual System.Byte[] ExportSubjectPublicKeyInfo() => throw null;\n    public virtual void FromXmlString(string xmlString) => throw null;\n    public virtual void ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<System.Char> password, System.ReadOnlySpan<System.Byte> source, out int bytesRead) => throw null;\n    public virtual void ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<System.Byte> passwordBytes, System.ReadOnlySpan<System.Byte> source, out int bytesRead) => throw null;\n    public virtual void ImportFromEncryptedPem(System.ReadOnlySpan<System.Char> input, System.ReadOnlySpan<System.Char> password) => throw null;\n    public virtual void ImportFromEncryptedPem(System.ReadOnlySpan<System.Char> input, System.ReadOnlySpan<System.Byte> passwordBytes) => throw null;\n    public virtual void ImportFromPem(System.ReadOnlySpan<System.Char> input) => throw null;\n    public virtual void ImportPkcs8PrivateKey(System.ReadOnlySpan<System.Byte> source, out int bytesRead) => throw null;\n    public virtual void ImportSubjectPublicKeyInfo(System.ReadOnlySpan<System.Byte> source, out int bytesRead) => throw null;\n    public virtual string KeyExchangeAlgorithm { get => throw null; }\n    public virtual int KeySize { get => throw null; set => throw null; }\n    protected int KeySizeValue;\n    public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get => throw null; }\n    protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;\n    public virtual string SignatureAlgorithm { get => throw null; }\n    public virtual string ToXmlString(bool includePrivateParameters) => throw null;\n    public virtual bool TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<System.Char> password, System.Security.Cryptography.PbeParameters pbeParameters, System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n    public virtual bool TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan<System.Byte> passwordBytes, System.Security.Cryptography.PbeParameters pbeParameters, System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n    public virtual bool TryExportPkcs8PrivateKey(System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n    public virtual bool TryExportSubjectPublicKeyInfo(System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.CipherMode` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum CipherMode\n{\n    CBC,\n    CFB,\n    CTS,\n    // Stub generator skipped constructor \n    ECB,\n    OFB,\n}\n\n// Generated from `System.Security.Cryptography.CryptoStream` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CryptoStream : System.IO.Stream, System.IDisposable\n{\n    public override System.IAsyncResult BeginRead(System.Byte[] buffer, int offset, int count, System.AsyncCallback callback, object state) => throw null;\n    public override System.IAsyncResult BeginWrite(System.Byte[] buffer, int offset, int count, System.AsyncCallback callback, object state) => throw null;\n    public override bool CanRead { get => throw null; }\n    public override bool CanSeek { get => throw null; }\n    public override bool CanWrite { get => throw null; }\n    public void Clear() => throw null;\n    public CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode, bool leaveOpen) => throw null;\n    public CryptoStream(System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode) => throw null;\n    protected override void Dispose(bool disposing) => throw null;\n    public override System.Threading.Tasks.ValueTask DisposeAsync() => throw null;\n    public override int EndRead(System.IAsyncResult asyncResult) => throw null;\n    public override void EndWrite(System.IAsyncResult asyncResult) => throw null;\n    public override void Flush() => throw null;\n    public override System.Threading.Tasks.Task FlushAsync(System.Threading.CancellationToken cancellationToken) => throw null;\n    public void FlushFinalBlock() => throw null;\n    public System.Threading.Tasks.ValueTask FlushFinalBlockAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public bool HasFlushedFinalBlock { get => throw null; }\n    public override System.Int64 Length { get => throw null; }\n    public override System.Int64 Position { get => throw null; set => throw null; }\n    public override int Read(System.Byte[] buffer, int offset, int count) => throw null;\n    public override System.Threading.Tasks.Task<int> ReadAsync(System.Byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override int ReadByte() => throw null;\n    public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin) => throw null;\n    public override void SetLength(System.Int64 value) => throw null;\n    public override void Write(System.Byte[] buffer, int offset, int count) => throw null;\n    public override System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken) => throw null;\n    public override void WriteByte(System.Byte value) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.CryptoStreamMode` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum CryptoStreamMode\n{\n    // Stub generator skipped constructor \n    Read,\n    Write,\n}\n\n// Generated from `System.Security.Cryptography.CryptographicOperations` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic static class CryptographicOperations\n{\n    public static bool FixedTimeEquals(System.ReadOnlySpan<System.Byte> left, System.ReadOnlySpan<System.Byte> right) => throw null;\n    public static void ZeroMemory(System.Span<System.Byte> buffer) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.CryptographicUnexpectedOperationException` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CryptographicUnexpectedOperationException : System.Security.Cryptography.CryptographicException\n{\n    public CryptographicUnexpectedOperationException(string message, System.Exception inner) => throw null;\n    public CryptographicUnexpectedOperationException(string message) => throw null;\n    public CryptographicUnexpectedOperationException(string format, string insert) => throw null;\n    public CryptographicUnexpectedOperationException() => throw null;\n    protected CryptographicUnexpectedOperationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.HMAC` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class HMAC : System.Security.Cryptography.KeyedHashAlgorithm\n{\n    protected int BlockSizeValue { get => throw null; set => throw null; }\n    public static System.Security.Cryptography.HMAC Create(string algorithmName) => throw null;\n    public static System.Security.Cryptography.HMAC Create() => throw null;\n    protected override void Dispose(bool disposing) => throw null;\n    protected HMAC() => throw null;\n    protected override void HashCore(System.ReadOnlySpan<System.Byte> source) => throw null;\n    protected override void HashCore(System.Byte[] rgb, int ib, int cb) => throw null;\n    protected override System.Byte[] HashFinal() => throw null;\n    public string HashName { get => throw null; set => throw null; }\n    public override void Initialize() => throw null;\n    public override System.Byte[] Key { get => throw null; set => throw null; }\n    protected override bool TryHashFinal(System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.HashAlgorithm` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform, System.IDisposable\n{\n    public virtual bool CanReuseTransform { get => throw null; }\n    public virtual bool CanTransformMultipleBlocks { get => throw null; }\n    public void Clear() => throw null;\n    public System.Byte[] ComputeHash(System.IO.Stream inputStream) => throw null;\n    public System.Byte[] ComputeHash(System.Byte[] buffer, int offset, int count) => throw null;\n    public System.Byte[] ComputeHash(System.Byte[] buffer) => throw null;\n    public System.Threading.Tasks.Task<System.Byte[]> ComputeHashAsync(System.IO.Stream inputStream, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) => throw null;\n    public static System.Security.Cryptography.HashAlgorithm Create(string hashName) => throw null;\n    public static System.Security.Cryptography.HashAlgorithm Create() => throw null;\n    public void Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    public virtual System.Byte[] Hash { get => throw null; }\n    protected HashAlgorithm() => throw null;\n    protected virtual void HashCore(System.ReadOnlySpan<System.Byte> source) => throw null;\n    protected abstract void HashCore(System.Byte[] array, int ibStart, int cbSize);\n    protected abstract System.Byte[] HashFinal();\n    public virtual int HashSize { get => throw null; }\n    protected int HashSizeValue;\n    protected internal System.Byte[] HashValue;\n    public abstract void Initialize();\n    public virtual int InputBlockSize { get => throw null; }\n    public virtual int OutputBlockSize { get => throw null; }\n    protected int State;\n    public int TransformBlock(System.Byte[] inputBuffer, int inputOffset, int inputCount, System.Byte[] outputBuffer, int outputOffset) => throw null;\n    public System.Byte[] TransformFinalBlock(System.Byte[] inputBuffer, int inputOffset, int inputCount) => throw null;\n    public bool TryComputeHash(System.ReadOnlySpan<System.Byte> source, System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n    protected virtual bool TryHashFinal(System.Span<System.Byte> destination, out int bytesWritten) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.HashAlgorithmName` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic struct HashAlgorithmName : System.IEquatable<System.Security.Cryptography.HashAlgorithmName>\n{\n    public static bool operator !=(System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right) => throw null;\n    public static bool operator ==(System.Security.Cryptography.HashAlgorithmName left, System.Security.Cryptography.HashAlgorithmName right) => throw null;\n    public override bool Equals(object obj) => throw null;\n    public bool Equals(System.Security.Cryptography.HashAlgorithmName other) => throw null;\n    public static System.Security.Cryptography.HashAlgorithmName FromOid(string oidValue) => throw null;\n    public override int GetHashCode() => throw null;\n    public HashAlgorithmName(string name) => throw null;\n    // Stub generator skipped constructor \n    public static System.Security.Cryptography.HashAlgorithmName MD5 { get => throw null; }\n    public string Name { get => throw null; }\n    public static System.Security.Cryptography.HashAlgorithmName SHA1 { get => throw null; }\n    public static System.Security.Cryptography.HashAlgorithmName SHA256 { get => throw null; }\n    public static System.Security.Cryptography.HashAlgorithmName SHA384 { get => throw null; }\n    public static System.Security.Cryptography.HashAlgorithmName SHA512 { get => throw null; }\n    public override string ToString() => throw null;\n    public static bool TryFromOid(string oidValue, out System.Security.Cryptography.HashAlgorithmName value) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.ICryptoTransform` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic interface ICryptoTransform : System.IDisposable\n{\n    bool CanReuseTransform { get => throw null; }\n    bool CanTransformMultipleBlocks { get => throw null; }\n    int InputBlockSize { get => throw null; }\n    int OutputBlockSize { get => throw null; }\n    int TransformBlock(System.Byte[] inputBuffer, int inputOffset, int inputCount, System.Byte[] outputBuffer, int outputOffset) => throw null;\n    System.Byte[] TransformFinalBlock(System.Byte[] inputBuffer, int inputOffset, int inputCount) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.KeySizes` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class KeySizes\n{\n    public KeySizes(int minSize, int maxSize, int skipSize) => throw null;\n    public int MaxSize { get => throw null; }\n    public int MinSize { get => throw null; }\n    public int SkipSize { get => throw null; }\n}\n\n// Generated from `System.Security.Cryptography.KeyedHashAlgorithm` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm\n{\n    public static System.Security.Cryptography.KeyedHashAlgorithm Create(string algName) => throw null;\n    public static System.Security.Cryptography.KeyedHashAlgorithm Create() => throw null;\n    protected override void Dispose(bool disposing) => throw null;\n    public virtual System.Byte[] Key { get => throw null; set => throw null; }\n    protected System.Byte[] KeyValue;\n    protected KeyedHashAlgorithm() => throw null;\n}\n\n// Generated from `System.Security.Cryptography.PaddingMode` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum PaddingMode\n{\n    ANSIX923,\n    ISO10126,\n    None,\n    PKCS7,\n    // Stub generator skipped constructor \n    Zeros,\n}\n\n// Generated from `System.Security.Cryptography.PbeEncryptionAlgorithm` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum PbeEncryptionAlgorithm\n{\n    Aes128Cbc,\n    Aes192Cbc,\n    Aes256Cbc,\n    // Stub generator skipped constructor \n    TripleDes3KeyPkcs12,\n    Unknown,\n}\n\n// Generated from `System.Security.Cryptography.PbeParameters` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class PbeParameters\n{\n    public System.Security.Cryptography.PbeEncryptionAlgorithm EncryptionAlgorithm { get => throw null; }\n    public System.Security.Cryptography.HashAlgorithmName HashAlgorithm { get => throw null; }\n    public int IterationCount { get => throw null; }\n    public PbeParameters(System.Security.Cryptography.PbeEncryptionAlgorithm encryptionAlgorithm, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, int iterationCount) => throw null;\n}\n\n// Generated from `System.Security.Cryptography.SymmetricAlgorithm` in `System.Security.Cryptography.Primitives, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class SymmetricAlgorithm : System.IDisposable\n{\n    public virtual int BlockSize { get => throw null; set => throw null; }\n    protected int BlockSizeValue;\n    public void Clear() => throw null;\n    public static System.Security.Cryptography.SymmetricAlgorithm Create(string algName) => throw null;\n    public static System.Security.Cryptography.SymmetricAlgorithm Create() => throw null;\n    public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor() => throw null;\n    public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor(System.Byte[] rgbKey, System.Byte[] rgbIV);\n    public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor() => throw null;\n    public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor(System.Byte[] rgbKey, System.Byte[] rgbIV);\n    public void Dispose() => throw null;\n    protected virtual void Dispose(bool disposing) => throw null;\n    public virtual int FeedbackSize { get => throw null; set => throw null; }\n    protected int FeedbackSizeValue;\n    public abstract void GenerateIV();\n    public abstract void GenerateKey();\n    public virtual System.Byte[] IV { get => throw null; set => throw null; }\n    protected System.Byte[] IVValue;\n    public virtual System.Byte[] Key { get => throw null; set => throw null; }\n    public virtual int KeySize { get => throw null; set => throw null; }\n    protected int KeySizeValue;\n    protected System.Byte[] KeyValue;\n    public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get => throw null; }\n    protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;\n    public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get => throw null; }\n    protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;\n    public virtual System.Security.Cryptography.CipherMode Mode { get => throw null; set => throw null; }\n    protected System.Security.Cryptography.CipherMode ModeValue;\n    public virtual System.Security.Cryptography.PaddingMode Padding { get => throw null; set => throw null; }\n    protected System.Security.Cryptography.PaddingMode PaddingValue;\n    protected SymmetricAlgorithm() => throw null;\n    public bool ValidKeySize(int bitLength) => throw null;\n}\n\n}\n}\n}\n\n\n// This file contains auto-generated code.\n// original-extractor-options: /r:System.Text.RegularExpressions.dll /r:System.Collections.Specialized.dll /r:System.Net.dll /r:System.Web.dll /r:System.Net.HttpListener.dll /r:System.Collections.Specialized.dll /r:System.Private.Uri.dll /r:System.Runtime.Extensions.dll /r:System.Linq.Parallel.dll /r:System.Collections.Concurrent.dll /r:System.Linq.Expressions.dll /r:System.Collections.dll /r:System.Linq.Queryable.dll /r:System.Linq.dll /r:System.Collections.NonGeneric.dll /r:System.ObjectModel.dll /r:System.ComponentModel.TypeConverter.dll /r:System.IO.Compression.dll /r:System.IO.Pipes.dll /r:System.Net.Primitives.dll /r:System.Net.Security.dll /r:System.Security.Cryptography.Primitives.dll /r:System.Text.RegularExpressions.dll ${testdir}/../../../resources/stubs/System.Web.cs /r:System.Runtime.Serialization.Primitives.dll\n\nnamespace System\n{\nnamespace Text\n{\nnamespace RegularExpressions\n{\n// Generated from `System.Text.RegularExpressions.Capture` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Capture\n{\n    public int Index { get => throw null; set => throw null; }\n    public int Length { get => throw null; set => throw null; }\n    public override string ToString() => throw null;\n    public string Value { get => throw null; }\n}\n\n// Generated from `System.Text.RegularExpressions.CaptureCollection` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class CaptureCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<System.Text.RegularExpressions.Capture>, System.Collections.Generic.IReadOnlyCollection<System.Text.RegularExpressions.Capture>, System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>, System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Capture>, System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>\n{\n    void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Add(System.Text.RegularExpressions.Capture item) => throw null;\n    int System.Collections.IList.Add(object value) => throw null;\n    void System.Collections.IList.Clear() => throw null;\n    void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Clear() => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Contains(System.Text.RegularExpressions.Capture item) => throw null;\n    public void CopyTo(System.Text.RegularExpressions.Capture[] array, int arrayIndex) => throw null;\n    public void CopyTo(System.Array array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Capture> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Capture>.GetEnumerator() => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    int System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.IndexOf(System.Text.RegularExpressions.Capture item) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.Insert(int index, System.Text.RegularExpressions.Capture item) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public System.Text.RegularExpressions.Capture this[int i] { get => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    System.Text.RegularExpressions.Capture System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.this[int index] { get => throw null; set => throw null; }\n    void System.Collections.IList.Remove(object value) => throw null;\n    bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Capture>.Remove(System.Text.RegularExpressions.Capture item) => throw null;\n    void System.Collections.IList.RemoveAt(int index) => throw null;\n    void System.Collections.Generic.IList<System.Text.RegularExpressions.Capture>.RemoveAt(int index) => throw null;\n    public object SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Text.RegularExpressions.Group` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Group : System.Text.RegularExpressions.Capture\n{\n    public System.Text.RegularExpressions.CaptureCollection Captures { get => throw null; }\n    public string Name { get => throw null; }\n    public bool Success { get => throw null; }\n    public static System.Text.RegularExpressions.Group Synchronized(System.Text.RegularExpressions.Group inner) => throw null;\n}\n\n// Generated from `System.Text.RegularExpressions.GroupCollection` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class GroupCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<System.Text.RegularExpressions.Group>, System.Collections.Generic.IReadOnlyDictionary<string,System.Text.RegularExpressions.Group>, System.Collections.Generic.IReadOnlyCollection<System.Text.RegularExpressions.Group>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string,System.Text.RegularExpressions.Group>>, System.Collections.Generic.IList<System.Text.RegularExpressions.Group>, System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Text.RegularExpressions.Group>>, System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>\n{\n    void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Add(System.Text.RegularExpressions.Group item) => throw null;\n    int System.Collections.IList.Add(object value) => throw null;\n    void System.Collections.IList.Clear() => throw null;\n    void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Clear() => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Contains(System.Text.RegularExpressions.Group item) => throw null;\n    public bool ContainsKey(string key) => throw null;\n    public void CopyTo(System.Text.RegularExpressions.Group[] array, int arrayIndex) => throw null;\n    public void CopyTo(System.Array array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Group> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group>.GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string,System.Text.RegularExpressions.Group>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,System.Text.RegularExpressions.Group>>.GetEnumerator() => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    int System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.IndexOf(System.Text.RegularExpressions.Group item) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.Insert(int index, System.Text.RegularExpressions.Group item) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public System.Text.RegularExpressions.Group this[string groupname] { get => throw null; }\n    public System.Text.RegularExpressions.Group this[int groupnum] { get => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    System.Text.RegularExpressions.Group System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.this[int index] { get => throw null; set => throw null; }\n    public System.Collections.Generic.IEnumerable<string> Keys { get => throw null; }\n    void System.Collections.IList.Remove(object value) => throw null;\n    bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Group>.Remove(System.Text.RegularExpressions.Group item) => throw null;\n    void System.Collections.IList.RemoveAt(int index) => throw null;\n    void System.Collections.Generic.IList<System.Text.RegularExpressions.Group>.RemoveAt(int index) => throw null;\n    public object SyncRoot { get => throw null; }\n    public bool TryGetValue(string key, out System.Text.RegularExpressions.Group value) => throw null;\n    public System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Group> Values { get => throw null; }\n}\n\n// Generated from `System.Text.RegularExpressions.Match` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Match : System.Text.RegularExpressions.Group\n{\n    public static System.Text.RegularExpressions.Match Empty { get => throw null; }\n    public virtual System.Text.RegularExpressions.GroupCollection Groups { get => throw null; }\n    public System.Text.RegularExpressions.Match NextMatch() => throw null;\n    public virtual string Result(string replacement) => throw null;\n    public static System.Text.RegularExpressions.Match Synchronized(System.Text.RegularExpressions.Match inner) => throw null;\n}\n\n// Generated from `System.Text.RegularExpressions.MatchCollection` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class MatchCollection : System.Collections.IList, System.Collections.IEnumerable, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList<System.Text.RegularExpressions.Match>, System.Collections.Generic.IReadOnlyCollection<System.Text.RegularExpressions.Match>, System.Collections.Generic.IList<System.Text.RegularExpressions.Match>, System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>, System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>\n{\n    void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Add(System.Text.RegularExpressions.Match item) => throw null;\n    int System.Collections.IList.Add(object value) => throw null;\n    void System.Collections.IList.Clear() => throw null;\n    void System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Clear() => throw null;\n    bool System.Collections.IList.Contains(object value) => throw null;\n    bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Contains(System.Text.RegularExpressions.Match item) => throw null;\n    public void CopyTo(System.Text.RegularExpressions.Match[] array, int arrayIndex) => throw null;\n    public void CopyTo(System.Array array, int arrayIndex) => throw null;\n    public int Count { get => throw null; }\n    public System.Collections.IEnumerator GetEnumerator() => throw null;\n    System.Collections.Generic.IEnumerator<System.Text.RegularExpressions.Match> System.Collections.Generic.IEnumerable<System.Text.RegularExpressions.Match>.GetEnumerator() => throw null;\n    int System.Collections.IList.IndexOf(object value) => throw null;\n    int System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.IndexOf(System.Text.RegularExpressions.Match item) => throw null;\n    void System.Collections.IList.Insert(int index, object value) => throw null;\n    void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.Insert(int index, System.Text.RegularExpressions.Match item) => throw null;\n    bool System.Collections.IList.IsFixedSize { get => throw null; }\n    public bool IsReadOnly { get => throw null; }\n    public bool IsSynchronized { get => throw null; }\n    public virtual System.Text.RegularExpressions.Match this[int i] { get => throw null; }\n    object System.Collections.IList.this[int index] { get => throw null; set => throw null; }\n    System.Text.RegularExpressions.Match System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.this[int index] { get => throw null; set => throw null; }\n    void System.Collections.IList.Remove(object value) => throw null;\n    bool System.Collections.Generic.ICollection<System.Text.RegularExpressions.Match>.Remove(System.Text.RegularExpressions.Match item) => throw null;\n    void System.Collections.IList.RemoveAt(int index) => throw null;\n    void System.Collections.Generic.IList<System.Text.RegularExpressions.Match>.RemoveAt(int index) => throw null;\n    public object SyncRoot { get => throw null; }\n}\n\n// Generated from `System.Text.RegularExpressions.MatchEvaluator` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic delegate string MatchEvaluator(System.Text.RegularExpressions.Match match);\n\n// Generated from `System.Text.RegularExpressions.Regex` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class Regex : System.Runtime.Serialization.ISerializable\n{\n    public static int CacheSize { get => throw null; set => throw null; }\n    protected System.Collections.IDictionary CapNames { get => throw null; set => throw null; }\n    protected System.Collections.IDictionary Caps { get => throw null; set => throw null; }\n    public static void CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes, string resourceFile) => throw null;\n    public static void CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname, System.Reflection.Emit.CustomAttributeBuilder[] attributes) => throw null;\n    public static void CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[] regexinfos, System.Reflection.AssemblyName assemblyname) => throw null;\n    public static string Escape(string str) => throw null;\n    public string[] GetGroupNames() => throw null;\n    public int[] GetGroupNumbers() => throw null;\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public string GroupNameFromNumber(int i) => throw null;\n    public int GroupNumberFromName(string name) => throw null;\n    public static System.TimeSpan InfiniteMatchTimeout;\n    protected void InitializeReferences() => throw null;\n    public static bool IsMatch(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) => throw null;\n    public static bool IsMatch(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) => throw null;\n    public static bool IsMatch(string input, string pattern) => throw null;\n    public bool IsMatch(string input, int startat) => throw null;\n    public bool IsMatch(string input) => throw null;\n    public static System.Text.RegularExpressions.Match Match(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) => throw null;\n    public static System.Text.RegularExpressions.Match Match(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) => throw null;\n    public static System.Text.RegularExpressions.Match Match(string input, string pattern) => throw null;\n    public System.Text.RegularExpressions.Match Match(string input, int startat) => throw null;\n    public System.Text.RegularExpressions.Match Match(string input, int beginning, int length) => throw null;\n    public System.Text.RegularExpressions.Match Match(string input) => throw null;\n    public System.TimeSpan MatchTimeout { get => throw null; }\n    public static System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) => throw null;\n    public static System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) => throw null;\n    public static System.Text.RegularExpressions.MatchCollection Matches(string input, string pattern) => throw null;\n    public System.Text.RegularExpressions.MatchCollection Matches(string input, int startat) => throw null;\n    public System.Text.RegularExpressions.MatchCollection Matches(string input) => throw null;\n    public System.Text.RegularExpressions.RegexOptions Options { get => throw null; }\n    public Regex(string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) => throw null;\n    public Regex(string pattern, System.Text.RegularExpressions.RegexOptions options) => throw null;\n    public Regex(string pattern) => throw null;\n    protected Regex(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    protected Regex() => throw null;\n    public string Replace(string input, string replacement, int count, int startat) => throw null;\n    public string Replace(string input, string replacement, int count) => throw null;\n    public string Replace(string input, string replacement) => throw null;\n    public string Replace(string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count, int startat) => throw null;\n    public string Replace(string input, System.Text.RegularExpressions.MatchEvaluator evaluator, int count) => throw null;\n    public string Replace(string input, System.Text.RegularExpressions.MatchEvaluator evaluator) => throw null;\n    public static string Replace(string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) => throw null;\n    public static string Replace(string input, string pattern, string replacement, System.Text.RegularExpressions.RegexOptions options) => throw null;\n    public static string Replace(string input, string pattern, string replacement) => throw null;\n    public static string Replace(string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) => throw null;\n    public static string Replace(string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator, System.Text.RegularExpressions.RegexOptions options) => throw null;\n    public static string Replace(string input, string pattern, System.Text.RegularExpressions.MatchEvaluator evaluator) => throw null;\n    public bool RightToLeft { get => throw null; }\n    public string[] Split(string input, int count, int startat) => throw null;\n    public string[] Split(string input, int count) => throw null;\n    public string[] Split(string input) => throw null;\n    public static string[] Split(string input, string pattern, System.Text.RegularExpressions.RegexOptions options, System.TimeSpan matchTimeout) => throw null;\n    public static string[] Split(string input, string pattern, System.Text.RegularExpressions.RegexOptions options) => throw null;\n    public static string[] Split(string input, string pattern) => throw null;\n    public override string ToString() => throw null;\n    public static string Unescape(string str) => throw null;\n    protected bool UseOptionC() => throw null;\n    protected internal bool UseOptionR() => throw null;\n    protected internal static void ValidateMatchTimeout(System.TimeSpan matchTimeout) => throw null;\n    protected internal System.Collections.Hashtable capnames;\n    protected internal System.Collections.Hashtable caps;\n    protected internal int capsize;\n    protected internal string[] capslist;\n    protected internal System.Text.RegularExpressions.RegexRunnerFactory factory;\n    protected internal System.TimeSpan internalMatchTimeout;\n    protected internal string pattern;\n    protected internal System.Text.RegularExpressions.RegexOptions roptions;\n}\n\n// Generated from `System.Text.RegularExpressions.RegexCompilationInfo` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RegexCompilationInfo\n{\n    public bool IsPublic { get => throw null; set => throw null; }\n    public System.TimeSpan MatchTimeout { get => throw null; set => throw null; }\n    public string Name { get => throw null; set => throw null; }\n    public string Namespace { get => throw null; set => throw null; }\n    public System.Text.RegularExpressions.RegexOptions Options { get => throw null; set => throw null; }\n    public string Pattern { get => throw null; set => throw null; }\n    public RegexCompilationInfo(string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, System.TimeSpan matchTimeout) => throw null;\n    public RegexCompilationInfo(string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) => throw null;\n}\n\n// Generated from `System.Text.RegularExpressions.RegexMatchTimeoutException` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RegexMatchTimeoutException : System.TimeoutException, System.Runtime.Serialization.ISerializable\n{\n    void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public string Input { get => throw null; }\n    public System.TimeSpan MatchTimeout { get => throw null; }\n    public string Pattern { get => throw null; }\n    public RegexMatchTimeoutException(string regexInput, string regexPattern, System.TimeSpan matchTimeout) => throw null;\n    public RegexMatchTimeoutException(string message, System.Exception inner) => throw null;\n    public RegexMatchTimeoutException(string message) => throw null;\n    public RegexMatchTimeoutException() => throw null;\n    protected RegexMatchTimeoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n}\n\n// Generated from `System.Text.RegularExpressions.RegexOptions` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\n[System.Flags]\npublic enum RegexOptions\n{\n    Compiled,\n    CultureInvariant,\n    ECMAScript,\n    ExplicitCapture,\n    IgnoreCase,\n    IgnorePatternWhitespace,\n    Multiline,\n    None,\n    // Stub generator skipped constructor \n    RightToLeft,\n    Singleline,\n}\n\n// Generated from `System.Text.RegularExpressions.RegexParseError` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic enum RegexParseError\n{\n    AlternationHasComment,\n    AlternationHasMalformedCondition,\n    AlternationHasMalformedReference,\n    AlternationHasNamedCapture,\n    AlternationHasTooManyConditions,\n    AlternationHasUndefinedReference,\n    CaptureGroupNameInvalid,\n    CaptureGroupOfZero,\n    ExclusionGroupNotLast,\n    InsufficientClosingParentheses,\n    InsufficientOpeningParentheses,\n    InsufficientOrInvalidHexDigits,\n    InvalidGroupingConstruct,\n    InvalidUnicodePropertyEscape,\n    MalformedNamedReference,\n    MalformedUnicodePropertyEscape,\n    MissingControlCharacter,\n    NestedQuantifiersNotParenthesized,\n    QuantifierAfterNothing,\n    QuantifierOrCaptureGroupOutOfRange,\n    // Stub generator skipped constructor \n    ReversedCharacterRange,\n    ReversedQuantifierRange,\n    ShorthandClassInCharacterRange,\n    UndefinedNamedReference,\n    UndefinedNumberedReference,\n    UnescapedEndingBackslash,\n    Unknown,\n    UnrecognizedControlCharacter,\n    UnrecognizedEscape,\n    UnrecognizedUnicodeProperty,\n    UnterminatedBracket,\n    UnterminatedComment,\n}\n\n// Generated from `System.Text.RegularExpressions.RegexParseException` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic class RegexParseException : System.ArgumentException\n{\n    public System.Text.RegularExpressions.RegexParseError Error { get => throw null; }\n    public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) => throw null;\n    public int Offset { get => throw null; }\n}\n\n// Generated from `System.Text.RegularExpressions.RegexRunner` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class RegexRunner\n{\n    protected void Capture(int capnum, int start, int end) => throw null;\n    protected static bool CharInClass(System.Char ch, string charClass) => throw null;\n    protected static bool CharInSet(System.Char ch, string set, string category) => throw null;\n    protected void CheckTimeout() => throw null;\n    protected void Crawl(int i) => throw null;\n    protected int Crawlpos() => throw null;\n    protected void DoubleCrawl() => throw null;\n    protected void DoubleStack() => throw null;\n    protected void DoubleTrack() => throw null;\n    protected void EnsureStorage() => throw null;\n    protected abstract bool FindFirstChar();\n    protected abstract void Go();\n    protected abstract void InitTrackCount();\n    protected bool IsBoundary(int index, int startpos, int endpos) => throw null;\n    protected bool IsECMABoundary(int index, int startpos, int endpos) => throw null;\n    protected bool IsMatched(int cap) => throw null;\n    protected int MatchIndex(int cap) => throw null;\n    protected int MatchLength(int cap) => throw null;\n    protected int Popcrawl() => throw null;\n    protected internal RegexRunner() => throw null;\n    protected internal System.Text.RegularExpressions.Match Scan(System.Text.RegularExpressions.Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, System.TimeSpan timeout) => throw null;\n    protected internal System.Text.RegularExpressions.Match Scan(System.Text.RegularExpressions.Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick) => throw null;\n    protected void TransferCapture(int capnum, int uncapnum, int start, int end) => throw null;\n    protected void Uncapture() => throw null;\n    protected internal int[] runcrawl;\n    protected internal int runcrawlpos;\n    protected internal System.Text.RegularExpressions.Match runmatch;\n    protected internal System.Text.RegularExpressions.Regex runregex;\n    protected internal int[] runstack;\n    protected internal int runstackpos;\n    protected internal string runtext;\n    protected internal int runtextbeg;\n    protected internal int runtextend;\n    protected internal int runtextpos;\n    protected internal int runtextstart;\n    protected internal int[] runtrack;\n    protected internal int runtrackcount;\n    protected internal int runtrackpos;\n}\n\n// Generated from `System.Text.RegularExpressions.RegexRunnerFactory` in `System.Text.RegularExpressions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`\npublic abstract class RegexRunnerFactory\n{\n    protected internal abstract System.Text.RegularExpressions.RegexRunner CreateInstance();\n    protected RegexRunnerFactory() => throw null;\n}\n\n}\n}\n}\n\n\n |
